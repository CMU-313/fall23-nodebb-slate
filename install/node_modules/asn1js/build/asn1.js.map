{"version":3,"sources":["../src/asn1.js"],"names":["assertBigInt","BigInt","Error","prepareIndefiniteForm","baseBlock","idBlock","isConstructed","i","valueBlock","value","length","lenBlock","isIndefiniteForm","concat","buffers","outputLength","prevLength","buffer","byteLength","retBuf","ArrayBuffer","retView","Uint8Array","set","powers2","digitsString","NAME","VALUE_BEFORE_DECODE","BLOCK_LENGTH","ERROR","WARNINGS","VALUE_HEX","IS_HEX_ONLY","ID_BLOCK","TAG_CLASS","TAG_NUMBER","IS_CONSTRUCTED","LEN_BLOCK","IS_INDEFINITE_FORM","LONG_FORM_USED","LENGTH","OPTIONAL","PRIMITIVE_SCHEMA","VALUE","VALUE_DATE","FROM_BER","TO_BER","LOCAL","UNUSED_BITS","VALUE_DEC","IS_FIRST_SID","DATA","EMPTY_STRING","EMPTY_BUFFER","ViewWriter","constructor","items","write","buf","push","final","LocalBaseBlock","parameters","blockLength","error","warnings","valueBeforeDecode","slice","blockName","toJSON","HexBlock","BaseClass","LocalHexBlockMixin","isHexOnly","valueHex","fromBER","inputBuffer","inputOffset","inputLength","intBuffer","toBER","sizeOnly","object","ex","LocalIdentificationBlock","tagClass","tagNumber","firstOctet","number","encodedBuf","encodedView","size","curView","tagClassMask","tagNumberMask","count","tagNumberBufferMaxLength","intTagNumberBuffer","tempBuffer","tempBufferView","LocalLengthBlock","longFormUsed","lengthBufferView","ValueBlock","TypeError","BaseBlock","valueBlockType","name","optional","primitiveSchema","resultOffset","writer","_writer","idBlockBuf","valueBlockSizeBuf","lenBlockBuf","valueBlockBuf","toString","LocalPrimitiveValueBlock","valueHexView","Primitive","LocalConstructedValueBlock","initialOffset","initialLength","checkLen","indefiniteLength","currentOffset","returnObject","LocalFromBER","offset","result","EndOfContent","pop","Constructed","values","split","map","o","join","LocalEndOfContentValueBlock","LocalBooleanValueBlock","view","utilDecodeTC","call","Boolean","Sequence","Set","Null","LocalOctetStringValueBlock","prototype","currentBlockName","OctetString","asn","e","isEqual","octetString","JSON","stringify","LocalBitStringValueBlock","unusedBits","BitString","bitString","bits","byte","padStart","LocalIntegerValueBlock","valueDec","_value","_valueHex","_valueDec","fromDER","expectedLength","updatedValueHex","updatedView","toDER","viewAdd","first","second","c","firstView","secondView","firstViewCopy","firstViewCopyLength","secondViewCopy","secondViewCopyLength","max","counter","power2","n","p","digits","newValue","viewSub","b","firstBit","bitNumber","currentByte","asn1View","flag","byteNumber","charAt","Integer","otherValue","convertToDER","integer","convertFromDER","hex","bigInt","Enumerated","LocalSidValueBlock","isFirstSid","tempValueHex","tempView","valueBigInt","bytes","parseInt","sidValue","LocalObjectIdentifierValueBlock","fromString","sidBlock","retBufs","valueBuf","string","pos1","pos2","sid","indexOf","substr","plus","parsedSID","isNaN","Number","MAX_SAFE_INTEGER","sidStr","sidArray","ObjectIdentifier","LocalUtf8StringValueBlock","Utf8String","fromBuffer","String","fromCharCode","apply","decodeURIComponent","escape","inputString","str","unescape","encodeURIComponent","strLen","charCodeAt","LocalRelativeSidValueBlock","LocalRelativeObjectIdentifierValueBlock","RelativeObjectIdentifier","LocalBmpStringValueBlock","BmpString","copyBuffer","valueView","temp","Uint16Array","strLength","codeBuf","codeView","dif","j","LocalUniversalStringValueBlock","UniversalString","Uint32Array","LocalSimpleStringValueBlock","LocalSimpleStringBlock","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","UTCTime","year","month","day","hour","minute","fromDate","valueDate","toBuffer","inputDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toDate","Date","UTC","parser","parserArray","exec","outputArray","Array","GeneralizedTime","millisecond","getUTCMilliseconds","isUTC","timeString","dateTimeString","fractionPart","hourDifference","minuteDifference","valueOf","multiplier","differencePosition","differenceString","fractionPointPosition","fractionPartCheck","fractionResult","Math","floor","tempDate","getUTCDay","DATE","TimeOfDay","DateTime","Duration","TIME","Choice","Any","Repeated","local","RawData","data","incomingOffset","localChangeType","inputObject","newType","newObject","Object","newASN1Type","compareSchema","root","inputData","inputSchema","choiceResult","verified","_result","hasOwnProperty","encodedId","decodedOffset","schemaView","replace","admission","maxLength","_optional","arrayRoot","asn1","verifySchema","fromJSON","json"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\n/*\n * Copyright (c) 2016-2018, Peculiar Ventures\n * All rights reserved.\n *\n * Author 2016-2018, Yury Strozhevsky <www.strozhevsky.com>.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors\n *    may be used to endorse or promote products derived from this software without\n *    specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n * OF SUCH DAMAGE.\n *\n */\n//**************************************************************************************\nimport { getParametersValue, padNumber, isEqualBuffer, bufferToHexCodes, checkBufferParams, utilToBase, utilFromBase, utilEncodeTC, utilDecodeTC, utilConcatView } from \"pvutils\";\n//**************************************************************************************\n//#region Other utility functions\n//**************************************************************************************\nfunction assertBigInt()\n{\n\tif(typeof BigInt === \"undefined\")\n\t{\n\t\tthrow new Error(\"BigInt is not defined. Your environment doesn't implement BigInt.\");\n\t}\n}\n\n/**\n * Recursive function which checks and enables isIndefiniteForm flag for constructed blocks if any child has that flag enabled\n * @param {BaseBlock} baseBlock Base ASN.1 block\n * @returns Returns `true` if incoming block is `indefinite form`\n */\nfunction prepareIndefiniteForm(baseBlock)\n{\n\tif(baseBlock.idBlock.isConstructed)\n\t{\n\t\tfor(let i = 0; i < baseBlock.valueBlock.value.length; i++)\n\t\t{\n\t\t\tif(prepareIndefiniteForm(baseBlock.valueBlock.value[i]))\n\t\t\t{\n\t\t\t\tbaseBlock.lenBlock.isIndefiniteForm = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn !!baseBlock.lenBlock.isIndefiniteForm;\n}\n\n/**\n * Concatenates buffers from the list\n * @param {Array.<ArrayBuffer>} buffers List of buffers\n * @returns Concatenated buffer\n */\nfunction concat(buffers) \n{\n\t//#region Initial variables\n\tlet outputLength = 0;\n\tlet prevLength = 0;\n\t//#endregion\n\n\t//#region Calculate output length\n\tfor(let i = 0; i < buffers.length; i++)\n\t{\n\t\tconst buffer = buffers[i];\n\t\toutputLength += buffer.byteLength;\n\t}\n\t//#endregion\n\n\tconst retBuf = new ArrayBuffer(outputLength);\n\tconst retView = new Uint8Array(retBuf);\n\n\tfor(let i = 0; i < buffers.length; i++)\n\t{\n\t\tconst buffer = buffers[i];\n\t\tretView.set(new Uint8Array(buffer), prevLength);\n\t\tprevLength += buffer.byteLength;\n\t}\n\n\treturn retBuf;\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of global variables\n//**************************************************************************************\nconst powers2 = [new Uint8Array([1])];\nconst digitsString = \"0123456789\";\nconst NAME = \"name\";\nconst VALUE_BEFORE_DECODE = \"valueBeforeDecode\";\nconst BLOCK_LENGTH = \"blockLength\";\nconst ERROR = \"error\";\nconst WARNINGS = \"warnings\";\nconst VALUE_HEX = \"valueHex\";\nconst IS_HEX_ONLY = \"isHexOnly\";\nconst ID_BLOCK = \"idBlock\";\nconst TAG_CLASS = \"tagClass\";\nconst TAG_NUMBER = \"tagNumber\";\nconst IS_CONSTRUCTED = \"isConstructed\";\nconst LEN_BLOCK = \"lenBlock\";\nconst IS_INDEFINITE_FORM = \"isIndefiniteForm\";\nconst LONG_FORM_USED = \"longFormUsed\";\nconst LENGTH = \"length\";\nconst OPTIONAL = \"optional\";\nconst PRIMITIVE_SCHEMA = \"primitiveSchema\";\nconst VALUE = \"value\";\nconst VALUE_DATE = \"valueDate\";\nconst FROM_BER = \"fromBER\";\nconst TO_BER = \"toBER\";\nconst LOCAL = \"local\";\nconst UNUSED_BITS = \"unusedBits\";\nconst VALUE_DEC = \"valueDec\";\nconst IS_FIRST_SID = \"isFirstSid\";\nconst DATA = \"data\";\nconst EMPTY_STRING = \"\";\nconst EMPTY_BUFFER = new ArrayBuffer(0);\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration for \"ViewWriter\"\n//**************************************************************************************\nclass ViewWriter\n{\n\tconstructor()\n\t{\n\t\t/**\n\t\t * @type {Array.<ArrayBuffer>}\n\t\t */\n\t\tthis.items = [];\n\t}\n\n\t/**\n\t * Writes buffer\n\t * @param {ArrayBuffer} buf \n\t */\n\twrite(buf)\n\t{\n\t\tthis.items.push(buf);\n\t}\n\n\t/**\n\t * Concatenates all buffers\n\t * @returns {ArrayBuffer}\n\t */\n\tfinal()\n\t{\n\t\treturn concat(this.items);\n\t}\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration for \"LocalBaseBlock\" class\n//**************************************************************************************\n/**\n * Class used as a base block for all remaining ASN.1 classes\n * @typedef LocalBaseBlock\n * @interface\n * @property {number} blockLength\n * @property {string} error\n * @property {Array.<string>} warnings\n * @property {ArrayBuffer} valueBeforeDecode\n */\nclass LocalBaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBaseBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueBeforeDecode]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {number} blockLength\n\t\t */\n\t\tthis.blockLength = getParametersValue(parameters, BLOCK_LENGTH, 0);\n\t\t/**\n\t\t * @type {string} error\n\t\t */\n\t\tthis.error = getParametersValue(parameters, ERROR, EMPTY_STRING);\n\t\t/**\n\t\t * @type {Array.<string>} warnings\n\t\t */\n\t\tthis.warnings = getParametersValue(parameters, WARNINGS, []);\n\t\t//noinspection JSCheckFunctionSignatures\n\t\t/**\n\t\t * @type {ArrayBuffer} valueBeforeDecode\n\t\t */\n\t\tif(VALUE_BEFORE_DECODE in parameters)\n\t\t\tthis.valueBeforeDecode = parameters.valueBeforeDecode.slice(0);\n\t\telse\n\t\t\tthis.valueBeforeDecode = EMPTY_BUFFER;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"baseBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tblockName: this.constructor.blockName(),\n\t\t\tblockLength: this.blockLength,\n\t\t\terror: this.error,\n\t\t\twarnings: this.warnings,\n\t\t\tvalueBeforeDecode: bufferToHexCodes(this.valueBeforeDecode, 0, this.valueBeforeDecode.byteLength)\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Description for \"HexBlock\" class\n//**************************************************************************************\n/**\n * Class used as a base block for all remaining ASN.1 classes\n * @extends LocalBaseBlock\n * @typedef HexBlock\n * @property {number} blockLength\n * @property {string} error\n * @property {Array.<string>} warnings\n * @property {ArrayBuffer} valueBeforeDecode\n * @property {boolean} isHexOnly\n * @property {ArrayBuffer} valueHex\n */\n//noinspection JSUnusedLocalSymbols\nexport const HexBlock = BaseClass => class LocalHexBlockMixin extends BaseClass\n{\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Constructor for \"HexBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.isHexOnly = getParametersValue(parameters, IS_HEX_ONLY, false);\n\t\t/**\n\t\t * @type {ArrayBuffer}\n\t\t */\n\t\tif(VALUE_HEX in parameters)\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\n\t\telse\n\t\t\tthis.valueHex = EMPTY_BUFFER;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"hexBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//#region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//#endregion\n\n\t\t//#region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//#endregion\n\n\t\t//#region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.warnings.push(\"Zero buffer length\");\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Copy input buffer to internal buffer\n\t\tthis.valueHex = inputBuffer.slice(inputOffset, inputOffset + inputLength);\n\t\t//#endregion\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tif(this.isHexOnly !== true)\n\t\t{\n\t\t\tthis.error = \"Flag \\\"isHexOnly\\\" is not set, abort\";\n\t\t\treturn EMPTY_BUFFER;\n\t\t}\n\n\t\tif(sizeOnly === true)\n\t\t\treturn new ArrayBuffer(this.valueHex.byteLength);\n\n\t\t//noinspection JSCheckFunctionSignatures\n\t\treturn this.valueHex.slice(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.blockName = this.constructor.blockName();\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n};\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of identification block class\n//**************************************************************************************\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBaseBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {Object} [idBlock]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper();\n\n\t\tif(ID_BLOCK in parameters)\n\t\t{\n\t\t\t//#region Properties from hexBlock class\n\t\t\tthis.isHexOnly = getParametersValue(parameters.idBlock, IS_HEX_ONLY, false);\n\t\t\tthis.valueHex = getParametersValue(parameters.idBlock, VALUE_HEX, EMPTY_BUFFER);\n\t\t\t//#endregion\n\n\t\t\tthis.tagClass = getParametersValue(parameters.idBlock, TAG_CLASS, (-1));\n\t\t\tthis.tagNumber = getParametersValue(parameters.idBlock, TAG_NUMBER, (-1));\n\t\t\tthis.isConstructed = getParametersValue(parameters.idBlock, IS_CONSTRUCTED, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.tagClass = (-1);\n\t\t\tthis.tagNumber = (-1);\n\t\t\tthis.isConstructed = false;\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"identificationBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//#region Initial variables\n\t\tlet firstOctet = 0;\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//#endregion\n\n\t\tswitch(this.tagClass)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\tfirstOctet |= 0x00; // UNIVERSAL\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tfirstOctet |= 0x40; // APPLICATION\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tfirstOctet |= 0x80; // CONTEXT-SPECIFIC\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tfirstOctet |= 0xC0; // PRIVATE\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.error = \"Unknown tag class\";\n\t\t\t\treturn (EMPTY_BUFFER);\n\t\t}\n\n\t\tif(this.isConstructed)\n\t\t\tfirstOctet |= 0x20;\n\n\t\tif((this.tagNumber < 31) && (!this.isHexOnly))\n\t\t{\n\t\t\tretBuf = new ArrayBuffer(1);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tif(!sizeOnly)\n\t\t\t{\n\t\t\t\tlet number = this.tagNumber;\n\t\t\t\tnumber &= 0x1F;\n\t\t\t\tfirstOctet |= number;\n\n\t\t\t\tretView[0] = firstOctet;\n\t\t\t}\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tif(this.isHexOnly === false)\n\t\t{\n\t\t\tconst encodedBuf = utilToBase(this.tagNumber, 7);\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tconst size = encodedBuf.byteLength;\n\n\t\t\tretBuf = new ArrayBuffer(size + 1);\n\t\t\tretView = new Uint8Array(retBuf);\n\t\t\tretView[0] = (firstOctet | 0x1F);\n\n\t\t\tif(!sizeOnly)\n\t\t\t{\n\t\t\t\tfor(let i = 0; i < (size - 1); i++)\n\t\t\t\t\tretView[i + 1] = encodedView[i] | 0x80;\n\n\t\t\t\tretView[size] = encodedView[size - 1];\n\t\t\t}\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\n\t\tretView = new Uint8Array(retBuf);\n\n\t\tretView[0] = (firstOctet | 0x1F);\n\n\t\tif(sizeOnly === false)\n\t\t{\n\t\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\t\tfor(let i = 0; i < (curView.length - 1); i++)\n\t\t\t\tretView[i + 1] = curView[i] | 0x80;\n\n\t\t\tretView[this.valueHex.byteLength] = curView[curView.length - 1];\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//#region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//#endregion\n\n\t\t//#region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//#endregion\n\n\t\t//#region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.error = \"Zero buffer length\";\n\t\t\treturn (-1);\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Find tag class\n\t\tconst tagClassMask = intBuffer[0] & 0xC0;\n\n\t\tswitch(tagClassMask)\n\t\t{\n\t\t\tcase 0x00:\n\t\t\t\tthis.tagClass = (1); // UNIVERSAL\n\t\t\t\tbreak;\n\t\t\tcase 0x40:\n\t\t\t\tthis.tagClass = (2); // APPLICATION\n\t\t\t\tbreak;\n\t\t\tcase 0x80:\n\t\t\t\tthis.tagClass = (3); // CONTEXT-SPECIFIC\n\t\t\t\tbreak;\n\t\t\tcase 0xC0:\n\t\t\t\tthis.tagClass = (4); // PRIVATE\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.error = \"Unknown tag class\";\n\t\t\t\treturn (-1);\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Find it's constructed or not\n\t\tthis.isConstructed = (intBuffer[0] & 0x20) === 0x20;\n\t\t//#endregion\n\n\t\t//#region Find tag number\n\t\tthis.isHexOnly = false;\n\n\t\tconst tagNumberMask = intBuffer[0] & 0x1F;\n\n\t\t//#region Simple case (tag number < 31)\n\t\tif(tagNumberMask !== 0x1F)\n\t\t{\n\t\t\tthis.tagNumber = (tagNumberMask);\n\t\t\tthis.blockLength = 1;\n\t\t}\n\t\t//#endregion\n\t\t//#region Tag number bigger or equal to 31\n\t\telse\n\t\t{\n\t\t\tlet count = 1;\n\n\t\t\tthis.valueHex = new ArrayBuffer(255);\n\t\t\tlet tagNumberBufferMaxLength = 255;\n\t\t\tlet intTagNumberBuffer = new Uint8Array(this.valueHex);\n\n\t\t\t//noinspection JSBitwiseOperatorUsage\n\t\t\twhile(intBuffer[count] & 0x80)\n\t\t\t{\n\t\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n\t\t\t\tcount++;\n\n\t\t\t\tif(count >= intBuffer.length)\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\n\t\t\t\t//#region In case if tag number length is greater than 255 bytes (rare but possible case)\n\t\t\t\tif(count === tagNumberBufferMaxLength)\n\t\t\t\t{\n\t\t\t\t\ttagNumberBufferMaxLength += 255;\n\n\t\t\t\t\tconst tempBuffer = new ArrayBuffer(tagNumberBufferMaxLength);\n\t\t\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\n\n\t\t\t\t\tfor(let i = 0; i < intTagNumberBuffer.length; i++)\n\t\t\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\n\n\t\t\t\t\tthis.valueHex = new ArrayBuffer(tagNumberBufferMaxLength);\n\t\t\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\n\t\t\t\t}\n\t\t\t\t//#endregion\n\t\t\t}\n\n\t\t\tthis.blockLength = (count + 1);\n\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F; // Write last byte to buffer\n\n\t\t\t//#region Cut buffer\n\t\t\tconst tempBuffer = new ArrayBuffer(count);\n\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\n\n\t\t\tfor(let i = 0; i < count; i++)\n\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\n\n\t\t\tthis.valueHex = new ArrayBuffer(count);\n\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\n\t\t\tintTagNumberBuffer.set(tempBufferView);\n\t\t\t//#endregion\n\n\t\t\t//#region Try to convert long tag number to short form\n\t\t\tif(this.blockLength <= 9)\n\t\t\t\tthis.tagNumber = utilFromBase(intTagNumberBuffer, 7);\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.isHexOnly = true;\n\t\t\t\tthis.warnings.push(\"Tag too long, represented as hex-coded\");\n\t\t\t}\n\t\t\t//#endregion\n\t\t}\n\t\t//#endregion\n\t\t//#endregion\n\n\t\t//#region Check if constructed encoding was using for primitive type\n\t\tif(((this.tagClass === 1)) &&\n\t\t\t(this.isConstructed))\n\t\t{\n\t\t\tswitch(this.tagNumber)\n\t\t\t{\n\t\t\t\tcase 1:  // Boolean\n\t\t\t\tcase 2:  // REAL\n\t\t\t\tcase 5:  // Null\n\t\t\t\tcase 6:  // OBJECT IDENTIFIER\n\t\t\t\tcase 9:  // REAL\n\t\t\t\tcase 13: // RELATIVE OBJECT IDENTIFIER\n\t\t\t\tcase 14: // Time\n\t\t\t\tcase 23:\n\t\t\t\tcase 24:\n\t\t\t\tcase 31:\n\t\t\t\tcase 32:\n\t\t\t\tcase 33:\n\t\t\t\tcase 34:\n\t\t\t\t\tthis.error = \"Constructed encoding used for primitive type\";\n\t\t\t\t\treturn (-1);\n\t\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t\t//#endregion\n\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {{blockName: string,\n\t *  tagClass: number,\n\t *  tagNumber: number,\n\t *  isConstructed: boolean,\n\t *  isHexOnly: boolean,\n\t *  valueHex: ArrayBuffer,\n\t *  blockLength: number,\n\t *  error: string, warnings: Array.<string>,\n\t *  valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.blockName = this.constructor.blockName();\n\t\tobject.tagClass = this.tagClass;\n\t\tobject.tagNumber = this.tagNumber;\n\t\tobject.isConstructed = this.isConstructed;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of length block class\n//**************************************************************************************\nclass LocalLengthBlock extends LocalBaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalLengthBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {Object} [lenBlock]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper();\n\n\t\tif(LEN_BLOCK in parameters)\n\t\t{\n\t\t\tthis.isIndefiniteForm = getParametersValue(parameters.lenBlock, IS_INDEFINITE_FORM, false);\n\t\t\tthis.longFormUsed = getParametersValue(parameters.lenBlock, LONG_FORM_USED, false);\n\t\t\tthis.length = getParametersValue(parameters.lenBlock, LENGTH, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.isIndefiniteForm = false;\n\t\t\tthis.longFormUsed = false;\n\t\t\tthis.length = 0;\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"lengthBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//#region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//#endregion\n\n\t\t//#region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//#endregion\n\n\t\t//#region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.error = \"Zero buffer length\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif(intBuffer[0] === 0xFF)\n\t\t{\n\t\t\tthis.error = \"Length block 0xFF is reserved by standard\";\n\t\t\treturn (-1);\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Check for length form type\n\t\tthis.isIndefiniteForm = intBuffer[0] === 0x80;\n\t\t//#endregion\n\n\t\t//#region Stop working in case of indefinite length form\n\t\tif(this.isIndefiniteForm === true)\n\t\t{\n\t\t\tthis.blockLength = 1;\n\t\t\treturn (inputOffset + this.blockLength);\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Check is long form of length encoding using\n\t\tthis.longFormUsed = !!(intBuffer[0] & 0x80);\n\t\t//#endregion\n\n\t\t//#region Stop working in case of short form of length value\n\t\tif(this.longFormUsed === false)\n\t\t{\n\t\t\tthis.length = (intBuffer[0]);\n\t\t\tthis.blockLength = 1;\n\t\t\treturn (inputOffset + this.blockLength);\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Calculate length value in case of long form\n\t\tconst count = intBuffer[0] & 0x7F;\n\n\t\tif(count > 8) // Too big length value\n\t\t{\n\t\t\tthis.error = \"Too big integer\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif((count + 1) > intBuffer.length)\n\t\t{\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tconst lengthBufferView = new Uint8Array(count);\n\n\t\tfor(let i = 0; i < count; i++)\n\t\t\tlengthBufferView[i] = intBuffer[i + 1];\n\n\t\tif(lengthBufferView[count - 1] === 0x00)\n\t\t\tthis.warnings.push(\"Needlessly long encoded length\");\n\n\t\tthis.length = utilFromBase(lengthBufferView, 8);\n\n\t\tif(this.longFormUsed && (this.length <= 127))\n\t\t\tthis.warnings.push(\"Unnecessary usage of long length form\");\n\n\t\tthis.blockLength = count + 1;\n\t\t//#endregion\n\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//#region Initial variables\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//#endregion\n\n\t\tif(this.length > 127)\n\t\t\tthis.longFormUsed = true;\n\n\t\tif(this.isIndefiniteForm)\n\t\t{\n\t\t\tretBuf = new ArrayBuffer(1);\n\n\t\t\tif(sizeOnly === false)\n\t\t\t{\n\t\t\t\tretView = new Uint8Array(retBuf);\n\t\t\t\tretView[0] = 0x80;\n\t\t\t}\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tif(this.longFormUsed === true)\n\t\t{\n\t\t\tconst encodedBuf = utilToBase(this.length, 8);\n\n\t\t\tif(encodedBuf.byteLength > 127)\n\t\t\t{\n\t\t\t\tthis.error = \"Too big length\";\n\t\t\t\treturn (EMPTY_BUFFER);\n\t\t\t}\n\n\t\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\n\n\t\t\tif(sizeOnly === true)\n\t\t\t\treturn retBuf;\n\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tretView[0] = encodedBuf.byteLength | 0x80;\n\n\t\t\tfor(let i = 0; i < encodedBuf.byteLength; i++)\n\t\t\t\tretView[i + 1] = encodedView[i];\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(1);\n\n\t\tif(sizeOnly === false)\n\t\t{\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tretView[0] = this.length;\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.blockName = this.constructor.blockName();\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\n\t\tobject.longFormUsed = this.longFormUsed;\n\t\tobject.length = this.length;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of value block class\n//**************************************************************************************\nexport class ValueBlock extends LocalBaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"ValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"valueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols,JSUnusedLocalSymbols\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//#region Throw an exception for a function which needs to be specified in extended classes\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"ValueBlock\\\"\");\n\t\t//#endregion\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//#region Throw an exception for a function which needs to be specified in extended classes\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"ValueBlock\\\"\");\n\t\t//#endregion\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of basic ASN.1 block class\n//**************************************************************************************\nexport class BaseBlock extends LocalBaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"BaseBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {Object} [primitiveSchema]\n\t * @property {string} [name]\n\t * @property {boolean} [optional]\n\t * @param valueBlockType Type of value block\n\t */\n\tconstructor(parameters = {}, valueBlockType = ValueBlock)\n\t{\n\t\tsuper(parameters);\n\n\t\tif(NAME in parameters)\n\t\t\tthis.name = parameters.name;\n\t\tif(OPTIONAL in parameters)\n\t\t\tthis.optional = parameters.optional;\n\t\tif(PRIMITIVE_SCHEMA in parameters)\n\t\t\tthis.primitiveSchema = parameters.primitiveSchema;\n\n\t\tthis.idBlock = new LocalIdentificationBlock(parameters);\n\t\tthis.lenBlock = new LocalLengthBlock(parameters);\n\t\tthis.valueBlock = new valueBlockType(parameters);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BaseBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false, writer)\n\t{\n\t\tconst _writer = writer || new ViewWriter();\n\n\t\tif(!writer)\n\t\t{\n\t\t\tprepareIndefiniteForm(this);\n\t\t}\n\n\t\tconst idBlockBuf = this.idBlock.toBER(sizeOnly);\n\n\t\t_writer.write(idBlockBuf);\n\n\t\tif(this.lenBlock.isIndefiniteForm)\n\t\t{\n\t\t\t_writer.write(new Uint8Array([0x80]).buffer);\n\n\t\t\tthis.valueBlock.toBER(sizeOnly, _writer);\n\n\t\t\t_writer.write(new ArrayBuffer(2));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst valueBlockSizeBuf = this.valueBlock.toBER(true);\n\t\t\tthis.lenBlock.length = valueBlockSizeBuf.byteLength;\n\t\t\tconst lenBlockBuf = this.lenBlock.toBER(sizeOnly);\n\n\t\t\t_writer.write(lenBlockBuf);\n\n\t\t\tconst valueBlockBuf = sizeOnly\n\t\t\t\t? new ArrayBuffer(this.lenBlock.length)\n\t\t\t\t: this.valueBlock.toBER(sizeOnly);\n\n\t\t\t_writer.write(valueBlockBuf, _writer);\n\t\t}\n\n\t\tif(!writer)\n\t\t{\n\t\t\treturn _writer.final();\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.idBlock = this.idBlock.toJSON();\n\t\tobject.lenBlock = this.lenBlock.toJSON();\n\t\tobject.valueBlock = this.valueBlock.toJSON();\n\n\t\tif(NAME in this)\n\t\t\tobject.name = this.name;\n\t\tif(OPTIONAL in this)\n\t\t\tobject.optional = this.optional;\n\t\tif(PRIMITIVE_SCHEMA in this)\n\t\t\tobject.primitiveSchema = this.primitiveSchema.toJSON();\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n\ttoString()\n\t{\n\t\treturn `${this.constructor.blockName()} : ${bufferToHexCodes(this.valueBlock.valueHex)}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of basic block for all PRIMITIVE types\n//**************************************************************************************\nclass LocalPrimitiveValueBlock extends ValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalPrimitiveValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueBeforeDecode]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\t//#region Variables from \"hexBlock\" class\n\t\tif(VALUE_HEX in parameters)\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\n\t\telse\n\t\t\tthis.valueHex = EMPTY_BUFFER;\n\n\t\tthis.isHexOnly = getParametersValue(parameters, IS_HEX_ONLY, true);\n\t\t//#endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//#region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//#endregion\n\n\t\t//#region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//#endregion\n\n\t\t//#region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.warnings.push(\"Zero buffer length\");\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Copy input buffer into internal buffer\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\n\t\tconst valueHexView = new Uint8Array(this.valueHex);\n\n\t\tfor(let i = 0; i < intBuffer.length; i++)\n\t\t\tvalueHexView[i] = intBuffer[i];\n\t\t//#endregion\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\treturn this.valueHex.slice(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"PrimitiveValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\t\tobject.isHexOnly = this.isHexOnly;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Primitive extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Primitive\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalPrimitiveValueBlock);\n\n\t\tthis.idBlock.isConstructed = false;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"PRIMITIVE\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of basic block for all CONSTRUCTED types\n//**************************************************************************************\nclass LocalConstructedValueBlock extends ValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalConstructedValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.value = getParametersValue(parameters, VALUE, []);\n\t\tthis.isIndefiniteForm = getParametersValue(parameters, IS_INDEFINITE_FORM, false);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//#region Store initial offset and length\n\t\tconst initialOffset = inputOffset;\n\t\tconst initialLength = inputLength;\n\t\t//#endregion\n\n\t\t//#region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//#endregion\n\n\t\t//#region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//#endregion\n\n\t\t//#region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.warnings.push(\"Zero buffer length\");\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Aux function\n\t\tfunction checkLen(indefiniteLength, length)\n\t\t{\n\t\t\tif(indefiniteLength === true)\n\t\t\t\treturn 1;\n\n\t\t\treturn length;\n\t\t}\n\t\t//#endregion\n\n\t\tlet currentOffset = inputOffset;\n\n\t\twhile(checkLen(this.isIndefiniteForm, inputLength) > 0)\n\t\t{\n\t\t\tconst returnObject = LocalFromBER(inputBuffer, currentOffset, inputLength);\n\t\t\tif(returnObject.offset === (-1))\n\t\t\t{\n\t\t\t\tthis.error = returnObject.result.error;\n\t\t\t\tthis.warnings.concat(returnObject.result.warnings);\n\t\t\t\treturn (-1);\n\t\t\t}\n\n\t\t\tcurrentOffset = returnObject.offset;\n\n\t\t\tthis.blockLength += returnObject.result.blockLength;\n\t\t\tinputLength -= returnObject.result.blockLength;\n\n\t\t\tthis.value.push(returnObject.result);\n\n\t\t\tif((this.isIndefiniteForm === true) && (returnObject.result.constructor.blockName() === EndOfContent.blockName()))\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif(this.isIndefiniteForm === true)\n\t\t{\n\t\t\tif(this.value[this.value.length - 1].constructor.blockName() === EndOfContent.blockName())\n\t\t\t\tthis.value.pop();\n\t\t\telse\n\t\t\t\tthis.warnings.push(\"No EndOfContent block encoded\");\n\t\t}\n\n\t\t//#region Copy \"inputBuffer\" to VALUE_BEFORE_DECODE\n\t\tthis.valueBeforeDecode = inputBuffer.slice(initialOffset, initialOffset + initialLength);\n\t\t//#endregion\n\n\t\treturn currentOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false, writer)\n\t{\n\t\tconst _writer = writer || new ViewWriter();\n\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tthis.value[i].toBER(sizeOnly, _writer);\n\t\t}\n\n\t\tif(!writer)\n\t\t{\n\t\t\treturn _writer.final();\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"ConstructedValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\n\t\tobject.value = [];\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\tobject.value.push(this.value[i].toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Constructed extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Constructed\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalConstructedValueBlock);\n\n\t\tthis.idBlock.isConstructed = true;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"CONSTRUCTED\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\ttoString()\n\t{\n\t\tconst values = [];\n\t\tfor(const value of this.valueBlock.value)\n\t\t{\n\t\t\tvalues.push(value.toString().split(\"\\n\").map(o => `  ${o}`).join(\"\\n\"));\n\t\t}\n\t\tconst blockName = this.idBlock.tagClass === 3\n\t\t\t? `[${this.idBlock.tagNumber}]`\n\t\t\t: this.constructor.blockName();\n\t\treturn values.length\n\t\t\t? `${blockName} :\\n${values.join(\"\\n\")}` // items\n\t\t\t: `${blockName} :`; // empty\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of ASN.1 EndOfContent type class\n//**************************************************************************************\nclass LocalEndOfContentValueBlock extends ValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalEndOfContentValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//#region There is no \"value block\" for EndOfContent type and we need to return the same offset\n\t\treturn inputOffset;\n\t\t//#endregion\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\treturn EMPTY_BUFFER;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"EndOfContentValueBlock\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class EndOfContent extends BaseBlock\n{\n\t//**********************************************************************************\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalEndOfContentValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 0; // EndOfContent\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"EndOfContent\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of ASN.1 Boolean type class\n//**************************************************************************************\nclass LocalBooleanValueBlock extends ValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBooleanValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.value = getParametersValue(parameters, VALUE, false);\n\t\tthis.isHexOnly = getParametersValue(parameters, IS_HEX_ONLY, false);\n\n\t\tif(VALUE_HEX in parameters)\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\n\t\telse\n\t\t{\n\t\t\tthis.valueHex = new ArrayBuffer(1);\n\t\t\tif(this.value === true)\n\t\t\t{\n\t\t\t\tconst view = new Uint8Array(this.valueHex);\n\t\t\t\tview[0] = 0xFF;\n\t\t\t}\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//#region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//#endregion\n\n\t\t//#region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//#endregion\n\n\t\tif(inputLength > 1)\n\t\t\tthis.warnings.push(\"Boolean value encoded in more then 1 octet\");\n\n\t\tthis.isHexOnly = true;\n\n\t\t//#region Copy input buffer to internal array\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\n\t\tconst view = new Uint8Array(this.valueHex);\n\n\t\tfor(let i = 0; i < intBuffer.length; i++)\n\t\t\tview[i] = intBuffer[i];\n\t\t//#endregion\n\n\t\tif(utilDecodeTC.call(this) !== 0)\n\t\t\tthis.value = true;\n\t\telse\n\t\t\tthis.value = false;\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\treturn this.valueHex;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BooleanValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.value = this.value;\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Boolean extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Boolean\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalBooleanValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 1; // Boolean\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BOOLEAN\";\n\t}\n\t//**********************************************************************************\n\ttoString()\n\t{\n\t\treturn `${this.constructor.blockName()} : ${this.valueBlock.value}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of ASN.1 Sequence and Set type classes\n//**************************************************************************************\nexport class Sequence extends Constructed\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Sequence\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 16; // Sequence\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"SEQUENCE\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Set extends Constructed\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Set\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 17; // Set\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"SET\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of ASN.1 Null type class\n//**************************************************************************************\nexport class Null extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Null\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalBaseBlock); // We will not have a call to \"Null value block\" because of specified FROM_BER and TO_BER functions\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 5; // Null\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"NULL\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tif(this.lenBlock.length > 0)\n\t\t\tthis.warnings.push(\"Non-zero length of value block for Null type\");\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tthis.blockLength += inputLength;\n\n\t\tif((inputOffset + inputLength) > inputBuffer.byteLength)\n\t\t{\n\t\t\tthis.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false, writer)\n\t{\n\t\tconst retBuf = new ArrayBuffer(2);\n\n\t\tif(!sizeOnly)\n\t\t{\n\t\t\tconst retView = new Uint8Array(retBuf);\n\t\t\tretView[0] = 0x05;\n\t\t\tretView[1] = 0x00;\n\t\t}\n\n\t\tif(writer)\n\t\t{\n\t\t\twriter.write(retBuf);\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\ttoString()\n\t{\n\t\treturn `${this.constructor.blockName()}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of ASN.1 OctetString type class\n//**************************************************************************************\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalOctetStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.isConstructed = getParametersValue(parameters, IS_CONSTRUCTED, false);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tlet resultOffset = 0;\n\n\t\tif(this.isConstructed === true)\n\t\t{\n\t\t\tthis.isHexOnly = false;\n\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n\t\t\tif(resultOffset === (-1))\n\t\t\t\treturn resultOffset;\n\n\t\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\t{\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\n\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\n\t\t\t\t{\n\t\t\t\t\tif(this.isIndefiniteForm === true)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\n\t\t\t\t\t\treturn (-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(currentBlockName !== OctetString.blockName())\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"OCTET STRING may consists of OCTET STRINGs only\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.isHexOnly = true;\n\n\t\t\tresultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n\t\t\tthis.blockLength = inputLength;\n\t\t}\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false, writer)\n\t{\n\t\tif(this.isConstructed === true)\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\n\n\t\tlet retBuf = new ArrayBuffer(this.valueHex.byteLength);\n\n\t\tif(sizeOnly === true)\n\t\t\treturn retBuf;\n\n\t\tif(this.valueHex.byteLength === 0)\n\t\t\treturn retBuf;\n\n\t\tretBuf = this.valueHex.slice(0);\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"OctetStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.isConstructed = this.isConstructed;\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class OctetString extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"OctetString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalOctetStringValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 4; // OctetString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n\n\t\t//#region Ability to encode empty OCTET STRING\n\t\tif(inputLength === 0)\n\t\t{\n\t\t\tif(this.idBlock.error.length === 0)\n\t\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\t\tif(this.lenBlock.error.length === 0)\n\t\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//#endregion\n\n\t\tif(!this.valueBlock.isConstructed)\n\t\t{\n\t\t\tconst buf = inputBuffer.slice(inputOffset, inputOffset + inputLength);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tconst asn = fromBER(buf);\n\t\t\t\tif(asn.offset !== -1 && asn.offset === inputLength)\n\t\t\t\t{\n\t\t\t\t\tthis.valueBlock.value = [asn.result];\n\t\t\t\t}\n\t\t\t} catch(e)\n\t\t\t{\n\t\t\t\t// nothing\n\t\t\t}\n\t\t}\n\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"OCTET STRING\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Checking that two OCTETSTRINGs are equal\n\t * @param {OctetString} octetString\n\t */\n\tisEqual(octetString)\n\t{\n\t\t//#region Check input type\n\t\tif((octetString instanceof OctetString) === false)\n\t\t\treturn false;\n\t\t//#endregion\n\n\t\t//#region Compare two JSON strings\n\t\tif(JSON.stringify(this) !== JSON.stringify(octetString))\n\t\t\treturn false;\n\t\t//#endregion\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n\ttoString()\n\t{\n\t\tif(this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length))\n\t\t{\n\t\t\treturn Constructed.prototype.toString.call(this);\n\t\t} else\n\t\t{\n\t\t\treturn `${this.constructor.blockName()} : ${bufferToHexCodes(this.valueBlock.valueHex)}`;\n\t\t}\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of ASN.1 BitString type class\n//**************************************************************************************\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBitStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.unusedBits = getParametersValue(parameters, UNUSED_BITS, 0);\n\t\tthis.isConstructed = getParametersValue(parameters, IS_CONSTRUCTED, false);\n\t\tthis.blockLength = this.valueHex.byteLength;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//#region Ability to decode zero-length BitString value\n\t\tif(inputLength === 0)\n\t\t\treturn inputOffset;\n\t\t//#endregion\n\n\t\tlet resultOffset = (-1);\n\n\t\t//#region If the BISTRING supposed to be a constructed value\n\t\tif(this.isConstructed === true)\n\t\t{\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n\t\t\tif(resultOffset === (-1))\n\t\t\t\treturn resultOffset;\n\n\t\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\t{\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\n\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\n\t\t\t\t{\n\t\t\t\t\tif(this.isIndefiniteForm === true)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\n\t\t\t\t\t\treturn (-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(currentBlockName !== BitString.blockName())\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"BIT STRING may consists of BIT STRINGs only\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\n\t\t\t\tif((this.unusedBits > 0) && (this.value[i].valueBlock.unusedBits > 0))\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"Using of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\n\t\t\t\tthis.unusedBits = this.value[i].valueBlock.unusedBits;\n\t\t\t\tif(this.unusedBits > 7)\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn resultOffset;\n\t\t}\n\t\t//#endregion\n\t\t//#region If the BitString supposed to be a primitive value\n\t\t//#region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//#endregion\n\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\n\t\tthis.unusedBits = intBuffer[0];\n\n\t\tif(this.unusedBits > 7)\n\t\t{\n\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif(!this.unusedBits)\n\t\t{\n\t\t\tconst buf = inputBuffer.slice(inputOffset + 1, inputOffset + inputLength);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tconst asn = fromBER(buf);\n\t\t\t\tif(asn.offset !== -1 && asn.offset === (inputLength - 1))\n\t\t\t\t{\n\t\t\t\t\tthis.value = [asn.result];\n\t\t\t\t}\n\t\t\t} catch(e)\n\t\t\t{\n\t\t\t\t// nothing\n\t\t\t}\n\t\t}\n\n\t\t//#region Copy input buffer to internal buffer\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length - 1);\n\t\tconst view = new Uint8Array(this.valueHex);\n\t\tfor(let i = 0; i < (inputLength - 1); i++)\n\t\t\tview[i] = intBuffer[i + 1];\n\t\t//#endregion\n\n\t\tthis.blockLength = intBuffer.length;\n\n\t\treturn (inputOffset + inputLength);\n\t\t//#endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false, writer)\n\t{\n\t\tif(this.isConstructed === true)\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\n\n\t\tif(sizeOnly === true)\n\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength + 1));\n\n\t\tif(this.valueHex.byteLength === 0)\n\t\t\treturn (EMPTY_BUFFER);\n\n\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\tconst retBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\n\t\tconst retView = new Uint8Array(retBuf);\n\n\t\tretView[0] = this.unusedBits;\n\n\t\tfor(let i = 0; i < this.valueHex.byteLength; i++)\n\t\t\tretView[i + 1] = curView[i];\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BitStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.unusedBits = this.unusedBits;\n\t\tobject.isConstructed = this.isConstructed;\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class BitString extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"BitString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalBitStringValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 3; // BitString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BIT STRING\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//#region Ability to encode empty BitString\n\t\tif(inputLength === 0)\n\t\t\treturn inputOffset;\n\t\t//#endregion\n\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Checking that two BITSTRINGs are equal\n\t * @param {BitString} bitString\n\t */\n\tisEqual(bitString)\n\t{\n\t\t//#region Check input type\n\t\tif((bitString instanceof BitString) === false)\n\t\t\treturn false;\n\t\t//#endregion\n\n\t\t//#region Compare two JSON strings\n\t\tif(JSON.stringify(this) !== JSON.stringify(bitString))\n\t\t\treturn false;\n\t\t//#endregion\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n\ttoString()\n\t{\n\t\tif(this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length))\n\t\t{\n\t\t\treturn Constructed.prototype.toString.call(this);\n\t\t} else\n\t\t{\n\t\t\t// convert bytes to bits\n\t\t\tconst bits = [];\n\t\t\tconst valueHex = new Uint8Array(this.valueBlock.valueHex);\n\t\t\tfor(const byte of valueHex)\n\t\t\t{\n\t\t\t\tbits.push(byte.toString(2).padStart(8, \"0\"));\n\t\t\t}\n\t\t\treturn `${this.constructor.blockName()} : ${bits.join(\"\")}`;\n\t\t}\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of ASN.1 Integer type class\n//**************************************************************************************\n/**\n * @extends ValueBlock\n */\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalIntegerValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tif(VALUE in parameters)\n\t\t\tthis.valueDec = parameters.value;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Setter for VALUE_HEX\n\t * @param {ArrayBuffer} _value\n\t */\n\tset valueHex(_value)\n\t{\n\t\tthis._valueHex = _value.slice(0);\n\n\t\tif(_value.byteLength >= 4)\n\t\t{\n\t\t\tthis.warnings.push(\"Too big Integer for decoding, hex only\");\n\t\t\tthis.isHexOnly = true;\n\t\t\tthis._valueDec = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.isHexOnly = false;\n\n\t\t\tif(_value.byteLength > 0)\n\t\t\t\tthis._valueDec = utilDecodeTC.call(this);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Getter for VALUE_HEX\n\t * @returns {ArrayBuffer}\n\t */\n\tget valueHex()\n\t{\n\t\treturn this._valueHex;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Getter for VALUE_DEC\n\t * @param {number} _value\n\t */\n\tset valueDec(_value)\n\t{\n\t\tthis._valueDec = _value;\n\n\t\tthis.isHexOnly = false;\n\t\tthis._valueHex = utilEncodeTC(_value);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Getter for VALUE_DEC\n\t * @returns {number}\n\t */\n\tget valueDec()\n\t{\n\t\treturn this._valueDec;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from DER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 DER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 DER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @param {number} [expectedLength=0] Expected length of converted VALUE_HEX buffer\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0)\n\t{\n\t\tconst offset = this.fromBER(inputBuffer, inputOffset, inputLength);\n\t\tif(offset === (-1))\n\t\t\treturn offset;\n\n\t\tconst view = new Uint8Array(this._valueHex);\n\n\t\tif((view[0] === 0x00) && ((view[1] & 0x80) !== 0))\n\t\t{\n\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\n\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\n\n\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(expectedLength !== 0)\n\t\t\t{\n\t\t\t\tif(this._valueHex.byteLength < expectedLength)\n\t\t\t\t{\n\t\t\t\t\tif((expectedLength - this._valueHex.byteLength) > 1)\n\t\t\t\t\t\texpectedLength = this._valueHex.byteLength + 1;\n\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(expectedLength);\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\t\t\tupdatedView.set(view, expectedLength - this._valueHex.byteLength);\n\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn offset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (DER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoDER(sizeOnly = false)\n\t{\n\t\tconst view = new Uint8Array(this._valueHex);\n\n\t\tswitch(true)\n\t\t{\n\t\t\tcase ((view[0] & 0x80) !== 0):\n\t\t\t\t{\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength + 1);\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\t\t\tupdatedView[0] = 0x00;\n\t\t\t\t\tupdatedView.set(view, 1);\n\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\n\t\t\t\t{\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\n\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\treturn this.toBER(sizeOnly);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n\t\tif(resultOffset === (-1))\n\t\t\treturn resultOffset;\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//noinspection JSCheckFunctionSignatures\n\t\treturn this.valueHex.slice(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"IntegerValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.valueDec = this.valueDec;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current value to decimal string representation\n\t */\n\ttoString()\n\t{\n\t\t//#region Aux functions\n\t\tfunction viewAdd(first, second)\n\t\t{\n\t\t\t//#region Initial variables\n\t\t\tconst c = new Uint8Array([0]);\n\n\t\t\tlet firstView = new Uint8Array(first);\n\t\t\tlet secondView = new Uint8Array(second);\n\n\t\t\tlet firstViewCopy = firstView.slice(0);\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\n\t\t\tlet secondViewCopy = secondView.slice(0);\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\n\n\t\t\tlet value = 0;\n\n\t\t\tconst max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\n\n\t\t\tlet counter = 0;\n\t\t\t//#endregion\n\n\t\t\tfor(let i = max; i >= 0; i--, counter++)\n\t\t\t{\n\t\t\t\tswitch(true)\n\t\t\t\t{\n\t\t\t\t\tcase (counter < secondViewCopy.length):\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + c[0];\n\t\t\t\t}\n\n\t\t\t\tc[0] = value / 10;\n\n\t\t\t\tswitch(true)\n\t\t\t\t{\n\t\t\t\t\tcase (counter >= firstViewCopy.length):\n\t\t\t\t\t\tfirstViewCopy = utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value % 10;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(c[0] > 0)\n\t\t\t\tfirstViewCopy = utilConcatView(c, firstViewCopy);\n\n\t\t\treturn firstViewCopy.slice(0);\n\t\t}\n\n\t\tfunction power2(n)\n\t\t{\n\t\t\tif(n >= powers2.length)\n\t\t\t{\n\t\t\t\tfor(let p = powers2.length; p <= n; p++)\n\t\t\t\t{\n\t\t\t\t\tconst c = new Uint8Array([0]);\n\t\t\t\t\tlet digits = (powers2[p - 1]).slice(0);\n\n\t\t\t\t\tfor(let i = (digits.length - 1); i >= 0; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\n\t\t\t\t\t\tc[0] = newValue[0] / 10;\n\t\t\t\t\t\tdigits[i] = newValue[0] % 10;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(c[0] > 0)\n\t\t\t\t\t\tdigits = utilConcatView(c, digits);\n\n\t\t\t\t\tpowers2.push(digits);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn powers2[n];\n\t\t}\n\n\t\tfunction viewSub(first, second)\n\t\t{\n\t\t\t//#region Initial variables\n\t\t\tlet b = 0;\n\n\t\t\tlet firstView = new Uint8Array(first);\n\t\t\tlet secondView = new Uint8Array(second);\n\n\t\t\tlet firstViewCopy = firstView.slice(0);\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\n\t\t\tlet secondViewCopy = secondView.slice(0);\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\n\n\t\t\tlet value;\n\n\t\t\tlet counter = 0;\n\t\t\t//#endregion\n\n\t\t\tfor(let i = secondViewCopyLength; i >= 0; i--, counter++)\n\t\t\t{\n\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\n\n\t\t\t\tswitch(true)\n\t\t\t\t{\n\t\t\t\t\tcase (value < 0):\n\t\t\t\t\t\tb = 1;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(b > 0)\n\t\t\t{\n\t\t\t\tfor(let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++)\n\t\t\t\t{\n\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - b;\n\n\t\t\t\t\tif(value < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tb = 1;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn firstViewCopy.slice();\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Initial variables\n\t\tconst firstBit = (this._valueHex.byteLength * 8) - 1;\n\n\t\tlet digits = new Uint8Array((this._valueHex.byteLength * 8) / 3);\n\t\tlet bitNumber = 0;\n\t\tlet currentByte;\n\n\t\tconst asn1View = new Uint8Array(this._valueHex);\n\n\t\tlet result = \"\";\n\n\t\tlet flag = false;\n\t\t//#endregion\n\n\t\t//#region Calculate number\n\t\tfor(let byteNumber = (this._valueHex.byteLength - 1); byteNumber >= 0; byteNumber--)\n\t\t{\n\t\t\tcurrentByte = asn1View[byteNumber];\n\n\t\t\tfor(let i = 0; i < 8; i++)\n\t\t\t{\n\t\t\t\tif((currentByte & 1) === 1)\n\t\t\t\t{\n\t\t\t\t\tswitch(bitNumber)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase firstBit:\n\t\t\t\t\t\t\tdigits = viewSub(power2(bitNumber), digits);\n\t\t\t\t\t\t\tresult = \"-\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdigits = viewAdd(digits, power2(bitNumber));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbitNumber++;\n\t\t\t\tcurrentByte >>= 1;\n\t\t\t}\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Print number\n\t\tfor(let i = 0; i < digits.length; i++)\n\t\t{\n\t\t\tif(digits[i])\n\t\t\t\tflag = true;\n\n\t\t\tif(flag)\n\t\t\t\tresult += digitsString.charAt(digits[i]);\n\t\t}\n\n\t\tif(flag === false)\n\t\t\tresult += digitsString.charAt(0);\n\t\t//#endregion\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Integer extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Integer\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalIntegerValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 2; // Integer\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"INTEGER\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Compare two Integer object, or Integer and ArrayBuffer objects\n\t * @param {!Integer|ArrayBuffer} otherValue\n\t * @returns {boolean}\n\t */\n\tisEqual(otherValue)\n\t{\n\t\tif(otherValue instanceof Integer)\n\t\t{\n\t\t\tif(this.valueBlock.isHexOnly && otherValue.valueBlock.isHexOnly) // Compare two ArrayBuffers\n\t\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue.valueBlock.valueHex);\n\n\t\t\tif(this.valueBlock.isHexOnly === otherValue.valueBlock.isHexOnly)\n\t\t\t\treturn (this.valueBlock.valueDec === otherValue.valueBlock.valueDec);\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif(otherValue instanceof ArrayBuffer)\n\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue);\n\n\t\treturn false;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current Integer value from BER into DER format\n\t * @returns {Integer}\n\t */\n\tconvertToDER()\n\t{\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\n\t\tinteger.valueBlock.toDER();\n\n\t\treturn integer;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current Integer value from DER to BER format\n\t * @returns {Integer}\n\t */\n\tconvertFromDER()\n\t{\n\t\tconst expectedLength = (this.valueBlock.valueHex.byteLength % 2) ? (this.valueBlock.valueHex.byteLength + 1) : this.valueBlock.valueHex.byteLength;\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\n\t\tinteger.valueBlock.fromDER(integer.valueBlock.valueHex, 0, integer.valueBlock.valueHex.byteLength, expectedLength);\n\n\t\treturn integer;\n\t}\n\t//**********************************************************************************\n\ttoString()\n\t{\n\t\tassertBigInt();\n\t\tconst hex = bufferToHexCodes(this.valueBlock.valueHex);\n\t\tconst bigInt = BigInt(`0x${hex}`);\n\t\treturn `${this.constructor.blockName()} : ${bigInt.toString()}`;\n\t}\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of ASN.1 Enumerated type class\n//**************************************************************************************\nexport class Enumerated extends Integer\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Enumerated\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 10; // Enumerated\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"ENUMERATED\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of ASN.1 ObjectIdentifier type class\n//**************************************************************************************\nclass LocalSidValueBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalSidValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {number} [valueDec]\n\t * @property {boolean} [isFirstSid]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.valueDec = getParametersValue(parameters, VALUE_DEC, -1);\n\t\tthis.isFirstSid = getParametersValue(parameters, IS_FIRST_SID, false);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"sidBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tif(inputLength === 0)\n\t\t\treturn inputOffset;\n\n\t\t//#region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//#endregion\n\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\n\t\tthis.valueHex = new ArrayBuffer(inputLength);\n\t\tlet view = new Uint8Array(this.valueHex);\n\n\t\tfor(let i = 0; i < inputLength; i++)\n\t\t{\n\t\t\tview[i] = intBuffer[i] & 0x7F;\n\n\t\t\tthis.blockLength++;\n\n\t\t\tif((intBuffer[i] & 0x80) === 0x00)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//#region Adjust size of valueHex buffer\n\t\tconst tempValueHex = new ArrayBuffer(this.blockLength);\n\t\tconst tempView = new Uint8Array(tempValueHex);\n\n\t\tfor(let i = 0; i < this.blockLength; i++)\n\t\t\ttempView[i] = view[i];\n\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tthis.valueHex = tempValueHex.slice(0);\n\t\tview = new Uint8Array(this.valueHex);\n\t\t//#endregion\n\n\t\tif((intBuffer[this.blockLength - 1] & 0x80) !== 0x00)\n\t\t{\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif(view[0] === 0x00)\n\t\t\tthis.warnings.push(\"Needlessly long format of SID encoding\");\n\n\t\tif(this.blockLength <= 8)\n\t\t\tthis.valueDec = utilFromBase(view, 7);\n\t\telse\n\t\t{\n\t\t\tthis.isHexOnly = true;\n\t\t\tthis.warnings.push(\"Too big SID for decoding, hex only\");\n\t\t}\n\n\t\treturn (inputOffset + this.blockLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Save a BigInt value immediately as an array of octects.\n\t */\n\tset valueBigInt(value)\n\t{\n\n\t\tassertBigInt();\n\n\t\tlet bits = BigInt(value).toString(2);\n\t\twhile(bits.length % 7)\n\t\t{\n\t\t\tbits = \"0\" + bits;\n\t\t}\n\t\tconst bytes = new Uint8Array(bits.length / 7);\n\t\tfor(let i = 0; i < bytes.length; i++)\n\t\t{\n\t\t\tbytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);\n\t\t}\n\t\tthis.fromBER(bytes.buffer, 0, bytes.length);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//#region Initial variables\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//#endregion\n\n\t\tif(this.isHexOnly)\n\t\t{\n\t\t\tif(sizeOnly === true)\n\t\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength));\n\n\t\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\t\tretBuf = new ArrayBuffer(this.blockLength);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tfor(let i = 0; i < (this.blockLength - 1); i++)\n\t\t\t\tretView[i] = curView[i] | 0x80;\n\n\t\t\tretView[this.blockLength - 1] = curView[this.blockLength - 1];\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tconst encodedBuf = utilToBase(this.valueDec, 7);\n\t\tif(encodedBuf.byteLength === 0)\n\t\t{\n\t\t\tthis.error = \"Error during encoding SID value\";\n\t\t\treturn (EMPTY_BUFFER);\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength);\n\n\t\tif(sizeOnly === false)\n\t\t{\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tfor(let i = 0; i < (encodedBuf.byteLength - 1); i++)\n\t\t\t\tretView[i] = encodedView[i] | 0x80;\n\n\t\t\tretView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Create string representation of current SID block\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tlet result = \"\";\n\n\t\tif(this.isHexOnly === true)\n\t\t\tresult = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\t\telse\n\t\t{\n\t\t\tif(this.isFirstSid)\n\t\t\t{\n\t\t\t\tlet sidValue = this.valueDec;\n\n\t\t\t\tif(this.valueDec <= 39)\n\t\t\t\t\tresult = \"0.\";\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(this.valueDec <= 79)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = \"1.\";\n\t\t\t\t\t\tsidValue -= 40;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = \"2.\";\n\t\t\t\t\t\tsidValue -= 80;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresult += sidValue.toString();\n\t\t\t}\n\t\t\telse\n\t\t\t\tresult = this.valueDec.toString();\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.valueDec = this.valueDec;\n\t\tobject.isFirstSid = this.isFirstSid;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass LocalObjectIdentifierValueBlock extends ValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalObjectIdentifierValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.fromString(getParametersValue(parameters, VALUE, EMPTY_STRING));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tlet resultOffset = inputOffset;\n\n\t\twhile(inputLength > 0)\n\t\t{\n\t\t\tconst sidBlock = new LocalSidValueBlock();\n\t\t\tresultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n\t\t\tif(resultOffset === (-1))\n\t\t\t{\n\t\t\t\tthis.blockLength = 0;\n\t\t\t\tthis.error = sidBlock.error;\n\t\t\t\treturn resultOffset;\n\t\t\t}\n\n\t\t\tif(this.value.length === 0)\n\t\t\t\tsidBlock.isFirstSid = true;\n\n\t\t\tthis.blockLength += sidBlock.blockLength;\n\t\t\tinputLength -= sidBlock.blockLength;\n\n\t\t\tthis.value.push(sidBlock);\n\t\t}\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tconst retBufs = [];\n\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\n\t\t\tif(valueBuf.byteLength === 0)\n\t\t\t{\n\t\t\t\tthis.error = this.value[i].error;\n\t\t\t\treturn (EMPTY_BUFFER);\n\t\t\t}\n\n\t\t\tretBufs.push(valueBuf);\n\t\t}\n\n\t\treturn concat(retBufs);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Create \"LocalObjectIdentifierValueBlock\" class from string\n\t * @param {string} string Input string to convert from\n\t * @returns {boolean}\n\t */\n\tfromString(string)\n\t{\n\t\tthis.value = []; // Clear existing SID values\n\n\t\tlet pos1 = 0;\n\t\tlet pos2 = 0;\n\n\t\tlet sid = \"\";\n\n\t\tlet flag = false;\n\n\t\tdo\n\t\t{\n\t\t\tpos2 = string.indexOf(\".\", pos1);\n\t\t\tif(pos2 === (-1))\n\t\t\t\tsid = string.substr(pos1);\n\t\t\telse\n\t\t\t\tsid = string.substr(pos1, pos2 - pos1);\n\n\t\t\tpos1 = pos2 + 1;\n\n\t\t\tif(flag)\n\t\t\t{\n\t\t\t\tconst sidBlock = this.value[0];\n\n\t\t\t\tlet plus = 0;\n\n\t\t\t\tswitch(sidBlock.valueDec)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tplus = 40;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tplus = 80;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.value = []; // clear SID array\n\t\t\t\t\t\treturn false; // ???\n\t\t\t\t}\n\n\t\t\t\tconst parsedSID = parseInt(sid, 10);\n\t\t\t\tif(isNaN(parsedSID))\n\t\t\t\t\treturn true;\n\n\t\t\t\tsidBlock.valueDec = parsedSID + plus;\n\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconst sidBlock = new LocalSidValueBlock();\n\t\t\t\tif(sid > Number.MAX_SAFE_INTEGER)\n\t\t\t\t{\n\t\t\t\t\tassertBigInt();\n\t\t\t\t\tconst sidValue = BigInt(sid);\n\t\t\t\t\tsidBlock.valueBigInt = sidValue;\n\t\t\t\t} else\n\t\t\t\t{\n\t\t\t\t\tsidBlock.valueDec = parseInt(sid, 10);\n\t\t\t\t\tif(isNaN(sidBlock.valueDec)) return true;\n\t\t\t\t}\n\n\t\t\t\tif(this.value.length === 0)\n\t\t\t\t{\n\t\t\t\t\tsidBlock.isFirstSid = true;\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\n\t\t\t\tthis.value.push(sidBlock);\n\t\t\t}\n\t\t} while(pos2 !== (-1));\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Converts \"LocalObjectIdentifierValueBlock\" class to string\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tlet result = \"\";\n\t\tlet isHexOnly = false;\n\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tisHexOnly = this.value[i].isHexOnly;\n\n\t\t\tlet sidStr = this.value[i].toString();\n\n\t\t\tif(i !== 0)\n\t\t\t\tresult = `${result}.`;\n\n\t\t\tif(isHexOnly)\n\t\t\t{\n\t\t\t\tsidStr = `{${sidStr}}`;\n\n\t\t\t\tif(this.value[i].isFirstSid)\n\t\t\t\t\tresult = `2.{${sidStr} - 80}`;\n\t\t\t\telse\n\t\t\t\t\tresult += sidStr;\n\t\t\t}\n\t\t\telse\n\t\t\t\tresult += sidStr;\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"ObjectIdentifierValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.value = this.toString();\n\t\tobject.sidArray = [];\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\tobject.sidArray.push(this.value[i].toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class ObjectIdentifier extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"ObjectIdentifier\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalObjectIdentifierValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 6; // OBJECT IDENTIFIER\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"OBJECT IDENTIFIER\";\n\t}\n\t//**********************************************************************************\n\ttoString()\n\t{\n\t\treturn `${this.constructor.blockName()} : ${this.valueBlock.toString()}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of all string's classes\n//**************************************************************************************\nclass LocalUtf8StringValueBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Constructor for \"LocalUtf8StringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.isHexOnly = true;\n\t\tthis.value = \"\"; // String representation of decoded ArrayBuffer\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Utf8StringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class Utf8String extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Utf8String\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalUtf8StringValueBlock);\n\n\t\tif(VALUE in parameters)\n\t\t\tthis.fromString(parameters.value);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 12; // Utf8String\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"UTF8String\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\n\n\t\ttry\n\t\t{\n\t\t\t//noinspection JSDeprecatedSymbols\n\t\t\tthis.valueBlock.value = decodeURIComponent(escape(this.valueBlock.value));\n\t\t}\n\t\tcatch(ex)\n\t\t{\n\t\t\tthis.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\t//noinspection JSDeprecatedSymbols\n\t\tconst str = unescape(encodeURIComponent(inputString));\n\t\tconst strLen = str.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor(let i = 0; i < strLen; i++)\n\t\t\tview[i] = str.charCodeAt(i);\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n\ttoString()\n\t{\n\t\treturn `${this.constructor.blockName()} : ${this.valueBlock.value}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#region Declaration of ASN.1 RelativeObjectIdentifier type class\n//**************************************************************************************\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalRelativeSidValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {number} [valueDec]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.valueDec = getParametersValue(parameters, VALUE_DEC, -1);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"relativeSidBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tif(inputLength === 0)\n\t\t\treturn inputOffset;\n\n\t\t//#region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//#endregion\n\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\n\t\tthis.valueHex = new ArrayBuffer(inputLength);\n\t\tlet view = new Uint8Array(this.valueHex);\n\n\t\tfor(let i = 0; i < inputLength; i++)\n\t\t{\n\t\t\tview[i] = intBuffer[i] & 0x7F;\n\n\t\t\tthis.blockLength++;\n\n\t\t\tif((intBuffer[i] & 0x80) === 0x00)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//#region Adjust size of valueHex buffer\n\t\tconst tempValueHex = new ArrayBuffer(this.blockLength);\n\t\tconst tempView = new Uint8Array(tempValueHex);\n\n\t\tfor(let i = 0; i < this.blockLength; i++)\n\t\t\ttempView[i] = view[i];\n\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tthis.valueHex = tempValueHex.slice(0);\n\t\tview = new Uint8Array(this.valueHex);\n\t\t//#endregion\n\n\t\tif((intBuffer[this.blockLength - 1] & 0x80) !== 0x00)\n\t\t{\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif(view[0] === 0x00)\n\t\t\tthis.warnings.push(\"Needlessly long format of SID encoding\");\n\n\t\tif(this.blockLength <= 8)\n\t\t\tthis.valueDec = utilFromBase(view, 7);\n\t\telse\n\t\t{\n\t\t\tthis.isHexOnly = true;\n\t\t\tthis.warnings.push(\"Too big SID for decoding, hex only\");\n\t\t}\n\n\t\treturn (inputOffset + this.blockLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//#region Initial variables\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//#endregion\n\n\t\tif(this.isHexOnly)\n\t\t{\n\t\t\tif(sizeOnly === true)\n\t\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength));\n\n\t\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\t\tretBuf = new ArrayBuffer(this.blockLength);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tfor(let i = 0; i < (this.blockLength - 1); i++)\n\t\t\t\tretView[i] = curView[i] | 0x80;\n\n\t\t\tretView[this.blockLength - 1] = curView[this.blockLength - 1];\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tconst encodedBuf = utilToBase(this.valueDec, 7);\n\t\tif(encodedBuf.byteLength === 0)\n\t\t{\n\t\t\tthis.error = \"Error during encoding SID value\";\n\t\t\treturn (EMPTY_BUFFER);\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength);\n\n\t\tif(sizeOnly === false)\n\t\t{\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tfor(let i = 0; i < (encodedBuf.byteLength - 1); i++)\n\t\t\t\tretView[i] = encodedView[i] | 0x80;\n\n\t\t\tretView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Create string representation of current SID block\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tlet result = \"\";\n\n\t\tif(this.isHexOnly === true)\n\t\t\tresult = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\t\telse\n\t\t{\n\t\t\tresult = this.valueDec.toString();\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t} catch(ex) { }\n\t\t//#endregion\n\n\t\tobject.valueDec = this.valueDec;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalRelativeObjectIdentifierValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.fromString(getParametersValue(parameters, VALUE, EMPTY_STRING));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tlet resultOffset = inputOffset;\n\n\t\twhile(inputLength > 0)\n\t\t{\n\t\t\tconst sidBlock = new LocalRelativeSidValueBlock();\n\t\t\tresultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n\t\t\tif(resultOffset === (-1))\n\t\t\t{\n\t\t\t\tthis.blockLength = 0;\n\t\t\t\tthis.error = sidBlock.error;\n\t\t\t\treturn resultOffset;\n\t\t\t}\n\n\t\t\tthis.blockLength += sidBlock.blockLength;\n\t\t\tinputLength -= sidBlock.blockLength;\n\n\t\t\tthis.value.push(sidBlock);\n\t\t}\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tlet retBufs = [];\n\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\n\t\t\tif(valueBuf.byteLength === 0)\n\t\t\t{\n\t\t\t\tthis.error = this.value[i].error;\n\t\t\t\treturn (EMPTY_BUFFER);\n\t\t\t}\n\n\t\t\tretBufs.push(valueBuf);\n\t\t}\n\n\t\treturn concat(retBufs);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Create \"LocalRelativeObjectIdentifierValueBlock\" class from string\n\t * @param {string} string Input string to convert from\n\t * @returns {boolean}\n\t */\n\tfromString(string)\n\t{\n\t\tthis.value = []; // Clear existing SID values\n\n\t\tlet pos1 = 0;\n\t\tlet pos2 = 0;\n\n\t\tlet sid = \"\";\n\n\t\tdo\n\t\t{\n\t\t\tpos2 = string.indexOf(\".\", pos1);\n\t\t\tif(pos2 === (-1))\n\t\t\t\tsid = string.substr(pos1);\n\t\t\telse\n\t\t\t\tsid = string.substr(pos1, pos2 - pos1);\n\n\t\t\tpos1 = pos2 + 1;\n\n\t\t\tconst sidBlock = new LocalRelativeSidValueBlock();\n\t\t\tsidBlock.valueDec = parseInt(sid, 10);\n\t\t\tif(isNaN(sidBlock.valueDec))\n\t\t\t\treturn true;\n\n\t\t\tthis.value.push(sidBlock);\n\n\t\t} while(pos2 !== (-1));\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Converts \"LocalRelativeObjectIdentifierValueBlock\" class to string\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tlet result = \"\";\n\t\tlet isHexOnly = false;\n\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tisHexOnly = this.value[i].isHexOnly;\n\n\t\t\tlet sidStr = this.value[i].toString();\n\n\t\t\tif(i !== 0)\n\t\t\t\tresult = `${result}.`;\n\n\t\t\tif(isHexOnly)\n\t\t\t{\n\t\t\t\tsidStr = `{${sidStr}}`;\n\t\t\t\tresult += sidStr;\n\t\t\t} else\n\t\t\t\tresult += sidStr;\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"RelativeObjectIdentifierValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t} catch(ex) { }\n\t\t//#endregion\n\n\t\tobject.value = this.toString();\n\t\tobject.sidArray = [];\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\tobject.sidArray.push(this.value[i].toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class RelativeObjectIdentifier extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"RelativeObjectIdentifier\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalRelativeObjectIdentifierValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 13; // RELATIVE OBJECT IDENTIFIER\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"RelativeObjectIdentifier\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n/**\n * @extends LocalBaseBlock\n * @extends HexBlock\n */\nclass LocalBmpStringValueBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBmpStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.isHexOnly = true;\n\t\tthis.value = \"\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BmpStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class BmpString extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"BmpString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalBmpStringValueBlock);\n\n\t\tif(VALUE in parameters)\n\t\t\tthis.fromString(parameters.value);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 30; // BmpString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BMPString\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tconst copyBuffer = inputBuffer.slice(0);\n\t\tconst valueView = new Uint8Array(copyBuffer);\n\n\t\tfor(let i = 0; i < valueView.length; i += 2)\n\t\t{\n\t\t\tconst temp = valueView[i];\n\n\t\t\tvalueView[i] = valueView[i + 1];\n\t\t\tvalueView[i + 1] = temp;\n\t\t}\n\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint16Array(copyBuffer));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\tconst strLength = inputString.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 2);\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor(let i = 0; i < strLength; i++)\n\t\t{\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\n\t\t\tconst codeView = new Uint8Array(codeBuf);\n\t\t\tif(codeView.length > 2)\n\t\t\t\tcontinue;\n\n\t\t\tconst dif = 2 - codeView.length;\n\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\n\t\t\t\tvalueHexView[i * 2 + j + dif] = codeView[j];\n\t\t}\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n\ttoString()\n\t{\n\t\treturn `${this.constructor.blockName()} : ${this.valueBlock.value}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass LocalUniversalStringValueBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalUniversalStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.isHexOnly = true;\n\t\tthis.value = \"\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"UniversalStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class UniversalString extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"UniversalString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalUniversalStringValueBlock);\n\n\t\tif(VALUE in parameters)\n\t\t\tthis.fromString(parameters.value);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 28; // UniversalString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"UniversalString\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tconst copyBuffer = inputBuffer.slice(0);\n\t\tconst valueView = new Uint8Array(copyBuffer);\n\n\t\tfor(let i = 0; i < valueView.length; i += 4)\n\t\t{\n\t\t\tvalueView[i] = valueView[i + 3];\n\t\t\tvalueView[i + 1] = valueView[i + 2];\n\t\t\tvalueView[i + 2] = 0x00;\n\t\t\tvalueView[i + 3] = 0x00;\n\t\t}\n\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\tconst strLength = inputString.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 4);\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor(let i = 0; i < strLength; i++)\n\t\t{\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\n\t\t\tconst codeView = new Uint8Array(codeBuf);\n\t\t\tif(codeView.length > 4)\n\t\t\t\tcontinue;\n\n\t\t\tconst dif = 4 - codeView.length;\n\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\n\t\t\t\tvalueHexView[i * 4 + j + dif] = codeView[j];\n\t\t}\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n\ttoString()\n\t{\n\t\treturn `${this.constructor.blockName()} : ${this.valueBlock.value}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass LocalSimpleStringValueBlock extends HexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalSimpleStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.value = \"\";\n\t\tthis.isHexOnly = true;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"SimpleStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nclass LocalSimpleStringBlock extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalSimpleStringBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalSimpleStringValueBlock);\n\n\t\tif(VALUE in parameters)\n\t\t\tthis.fromString(parameters.value);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"SIMPLESTRING\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\tconst strLen = inputString.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor(let i = 0; i < strLen; i++)\n\t\t\tview[i] = inputString.charCodeAt(i);\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n\ttoString()\n\t{\n\t\treturn `${this.constructor.blockName()} : ${this.valueBlock.value}`;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class NumericString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"NumericString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 18; // NumericString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"NumericString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class PrintableString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"PrintableString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 19; // PrintableString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"PrintableString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class TeletexString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"TeletexString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 20; // TeletexString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"TeletexString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class VideotexString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"VideotexString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 21; // VideotexString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"VideotexString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class IA5String extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"IA5String\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 22; // IA5String\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"IA5String\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class GraphicString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"GraphicString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 25; // GraphicString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"GraphicString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class VisibleString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"VisibleString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 26; // VisibleString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"VisibleString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class GeneralString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"GeneralString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 27; // GeneralString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"GeneralString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class CharacterString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"CharacterString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 29; // CharacterString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"CharacterString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of all date and time classes\n//**************************************************************************************\n/**\n * @extends VisibleString\n */\nexport class UTCTime extends VisibleString\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"UTCTime\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [value] String representatio of the date\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.year = 0;\n\t\tthis.month = 0;\n\t\tthis.day = 0;\n\t\tthis.hour = 0;\n\t\tthis.minute = 0;\n\t\tthis.second = 0;\n\n\t\t//#region Create UTCTime from ASN.1 UTC string value\n\t\tif(VALUE in parameters)\n\t\t{\n\t\t\tthis.fromString(parameters.value);\n\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\n\t\t}\n\t\t//#endregion\n\t\t//#region Create GeneralizedTime from JavaScript Date type\n\t\tif(VALUE_DATE in parameters)\n\t\t{\n\t\t\tthis.fromDate(parameters.valueDate);\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\n\t\t}\n\t\t//#endregion\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 23; // UTCTime\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ASN.1 internal string into ArrayBuffer\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBuffer()\n\t{\n\t\tconst str = this.toString();\n\n\t\tconst buffer = new ArrayBuffer(str.length);\n\t\tconst view = new Uint8Array(buffer);\n\n\t\tfor(let i = 0; i < str.length; i++)\n\t\t\tview[i] = str.charCodeAt(i);\n\n\t\treturn buffer;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting \"Date\" object into ASN.1 internal string\n\t * @param {!Date} inputDate JavaScript \"Date\" object\n\t */\n\tfromDate(inputDate)\n\t{\n\t\tthis.year = inputDate.getUTCFullYear();\n\t\tthis.month = inputDate.getUTCMonth() + 1;\n\t\tthis.day = inputDate.getUTCDate();\n\t\tthis.hour = inputDate.getUTCHours();\n\t\tthis.minute = inputDate.getUTCMinutes();\n\t\tthis.second = inputDate.getUTCSeconds();\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Function converting ASN.1 internal string into \"Date\" object\n\t * @returns {Date}\n\t */\n\ttoDate()\n\t{\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\t//#region Parse input string\n\t\tconst parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\n\t\tconst parserArray = parser.exec(inputString);\n\t\tif(parserArray === null)\n\t\t{\n\t\t\tthis.error = \"Wrong input string for conversion\";\n\t\t\treturn;\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Store parsed values\n\t\tconst year = parseInt(parserArray[1], 10);\n\t\tif(year >= 50)\n\t\t\tthis.year = 1900 + year;\n\t\telse\n\t\t\tthis.year = 2000 + year;\n\n\t\tthis.month = parseInt(parserArray[2], 10);\n\t\tthis.day = parseInt(parserArray[3], 10);\n\t\tthis.hour = parseInt(parserArray[4], 10);\n\t\tthis.minute = parseInt(parserArray[5], 10);\n\t\tthis.second = parseInt(parserArray[6], 10);\n\t\t//#endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ASN.1 internal class into JavaScript string\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tconst outputArray = new Array(7);\n\n\t\toutputArray[0] = padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\n\t\toutputArray[1] = padNumber(this.month, 2);\n\t\toutputArray[2] = padNumber(this.day, 2);\n\t\toutputArray[3] = padNumber(this.hour, 2);\n\t\toutputArray[4] = padNumber(this.minute, 2);\n\t\toutputArray[5] = padNumber(this.second, 2);\n\t\toutputArray[6] = \"Z\";\n\n\t\treturn outputArray.join(\"\");\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"UTCTime\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.year = this.year;\n\t\tobject.month = this.month;\n\t\tobject.day = this.day;\n\t\tobject.hour = this.hour;\n\t\tobject.minute = this.minute;\n\t\tobject.second = this.second;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends VisibleString\n */\nexport class GeneralizedTime extends VisibleString\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"GeneralizedTime\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [value] String representatio of the date\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.year = 0;\n\t\tthis.month = 0;\n\t\tthis.day = 0;\n\t\tthis.hour = 0;\n\t\tthis.minute = 0;\n\t\tthis.second = 0;\n\t\tthis.millisecond = 0;\n\n\t\t//#region Create UTCTime from ASN.1 UTC string value\n\t\tif(VALUE in parameters)\n\t\t{\n\t\t\tthis.fromString(parameters.value);\n\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\n\t\t}\n\t\t//#endregion\n\t\t//#region Create GeneralizedTime from JavaScript Date type\n\t\tif(VALUE_DATE in parameters)\n\t\t{\n\t\t\tthis.fromDate(parameters.valueDate);\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\n\t\t}\n\t\t//#endregion\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 24; // GeneralizedTime\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ASN.1 internal string into ArrayBuffer\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBuffer()\n\t{\n\t\tconst str = this.toString();\n\n\t\tconst buffer = new ArrayBuffer(str.length);\n\t\tconst view = new Uint8Array(buffer);\n\n\t\tfor(let i = 0; i < str.length; i++)\n\t\t\tview[i] = str.charCodeAt(i);\n\n\t\treturn buffer;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting \"Date\" object into ASN.1 internal string\n\t * @param {!Date} inputDate JavaScript \"Date\" object\n\t */\n\tfromDate(inputDate)\n\t{\n\t\tthis.year = inputDate.getUTCFullYear();\n\t\tthis.month = inputDate.getUTCMonth() + 1;\n\t\tthis.day = inputDate.getUTCDate();\n\t\tthis.hour = inputDate.getUTCHours();\n\t\tthis.minute = inputDate.getUTCMinutes();\n\t\tthis.second = inputDate.getUTCSeconds();\n\t\tthis.millisecond = inputDate.getUTCMilliseconds();\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Function converting ASN.1 internal string into \"Date\" object\n\t * @returns {Date}\n\t */\n\ttoDate()\n\t{\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\t//#region Initial variables\n\t\tlet isUTC = false;\n\n\t\tlet timeString = \"\";\n\t\tlet dateTimeString = \"\";\n\t\tlet fractionPart = 0;\n\n\t\tlet parser;\n\n\t\tlet hourDifference = 0;\n\t\tlet minuteDifference = 0;\n\t\t//#endregion\n\n\t\t//#region Convert as UTC time\n\t\tif(inputString[inputString.length - 1] === \"Z\")\n\t\t{\n\t\t\ttimeString = inputString.substr(0, inputString.length - 1);\n\n\t\t\tisUTC = true;\n\t\t}\n\t\t//#endregion\n\t\t//#region Convert as local time\n\t\telse\n\t\t{\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\tconst number = new Number(inputString[inputString.length - 1]);\n\n\t\t\tif(isNaN(number.valueOf()))\n\t\t\t\tthrow new Error(\"Wrong input string for conversion\");\n\n\t\t\ttimeString = inputString;\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Check that we do not have a \"+\" and \"-\" symbols inside UTC time\n\t\tif(isUTC)\n\t\t{\n\t\t\tif(timeString.indexOf(\"+\") !== (-1))\n\t\t\t\tthrow new Error(\"Wrong input string for conversion\");\n\n\t\t\tif(timeString.indexOf(\"-\") !== (-1))\n\t\t\t\tthrow new Error(\"Wrong input string for conversion\");\n\t\t}\n\t\t//#endregion\n\t\t//#region Get \"UTC time difference\" in case of local time\n\t\telse\n\t\t{\n\t\t\tlet multiplier = 1;\n\t\t\tlet differencePosition = timeString.indexOf(\"+\");\n\t\t\tlet differenceString = \"\";\n\n\t\t\tif(differencePosition === (-1))\n\t\t\t{\n\t\t\t\tdifferencePosition = timeString.indexOf(\"-\");\n\t\t\t\tmultiplier = (-1);\n\t\t\t}\n\n\t\t\tif(differencePosition !== (-1))\n\t\t\t{\n\t\t\t\tdifferenceString = timeString.substr(differencePosition + 1);\n\t\t\t\ttimeString = timeString.substr(0, differencePosition);\n\n\t\t\t\tif((differenceString.length !== 2) && (differenceString.length !== 4))\n\t\t\t\t\tthrow new Error(\"Wrong input string for conversion\");\n\n\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\t\tlet number = new Number(differenceString.substr(0, 2));\n\n\t\t\t\tif(isNaN(number.valueOf()))\n\t\t\t\t\tthrow new Error(\"Wrong input string for conversion\");\n\n\t\t\t\thourDifference = multiplier * number;\n\n\t\t\t\tif(differenceString.length === 4)\n\t\t\t\t{\n\t\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\t\t\tnumber = new Number(differenceString.substr(2, 2));\n\n\t\t\t\t\tif(isNaN(number.valueOf()))\n\t\t\t\t\t\tthrow new Error(\"Wrong input string for conversion\");\n\n\t\t\t\t\tminuteDifference = multiplier * number;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Get position of fraction point\n\t\tlet fractionPointPosition = timeString.indexOf(\".\"); // Check for \"full stop\" symbol\n\t\tif(fractionPointPosition === (-1))\n\t\t\tfractionPointPosition = timeString.indexOf(\",\"); // Check for \"comma\" symbol\n\t\t//#endregion\n\n\t\t//#region Get fraction part\n\t\tif(fractionPointPosition !== (-1))\n\t\t{\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\tconst fractionPartCheck = new Number(`0${timeString.substr(fractionPointPosition)}`);\n\n\t\t\tif(isNaN(fractionPartCheck.valueOf()))\n\t\t\t\tthrow new Error(\"Wrong input string for conversion\");\n\n\t\t\tfractionPart = fractionPartCheck.valueOf();\n\n\t\t\tdateTimeString = timeString.substr(0, fractionPointPosition);\n\t\t}\n\t\telse\n\t\t\tdateTimeString = timeString;\n\t\t//#endregion\n\n\t\t//#region Parse internal date\n\t\tswitch(true)\n\t\t{\n\t\t\tcase (dateTimeString.length === 8): // \"YYYYMMDD\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})/ig;\n\t\t\t\tif(fractionPointPosition !== (-1))\n\t\t\t\t\tthrow new Error(\"Wrong input string for conversion\"); // Here we should not have a \"fraction point\"\n\t\t\t\tbreak;\n\t\t\tcase (dateTimeString.length === 10): // \"YYYYMMDDHH\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n\t\t\t\tif(fractionPointPosition !== (-1))\n\t\t\t\t{\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\n\t\t\t\t\tthis.minute = Math.floor(fractionResult);\n\n\t\t\t\t\tfractionResult = 60 * (fractionResult - this.minute);\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\n\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase (dateTimeString.length === 12): // \"YYYYMMDDHHMM\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n\t\t\t\tif(fractionPointPosition !== (-1))\n\t\t\t\t{\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\n\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase (dateTimeString.length === 14): // \"YYYYMMDDHHMMSS\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n\t\t\t\tif(fractionPointPosition !== (-1))\n\t\t\t\t{\n\t\t\t\t\tconst fractionResult = 1000 * fractionPart;\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Wrong input string for conversion\");\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Put parsed values at right places\n\t\tconst parserArray = parser.exec(dateTimeString);\n\t\tif(parserArray === null)\n\t\t\tthrow new Error(\"Wrong input string for conversion\");\n\n\t\tfor(let j = 1; j < parserArray.length; j++)\n\t\t{\n\t\t\tswitch(j)\n\t\t\t{\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.year = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.month = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.day = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tthis.hour = parseInt(parserArray[j], 10) + hourDifference;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tthis.minute = parseInt(parserArray[j], 10) + minuteDifference;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tthis.second = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Wrong input string for conversion\");\n\t\t\t}\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Get final date\n\t\tif(isUTC === false)\n\t\t{\n\t\t\tconst tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n\n\t\t\tthis.year = tempDate.getUTCFullYear();\n\t\t\tthis.month = tempDate.getUTCMonth();\n\t\t\tthis.day = tempDate.getUTCDay();\n\t\t\tthis.hour = tempDate.getUTCHours();\n\t\t\tthis.minute = tempDate.getUTCMinutes();\n\t\t\tthis.second = tempDate.getUTCSeconds();\n\t\t\tthis.millisecond = tempDate.getUTCMilliseconds();\n\t\t}\n\t\t//#endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ASN.1 internal class into JavaScript string\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(padNumber(this.year, 4));\n\t\toutputArray.push(padNumber(this.month, 2));\n\t\toutputArray.push(padNumber(this.day, 2));\n\t\toutputArray.push(padNumber(this.hour, 2));\n\t\toutputArray.push(padNumber(this.minute, 2));\n\t\toutputArray.push(padNumber(this.second, 2));\n\t\tif(this.millisecond !== 0)\n\t\t{\n\t\t\toutputArray.push(\".\");\n\t\t\toutputArray.push(padNumber(this.millisecond, 3));\n\t\t}\n\t\toutputArray.push(\"Z\");\n\n\t\treturn outputArray.join(\"\");\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"GeneralizedTime\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Conversion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\n\t\t//#region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex) { }\n\t\t//#endregion\n\n\t\tobject.year = this.year;\n\t\tobject.month = this.month;\n\t\tobject.day = this.day;\n\t\tobject.hour = this.hour;\n\t\tobject.minute = this.minute;\n\t\tobject.second = this.second;\n\t\tobject.millisecond = this.millisecond;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class DATE extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"DATE\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 31; // DATE\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"DATE\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class TimeOfDay extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"TimeOfDay\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 32; // TimeOfDay\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"TimeOfDay\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class DateTime extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"DateTime\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 33; // DateTime\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"DateTime\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class Duration extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Duration\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 34; // Duration\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Duration\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class TIME extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Time\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 14; // Time\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inheritance\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"TIME\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of special ASN.1 schema type Choice\n//**************************************************************************************\nexport class Choice\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Choice\" class\n\t * @param {Object} [parameters={}]\n\t * @property {Array} [value] Array of ASN.1 types for make a choice from\n\t * @property {boolean} [optional]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tthis.value = getParametersValue(parameters, VALUE, []);\n\t\tthis.optional = getParametersValue(parameters, OPTIONAL, false);\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of special ASN.1 schema type Any\n//**************************************************************************************\nexport class Any\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Any\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [name]\n\t * @property {boolean} [optional]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tthis.name = getParametersValue(parameters, NAME, EMPTY_STRING);\n\t\tthis.optional = getParametersValue(parameters, OPTIONAL, false);\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of special ASN.1 schema type Repeated\n//**************************************************************************************\nexport class Repeated\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Repeated\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [name]\n\t * @property {boolean} [optional]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tthis.name = getParametersValue(parameters, NAME, EMPTY_STRING);\n\t\tthis.optional = getParametersValue(parameters, OPTIONAL, false);\n\t\tthis.value = getParametersValue(parameters, VALUE, new Any());\n\t\tthis.local = getParametersValue(parameters, LOCAL, false); // Could local or global array to store elements\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Declaration of special ASN.1 schema type RawData\n//**************************************************************************************\n/**\n * @description Special class providing ability to have \"toBER/fromBER\" for raw ArrayBuffer\n */\nexport class RawData\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Repeated\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [name]\n\t * @property {boolean} [optional]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tthis.data = getParametersValue(parameters, DATA, EMPTY_BUFFER);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tthis.data = inputBuffer.slice(inputOffset, inputLength);\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\treturn this.data;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Major ASN.1 BER decoding function\n//**************************************************************************************\n/**\n * Internal library function for decoding ASN.1 BER\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n * @returns {{offset: number, result: Object}}\n */\nfunction LocalFromBER(inputBuffer, inputOffset, inputLength)\n{\n\tconst incomingOffset = inputOffset; // Need to store initial offset since \"inputOffset\" is changing in the function\n\n\t//#region Local function changing a type for ASN.1 classes\n\tfunction localChangeType(inputObject, newType)\n\t{\n\t\tif(inputObject instanceof newType)\n\t\t\treturn inputObject;\n\n\t\tconst newObject = new newType();\n\t\tnewObject.idBlock = inputObject.idBlock;\n\t\tnewObject.lenBlock = inputObject.lenBlock;\n\t\tnewObject.warnings = inputObject.warnings;\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tnewObject.valueBeforeDecode = inputObject.valueBeforeDecode.slice(0);\n\n\t\treturn newObject;\n\t}\n\t//#endregion\n\n\t//#region Create a basic ASN.1 type since we need to return errors and warnings from the function\n\tlet returnObject = new BaseBlock({}, Object);\n\t//#endregion\n\n\t//#region Basic check for parameters\n\tconst baseBlock = new LocalBaseBlock();\n\tif(checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) === false)\n\t{\n\t\treturnObject.error = baseBlock.error;\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\t//#endregion\n\n\t//#region Getting Uint8Array from ArrayBuffer\n\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t//#endregion\n\n\t//#region Initial checks\n\tif(intBuffer.length === 0)\n\t{\n\t\treturnObject.error = \"Zero buffer length\";\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\t//#endregion\n\n\t//#region Decode identification block of ASN.1 BER structure\n\tlet resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\n\treturnObject.warnings.concat(returnObject.idBlock.warnings);\n\tif(resultOffset === (-1))\n\t{\n\t\treturnObject.error = returnObject.idBlock.error;\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\n\tinputOffset = resultOffset;\n\tinputLength -= returnObject.idBlock.blockLength;\n\t//#endregion\n\n\t//#region Decode length block of ASN.1 BER structure\n\tresultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\n\treturnObject.warnings.concat(returnObject.lenBlock.warnings);\n\tif(resultOffset === (-1))\n\t{\n\t\treturnObject.error = returnObject.lenBlock.error;\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\n\tinputOffset = resultOffset;\n\tinputLength -= returnObject.lenBlock.blockLength;\n\t//#endregion\n\n\t//#region Check for using indefinite length form in encoding for primitive types\n\tif((returnObject.idBlock.isConstructed === false) &&\n\t\t(returnObject.lenBlock.isIndefiniteForm === true))\n\t{\n\t\treturnObject.error = \"Indefinite length form used for primitive encoding form\";\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\t//#endregion\n\n\t//#region Switch ASN.1 block type\n\tlet newASN1Type = BaseBlock;\n\n\tswitch(returnObject.idBlock.tagClass)\n\t{\n\t\t//#region UNIVERSAL\n\t\tcase 1:\n\t\t\t//#region Check for reserved tag numbers\n\t\t\tif((returnObject.idBlock.tagNumber >= 37) &&\n\t\t\t\t(returnObject.idBlock.isHexOnly === false))\n\t\t\t{\n\t\t\t\treturnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\n\t\t\t\treturn {\n\t\t\t\t\toffset: (-1),\n\t\t\t\t\tresult: returnObject\n\t\t\t\t};\n\t\t\t}\n\t\t\t//#endregion\n\n\t\t\tswitch(returnObject.idBlock.tagNumber)\n\t\t\t{\n\t\t\t\t//#region EndOfContent type\n\t\t\t\tcase 0:\n\t\t\t\t\t//#region Check for EndOfContent type\n\t\t\t\t\tif((returnObject.idBlock.isConstructed === true) &&\n\t\t\t\t\t\t(returnObject.lenBlock.length > 0))\n\t\t\t\t\t{\n\t\t\t\t\t\treturnObject.error = \"Type [UNIVERSAL 0] is reserved\";\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\toffset: (-1),\n\t\t\t\t\t\t\tresult: returnObject\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t//#endregion\n\n\t\t\t\t\tnewASN1Type = EndOfContent;\n\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region Boolean type\n\t\t\t\tcase 1:\n\t\t\t\t\tnewASN1Type = Boolean;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region Integer type\n\t\t\t\tcase 2:\n\t\t\t\t\tnewASN1Type = Integer;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region BitString type\n\t\t\t\tcase 3:\n\t\t\t\t\tnewASN1Type = BitString;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region OctetString type\n\t\t\t\tcase 4:\n\t\t\t\t\tnewASN1Type = OctetString;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region Null type\n\t\t\t\tcase 5:\n\t\t\t\t\tnewASN1Type = Null;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region OBJECT IDENTIFIER type\n\t\t\t\tcase 6:\n\t\t\t\t\tnewASN1Type = ObjectIdentifier;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region Enumerated type\n\t\t\t\tcase 10:\n\t\t\t\t\tnewASN1Type = Enumerated;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region Utf8String type\n\t\t\t\tcase 12:\n\t\t\t\t\tnewASN1Type = Utf8String;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region Time type\n\t\t\t\t//#region RELATIVE OBJECT IDENTIFIER type\n\t\t\t\tcase 13:\n\t\t\t\t\tnewASN1Type = RelativeObjectIdentifier;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\tcase 14:\n\t\t\t\t\tnewASN1Type = TIME;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region ASN.1 reserved type\n\t\t\t\tcase 15:\n\t\t\t\t\treturnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\n\t\t\t\t\treturn {\n\t\t\t\t\t\toffset: (-1),\n\t\t\t\t\t\tresult: returnObject\n\t\t\t\t\t};\n\t\t\t\t//#endregion\n\t\t\t\t//#region Sequence type\n\t\t\t\tcase 16:\n\t\t\t\t\tnewASN1Type = Sequence;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region Set type\n\t\t\t\tcase 17:\n\t\t\t\t\tnewASN1Type = Set;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region NumericString type\n\t\t\t\tcase 18:\n\t\t\t\t\tnewASN1Type = NumericString;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region PrintableString type\n\t\t\t\tcase 19:\n\t\t\t\t\tnewASN1Type = PrintableString;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region TeletexString type\n\t\t\t\tcase 20:\n\t\t\t\t\tnewASN1Type = TeletexString;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region VideotexString type\n\t\t\t\tcase 21:\n\t\t\t\t\tnewASN1Type = VideotexString;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region IA5String type\n\t\t\t\tcase 22:\n\t\t\t\t\tnewASN1Type = IA5String;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region UTCTime type\n\t\t\t\tcase 23:\n\t\t\t\t\tnewASN1Type = UTCTime;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region GeneralizedTime type\n\t\t\t\tcase 24:\n\t\t\t\t\tnewASN1Type = GeneralizedTime;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region GraphicString type\n\t\t\t\tcase 25:\n\t\t\t\t\tnewASN1Type = GraphicString;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region VisibleString type\n\t\t\t\tcase 26:\n\t\t\t\t\tnewASN1Type = VisibleString;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region GeneralString type\n\t\t\t\tcase 27:\n\t\t\t\t\tnewASN1Type = GeneralString;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region UniversalString type\n\t\t\t\tcase 28:\n\t\t\t\t\tnewASN1Type = UniversalString;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region CharacterString type\n\t\t\t\tcase 29:\n\t\t\t\t\tnewASN1Type = CharacterString;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region BmpString type\n\t\t\t\tcase 30:\n\t\t\t\t\tnewASN1Type = BmpString;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region DATE type\n\t\t\t\tcase 31:\n\t\t\t\t\tnewASN1Type = DATE;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region TimeOfDay type\n\t\t\t\tcase 32:\n\t\t\t\t\tnewASN1Type = TimeOfDay;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region Date-Time type\n\t\t\t\tcase 33:\n\t\t\t\t\tnewASN1Type = DateTime;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region Duration type\n\t\t\t\tcase 34:\n\t\t\t\t\tnewASN1Type = Duration;\n\t\t\t\t\tbreak;\n\t\t\t\t//#endregion\n\t\t\t\t//#region default\n\t\t\t\tdefault:\n\t\t\t\t\t{\n\t\t\t\t\t\tlet newObject;\n\n\t\t\t\t\t\tif(returnObject.idBlock.isConstructed === true)\n\t\t\t\t\t\t\tnewObject = new Constructed();\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tnewObject = new Primitive();\n\n\t\t\t\t\t\tnewObject.idBlock = returnObject.idBlock;\n\t\t\t\t\t\tnewObject.lenBlock = returnObject.lenBlock;\n\t\t\t\t\t\tnewObject.warnings = returnObject.warnings;\n\n\t\t\t\t\t\treturnObject = newObject;\n\t\t\t\t\t}\n\t\t\t\t//#endregion\n\t\t\t}\n\t\t\tbreak;\n\t\t//#endregion\n\t\t//#region All other tag classes\n\t\tcase 2: // APPLICATION\n\t\tcase 3: // CONTEXT-SPECIFIC\n\t\tcase 4: // PRIVATE\n\t\tdefault:\n\t\t\t{\n\t\t\t\tif(returnObject.idBlock.isConstructed === true)\n\t\t\t\t\tnewASN1Type = Constructed;\n\t\t\t\telse\n\t\t\t\t\tnewASN1Type = Primitive;\n\t\t\t}\n\t\t//#endregion\n\t}\n\t//#endregion\n\n\t//#region Change type and perform BER decoding\n\treturnObject = localChangeType(returnObject, newASN1Type);\n\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, (returnObject.lenBlock.isIndefiniteForm === true) ? inputLength : returnObject.lenBlock.length);\n\t//#endregion\n\n\t//#region Coping incoming buffer for entire ASN.1 block\n\treturnObject.valueBeforeDecode = inputBuffer.slice(incomingOffset, incomingOffset + returnObject.blockLength);\n\t//#endregion\n\n\treturn {\n\t\toffset: resultOffset,\n\t\tresult: returnObject\n\t};\n}\n//**************************************************************************************\n/**\n * Major function for decoding ASN.1 BER array into internal library structures\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array of bytes\n */\nexport function fromBER(inputBuffer)\n{\n\tif(inputBuffer.byteLength === 0)\n\t{\n\t\tconst result = new BaseBlock({}, Object);\n\t\tresult.error = \"Input buffer has zero length\";\n\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult\n\t\t};\n\t}\n\n\treturn LocalFromBER(inputBuffer, 0, inputBuffer.byteLength);\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Major scheme verification function\n//**************************************************************************************\n/**\n * Compare of two ASN.1 object trees\n * @param {!Object} root Root of input ASN.1 object tree\n * @param {!Object} inputData Input ASN.1 object tree\n * @param {!Object} inputSchema Input ASN.1 schema to compare with\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\n */\nexport function compareSchema(root, inputData, inputSchema)\n{\n\t//#region Special case for Choice schema element type\n\tif(inputSchema instanceof Choice)\n\t{\n\t\tconst choiceResult = false;\n\n\t\tfor(let j = 0; j < inputSchema.value.length; j++)\n\t\t{\n\t\t\tconst result = compareSchema(root, inputData, inputSchema.value[j]);\n\t\t\tif(result.verified === true)\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\tverified: true,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif(choiceResult === false)\n\t\t{\n\t\t\tconst _result = {\n\t\t\t\tverified: false,\n\t\t\t\tresult: {\n\t\t\t\t\terror: \"Wrong values for Choice type\"\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif(inputSchema.hasOwnProperty(NAME))\n\t\t\t\t_result.name = inputSchema.name;\n\n\t\t\treturn _result;\n\t\t}\n\t}\n\t//#endregion\n\n\t//#region Special case for Any schema element type\n\tif(inputSchema instanceof Any)\n\t{\n\t\t//#region Add named component of ASN.1 schema\n\t\tif(inputSchema.hasOwnProperty(NAME))\n\t\t\troot[inputSchema.name] = inputData;\n\t\t//#endregion\n\n\t\treturn {\n\t\t\tverified: true,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//#endregion\n\n\t//#region Initial check\n\tif((root instanceof Object) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong root object\" }\n\t\t};\n\t}\n\n\tif((inputData instanceof Object) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 data\" }\n\t\t};\n\t}\n\n\tif((inputSchema instanceof Object) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif((ID_BLOCK in inputSchema) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\t//#endregion\n\n\t//#region Comparing idBlock properties in ASN.1 data and ASN.1 schema\n\t//#region Encode and decode ASN.1 schema idBlock\n\t/// <remarks>This encoding/decoding is necessary because could be an errors in schema definition</remarks>\n\tif((FROM_BER in inputSchema.idBlock) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif((TO_BER in inputSchema.idBlock) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tconst encodedId = inputSchema.idBlock.toBER(false);\n\tif(encodedId.byteLength === 0)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Error encoding idBlock for ASN.1 schema\" }\n\t\t};\n\t}\n\n\tconst decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\n\tif(decodedOffset === (-1))\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Error decoding idBlock for ASN.1 schema\" }\n\t\t};\n\t}\n\t//#endregion\n\n\t//#region tagClass\n\tif(inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif(inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//#endregion\n\t//#region tagNumber\n\tif(inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif(inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//#endregion\n\t//#region isConstructed\n\tif(inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif(inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//#endregion\n\t//#region isHexOnly\n\tif((IS_HEX_ONLY in inputSchema.idBlock) === false) // Since 'isHexOnly' is an inherited property\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif(inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//#endregion\n\t//#region valueHex\n\tif(inputSchema.idBlock.isHexOnly === true)\n\t{\n\t\tif((VALUE_HEX in inputSchema.idBlock) === false) // Since 'valueHex' is an inherited property\n\t\t{\n\t\t\treturn {\n\t\t\t\tverified: false,\n\t\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t\t};\n\t\t}\n\n\t\tconst schemaView = new Uint8Array(inputSchema.idBlock.valueHex);\n\t\tconst asn1View = new Uint8Array(inputData.idBlock.valueHex);\n\n\t\tif(schemaView.length !== asn1View.length)\n\t\t{\n\t\t\treturn {\n\t\t\t\tverified: false,\n\t\t\t\tresult: root\n\t\t\t};\n\t\t}\n\n\t\tfor(let i = 0; i < schemaView.length; i++)\n\t\t{\n\t\t\tif(schemaView[i] !== asn1View[1])\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\tverified: false,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\t//#endregion\n\t//#endregion\n\n\t//#region Add named component of ASN.1 schema\n\tif(inputSchema.hasOwnProperty(NAME))\n\t{\n\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n\t\tif(inputSchema.name !== \"\")\n\t\t\troot[inputSchema.name] = inputData;\n\t}\n\t//#endregion\n\n\t//#region Getting next ASN.1 block for comparison\n\tif(inputSchema.idBlock.isConstructed === true)\n\t{\n\t\tlet admission = 0;\n\t\tlet result = { verified: false };\n\n\t\tlet maxLength = inputSchema.valueBlock.value.length;\n\n\t\tif(maxLength > 0)\n\t\t{\n\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\n\t\t\t\tmaxLength = inputData.valueBlock.value.length;\n\t\t}\n\n\t\t//#region Special case when constructive value has no elements\n\t\tif(maxLength === 0)\n\t\t{\n\t\t\treturn {\n\t\t\t\tverified: true,\n\t\t\t\tresult: root\n\t\t\t};\n\t\t}\n\t\t//#endregion\n\n\t\t//#region Special case when \"inputData\" has no values and \"inputSchema\" has all optional values\n\t\tif((inputData.valueBlock.value.length === 0) &&\n\t\t\t(inputSchema.valueBlock.value.length !== 0))\n\t\t{\n\t\t\tlet _optional = true;\n\n\t\t\tfor(let i = 0; i < inputSchema.valueBlock.value.length; i++)\n\t\t\t\t_optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\n\n\t\t\tif(_optional === true)\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\tverified: true,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t//#region Delete early added name of block\n\t\t\tif(inputSchema.hasOwnProperty(NAME))\n\t\t\t{\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t}\n\t\t\t//#endregion\n\n\t\t\troot.error = \"Inconsistent object length\";\n\n\t\t\treturn {\n\t\t\t\tverified: false,\n\t\t\t\tresult: root\n\t\t\t};\n\t\t}\n\t\t//#endregion\n\n\t\tfor(let i = 0; i < maxLength; i++)\n\t\t{\n\t\t\t//#region Special case when there is an OPTIONAL element of ASN.1 schema at the end\n\t\t\tif((i - admission) >= inputData.valueBlock.value.length)\n\t\t\t{\n\t\t\t\tif(inputSchema.valueBlock.value[i].optional === false)\n\t\t\t\t{\n\t\t\t\t\tconst _result = {\n\t\t\t\t\t\tverified: false,\n\t\t\t\t\t\tresult: root\n\t\t\t\t\t};\n\n\t\t\t\t\troot.error = \"Inconsistent length between ASN.1 data and schema\";\n\n\t\t\t\t\t//#region Delete early added name of block\n\t\t\t\t\tif(inputSchema.hasOwnProperty(NAME))\n\t\t\t\t\t{\n\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n\t\t\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t\t\t_result.name = inputSchema.name;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//#endregion\n\n\t\t\t\t\treturn _result;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//#endregion\n\t\t\telse\n\t\t\t{\n\t\t\t\t//#region Special case for Repeated type of ASN.1 schema element\n\t\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\n\t\t\t\t{\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\n\t\t\t\t\tif(result.verified === false)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[0].optional === true)\n\t\t\t\t\t\t\tadmission++;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//#region Delete early added name of block\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(NAME))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//#endregion\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif((NAME in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0))\n\t\t\t\t\t{\n\t\t\t\t\t\tlet arrayRoot = {};\n\n\t\t\t\t\t\tif((LOCAL in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local === true))\n\t\t\t\t\t\t\tarrayRoot = inputData;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tarrayRoot = root;\n\n\t\t\t\t\t\tif(typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\n\t\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name] = [];\n\n\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//#endregion\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\n\t\t\t\t\tif(result.verified === false)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[i].optional === true)\n\t\t\t\t\t\t\tadmission++;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//#region Delete early added name of block\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(NAME))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//#endregion\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(result.verified === false) // The situation may take place if last element is OPTIONAL and verification failed\n\t\t{\n\t\t\tconst _result = {\n\t\t\t\tverified: false,\n\t\t\t\tresult: root\n\t\t\t};\n\n\t\t\t//#region Delete early added name of block\n\t\t\tif(inputSchema.hasOwnProperty(NAME))\n\t\t\t{\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t{\n\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t_result.name = inputSchema.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//#endregion\n\n\t\t\treturn _result;\n\t\t}\n\n\t\treturn {\n\t\t\tverified: true,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//#endregion\n\t//#region Ability to parse internal value for primitive-encoded value (value of OctetString, for example)\n\tif((PRIMITIVE_SCHEMA in inputSchema) &&\n\t\t(VALUE_HEX in inputData.valueBlock))\n\t{\n\t\t//#region Decoding of raw ASN.1 data\n\t\tconst asn1 = fromBER(inputData.valueBlock.valueHex);\n\t\tif(asn1.offset === (-1))\n\t\t{\n\t\t\tconst _result = {\n\t\t\t\tverified: false,\n\t\t\t\tresult: asn1.result\n\t\t\t};\n\n\t\t\t//#region Delete early added name of block\n\t\t\tif(inputSchema.hasOwnProperty(NAME))\n\t\t\t{\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t{\n\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t_result.name = inputSchema.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//#endregion\n\n\t\t\treturn _result;\n\t\t}\n\t\t//#endregion\n\n\t\treturn compareSchema(root, asn1.result, inputSchema.primitiveSchema);\n\t}\n\n\treturn {\n\t\tverified: true,\n\t\tresult: root\n\t};\n\t//#endregion\n}\n//**************************************************************************************\n//noinspection JSUnusedGlobalSymbols\n/**\n * ASN.1 schema verification for ArrayBuffer data\n * @param {!ArrayBuffer} inputBuffer Input BER-encoded ASN.1 data\n * @param {!Object} inputSchema Input ASN.1 schema to verify against to\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\n */\nexport function verifySchema(inputBuffer, inputSchema)\n{\n\t//#region Initial check\n\tif((inputSchema instanceof Object) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema type\" }\n\t\t};\n\t}\n\t//#endregion\n\n\t//#region Decoding of raw ASN.1 data\n\tconst asn1 = fromBER(inputBuffer);\n\tif(asn1.offset === (-1))\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: asn1.result\n\t\t};\n\t}\n\t//#endregion\n\n\t//#region Compare ASN.1 struct with input schema\n\treturn compareSchema(asn1.result, asn1.result, inputSchema);\n\t//#endregion\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n//#region Major function converting JSON to ASN.1 objects\n//**************************************************************************************\n//noinspection JSUnusedGlobalSymbols\n/**\n * Converting from JSON to ASN.1 objects\n * @param {string|Object} json JSON string or object to convert to ASN.1 objects\n */\nexport function fromJSON(json)\n{\n\t// TODO Implement\n}\n//**************************************************************************************\n//#endregion\n//**************************************************************************************\n"],"file":"asn1.js"}