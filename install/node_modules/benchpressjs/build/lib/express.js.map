{"version":3,"sources":["../../lib/express.js"],"names":["fs","require","Benchpress","runtime","evaluate","render","filepath","data","template","next","output","helpers","process","nextTick","e","message","stack","__express","addGlobals","_locals","cache","readFile","err","code","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAMC,UAAU,GAAGD,OAAO,CAAC,iBAAD,CAA1B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAxB;;AAEA,SAASI,MAAT,CAAgBC,QAAhB,EAA0BC,IAA1B,EAAgCC,QAAhC,EAA0CC,IAA1C,EAAgD;AAC9C,MAAI;AACF,UAAMC,MAAM,GAAGP,OAAO,CAACD,UAAU,CAACS,OAAZ,EAAqBJ,IAArB,EAA2BC,QAA3B,CAAtB;AAEAI,IAAAA,OAAO,CAACC,QAAR,CAAiBJ,IAAjB,EAAuB,IAAvB,EAA6BC,MAA7B;AACD,GAJD,CAIE,OAAOI,CAAP,EAAU;AACVA,IAAAA,CAAC,CAACC,OAAF,GAAa,8BAA6BT,QAAS,OAAMQ,CAAC,CAACC,OAAQ,EAAnE;AACAD,IAAAA,CAAC,CAACE,KAAF,GAAW,8BAA6BV,QAAS,OAAMQ,CAAC,CAACE,KAAM,EAA/D;AAEAJ,IAAAA,OAAO,CAACC,QAAR,CAAiBJ,IAAjB,EAAuBK,CAAvB;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,SAAT,CAAmBX,QAAnB,EAA6BC,IAA7B,EAAmCE,IAAnC,EAAyC;AACvCF,EAAAA,IAAI,GAAGL,UAAU,CAACgB,UAAX,CAAsBX,IAAtB,CAAP;AACAA,EAAAA,IAAI,CAACY,OAAL,GAAe,IAAf;;AAEA,MAAIjB,UAAU,CAACkB,KAAX,CAAiBd,QAAjB,CAAJ,EAAgC;AAC9BD,IAAAA,MAAM,CAACC,QAAD,EAAWC,IAAX,EAAiBL,UAAU,CAACkB,KAAX,CAAiBd,QAAjB,CAAjB,EAA6CG,IAA7C,CAAN;AACA;AACD;;AAEDT,EAAAA,EAAE,CAACqB,QAAH,CAAYf,QAAZ,EAAsB,OAAtB,EAA+B,CAACgB,GAAD,EAAMC,IAAN,KAAe;AAC5C,QAAID,GAAJ,EAAS;AACPb,MAAAA,IAAI,CAACa,GAAD,CAAJ;AACA;AACD;;AAED,QAAId,QAAJ;;AACA,QAAI;AACFA,MAAAA,QAAQ,GAAGN,UAAU,CAACkB,KAAX,CAAiBd,QAAjB,IAA6BF,QAAQ,CAACmB,IAAD,CAAhD;AACD,KAFD,CAEE,OAAOT,CAAP,EAAU;AACVA,MAAAA,CAAC,CAACC,OAAF,GAAa,gCAA+BT,QAAS,OAAMQ,CAAC,CAACC,OAAQ,EAArE;AACAD,MAAAA,CAAC,CAACE,KAAF,GAAW,gCAA+BV,QAAS,OAAMQ,CAAC,CAACE,KAAM,EAAjE;AAEAJ,MAAAA,OAAO,CAACC,QAAR,CAAiBJ,IAAjB,EAAuBK,CAAvB;AACA;AACD;;AAEDT,IAAAA,MAAM,CAACC,QAAD,EAAWC,IAAX,EAAiBC,QAAjB,EAA2BC,IAA3B,CAAN;AACD,GAlBD;AAmBD;;AAEDe,MAAM,CAACC,OAAP,GAAiBR,SAAjB","sourcesContent":["'use strict';\n\nconst fs = require('fs');\n\nconst Benchpress = require('./benchpress.js');\nconst runtime = require('./runtime');\nconst evaluate = require('./evaluate');\n\nfunction render(filepath, data, template, next) {\n  try {\n    const output = runtime(Benchpress.helpers, data, template);\n\n    process.nextTick(next, null, output);\n  } catch (e) {\n    e.message = `Render failed for template ${filepath}:\\n ${e.message}`;\n    e.stack = `Render failed for template ${filepath}:\\n ${e.stack}`;\n\n    process.nextTick(next, e);\n  }\n}\n\n/**\n * Provide functionality to act as an express engine\n * @param {string} filepath - Compiled template file path\n * @param {Object} data - Data with which to parse the template\n * @param {function} next - (err, output)\n */\nfunction __express(filepath, data, next) {\n  data = Benchpress.addGlobals(data);\n  data._locals = null;\n\n  if (Benchpress.cache[filepath]) {\n    render(filepath, data, Benchpress.cache[filepath], next);\n    return;\n  }\n\n  fs.readFile(filepath, 'utf-8', (err, code) => {\n    if (err) {\n      next(err);\n      return;\n    }\n\n    let template;\n    try {\n      template = Benchpress.cache[filepath] = evaluate(code);\n    } catch (e) {\n      e.message = `Evaluate failed for template ${filepath}:\\n ${e.message}`;\n      e.stack = `Evaluate failed for template ${filepath}:\\n ${e.stack}`;\n\n      process.nextTick(next, e);\n      return;\n    }\n\n    render(filepath, data, template, next);\n  });\n}\n\nmodule.exports = __express;\n"],"file":"express.js"}