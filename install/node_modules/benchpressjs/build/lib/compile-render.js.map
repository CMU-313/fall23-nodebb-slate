{"version":3,"sources":["../../lib/compile-render.js"],"names":["Cache","require","Benchpress","precompile","runtime","evaluate","compileRenderCache","stdTTL","useClones","compileRender","templateSource","data","block","Promise","try","cached","get","ttl","templateFunction","then","code","set","blocks","helpers","catch","err","message","slice","stack","compileParse","callback","console","warn","output","process","nextTick","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Cache = require('node-cache');\n\nconst Benchpress = require('./benchpress');\nconst precompile = require('./precompile');\nconst runtime = require('./runtime');\nconst evaluate = require('./evaluate');\n\nconst compileRenderCache = new Cache({\n  stdTTL: 60 * 60, // one hour\n  useClones: false,\n});\n\n/**\n * Compile a template and render it\n * Automatically caches template function based on hash of input template\n * @param {string} templateSource\n * @param {any} data\n * @param {string} [block]\n * @returns {Promise<string>} - rendered output\n */\nfunction compileRender(templateSource, data, block) {\n  return Promise.try(() => {\n    const cached = compileRenderCache.get(templateSource);\n    if (cached) {\n      compileRenderCache.ttl(templateSource);\n      return cached;\n    }\n\n    const templateFunction = precompile(templateSource, {})\n      .then(code => evaluate(code));\n\n    compileRenderCache.set(templateSource, templateFunction);\n    return templateFunction;\n  }).then((templateFunction) => {\n    if (block) {\n      templateFunction = templateFunction.blocks && templateFunction.blocks[block];\n    }\n    if (!templateFunction) {\n      return '';\n    }\n\n    return runtime(Benchpress.helpers, data, templateFunction);\n  }).catch((err) => {\n    err.message = `Render failed for template ${templateSource.slice(0, 20)}:\\n ${err.message}`;\n    err.stack = `Render failed for template ${templateSource.slice(0, 20)}:\\n ${err.stack}`;\n\n    throw err;\n  });\n}\n\n/**\n * Alias for {@link compileRender}, but uses a callback\n * @param {string} templateSource\n * @param {string} [block]\n * @param {any} data\n * @param {function} callback - (err, output)\n *\n * @deprecated - Use {@link compileRender} instead\n */\nfunction compileParse(templateSource, block, data, callback) {\n  // eslint-disable-next-line no-console\n  console.warn('Deprecated: Benchpress.compileParse is deprecated, to be removed in v3.0.0');\n\n  if (!callback && typeof block === 'object' && typeof data === 'function') {\n    callback = data;\n    data = block;\n    block = null;\n  }\n  if (!templateSource) {\n    callback('');\n    return;\n  }\n\n  compileRender(templateSource, data, block)\n    .then(\n      output => process.nextTick(callback, null, output),\n      err => process.nextTick(callback, err),\n    );\n}\n\nexports.compileRender = compileRender;\nexports.compileParse = compileParse;\n"],"file":"compile-render.js"}