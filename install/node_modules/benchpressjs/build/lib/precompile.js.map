{"version":3,"sources":["../../lib/precompile.js"],"names":["compile","require","precompile","source","options","callback","filename","promise","Promise","try","Error","then","code","process","nextTick","err","module","exports"],"mappings":"AAAA,a,CAEA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,OAAO,CAAC,aAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,OAA5B,EAAqCC,QAArC,EAA+C;AAC7C,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,QAAQ,GAAGD,OAAX;AACD;;AACD,MAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC9BC,IAAAA,OAAO,GAAGD,MAAV;AACAA,IAAAA,MAAM,GAAGC,OAAO,CAACD,MAAjB;AACD;;AAED,QAAMG,QAAQ,GAAIF,OAAO,IAAIA,OAAO,CAACE,QAApB,IAAiC,WAAlD;AAEA,QAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAY,MAAM;AAChC,QAAI,OAAON,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAMO,KAAK,CAAC,yBAAD,CAAX;AACD;;AAED,WAAOV,OAAO,CAACG,MAAD,EAASG,QAAT,CAAd;AACD,GANe,CAAhB;;AAQA,MAAID,QAAJ,EAAc;AACZE,IAAAA,OAAO,CAACI,IAAR,CACEC,IAAI,IAAIC,OAAO,CAACC,QAAR,CAAiBT,QAAjB,EAA2B,IAA3B,EAAiCO,IAAjC,CADV,EAEEG,GAAG,IAAIF,OAAO,CAACC,QAAR,CAAiBT,QAAjB,EAA2BU,GAA3B,CAFT;AAID;;AAED,SAAOR,OAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiBf,UAAjB","sourcesContent":["'use strict';\n\n// eslint-disable-next-line import/no-unresolved\nconst { compile } = require('../compiler');\n\n/**\n * Precompile a benchpress template\n * - `precompiled(source): Promise<string>`\n * - `precompile(source, {}, callback) => callback(err, output)`\n * - `precompile({ source }, callback) => callback(err, output)`\n *\n * @param {string} source - Template source\n * @param {string} options.filename - Template file name for diagnostics\n * @param {function} [callback] - (err, output)\n * @returns {Promise<string>} - output code\n */\nfunction precompile(source, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n  }\n  if (typeof source === 'object') {\n    options = source;\n    source = options.source;\n  }\n\n  const filename = (options && options.filename) || '<unknown>';\n\n  const promise = Promise.try(() => {\n    if (typeof source !== 'string') {\n      throw Error('source must be a string');\n    }\n\n    return compile(source, filename);\n  });\n\n  if (callback) {\n    promise.then(\n      code => process.nextTick(callback, null, code),\n      err => process.nextTick(callback, err),\n    );\n  }\n\n  return promise;\n}\n\nmodule.exports = precompile;\n"],"file":"precompile.js"}