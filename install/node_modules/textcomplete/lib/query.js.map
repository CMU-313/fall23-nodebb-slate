{"version":3,"sources":["../src/query.js"],"names":["Query","strategy","text","props","context","match","matchText","index","term","callback","search","results","map","result"],"mappings":";;;;;;;;AAEA;;;;AACA;;;;;;;;AAGA;;;IAGqBA,K;;;;;AAKnB;;;;;0BAKaC,Q,EAAoBC,I,EAAsB;AACrD,UAAI,OAAOD,SAASE,KAAT,CAAeC,OAAtB,KAAkC,UAAtC,EAAkD;AAChD,YAAMA,UAAUH,SAASE,KAAT,CAAeC,OAAf,CAAuBF,IAAvB,CAAhB;AACA,YAAI,OAAOE,OAAP,KAAmB,QAAvB,EAAiC;AAC/BF,iBAAOE,OAAP;AACD,SAFD,MAEO,IAAI,CAACA,OAAL,EAAc;AACnB,iBAAO,IAAP;AACD;AACF;AACD,UAAMC,QAAQJ,SAASK,SAAT,CAAmBJ,IAAnB,CAAd;AACA,aAAOG,QAAQ,IAAIL,KAAJ,CAAUC,QAAV,EAAoBI,MAAMJ,SAASM,KAAf,CAApB,EAA2CF,KAA3C,CAAR,GAA4D,IAAnE;AACD;;;AAED,iBAAYJ,QAAZ,EAAgCO,IAAhC,EAA8CH,KAA9C,EAAgE;AAAA;;AAC9D,SAAKJ,QAAL,GAAgBA,QAAhB;AACA,SAAKO,IAAL,GAAYA,IAAZ;AACA,SAAKH,KAAL,GAAaA,KAAb;AACD;;AAED;;;;;;;4BAGQI,Q,EAAoC;AAAA;;AAC1C,WAAKR,QAAL,CAAcS,MAAd,CACE,KAAKF,IADP,EAEE,mBAAW;AACTC,iBACEE,QAAQC,GAAR,CAAY,kBAAU;AACpB,iBAAO,4BAAiBC,MAAjB,EAAyB,MAAKL,IAA9B,EAAoC,MAAKP,QAAzC,CAAP;AACD,SAFD,CADF;AAKD,OARH,EASE,KAAKI,KATP;AAWD;;;;;;kBA5CkBL,K","file":"query.js","sourcesContent":["// @flow\n\nimport SearchResult from \"./search_result\"\nimport Strategy from \"./strategy\"\nimport type { MatchData } from \"./strategy\"\n\n/**\n * Encapsulate matching condition between a Strategy and current editor's value.\n */\nexport default class Query {\n  strategy: Strategy\n  term: string\n  match: MatchData\n\n  /**\n   * Build a Query object by the given string if this matches to the string.\n   *\n   * @param {string} text - Head to input cursor.\n   */\n  static build(strategy: Strategy, text: string): ?Query {\n    if (typeof strategy.props.context === \"function\") {\n      const context = strategy.props.context(text)\n      if (typeof context === \"string\") {\n        text = context\n      } else if (!context) {\n        return null\n      }\n    }\n    const match = strategy.matchText(text)\n    return match ? new Query(strategy, match[strategy.index], match) : null\n  }\n\n  constructor(strategy: Strategy, term: string, match: MatchData) {\n    this.strategy = strategy\n    this.term = term\n    this.match = match\n  }\n\n  /**\n   * Invoke search strategy and callback the given function.\n   */\n  execute(callback: (SearchResult[]) => void) {\n    this.strategy.search(\n      this.term,\n      results => {\n        callback(\n          results.map(result => {\n            return new SearchResult(result, this.term, this.strategy)\n          }),\n        )\n      },\n      this.match,\n    )\n  }\n}\n"]}