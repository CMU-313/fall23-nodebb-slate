{"version":3,"sources":["../src/search_result.js"],"names":["SearchResult","data","term","strategy","beforeCursor","afterCursor","replacement","replace","Array","isArray","match","matchText","_","p1","parseInt","slice","index","length","join","template"],"mappings":";;;;;;;;AAEA;;;;;;;;AAEA;;;IAGqBA,Y;;AAKnB;;;AAGA,wBAAYC,IAAZ,EAA0BC,IAA1B,EAAwCC,QAAxC,EAA4D;AAAA;;AAC1D,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;;;4BAEOC,Y,EAAsBC,W,EAAqB;AACjD,UAAIC,cAAc,KAAKH,QAAL,CAAcI,OAAd,CAAsB,KAAKN,IAA3B,CAAlB;AACA,UAAIK,gBAAgB,IAApB,EAA0B;AACxB,YAAIE,MAAMC,OAAN,CAAcH,WAAd,CAAJ,EAAgC;AAC9BD,wBAAcC,YAAY,CAAZ,IAAiBD,WAA/B;AACAC,wBAAcA,YAAY,CAAZ,CAAd;AACD;AACD,YAAMI,QAAQ,KAAKP,QAAL,CAAcQ,SAAd,CAAwBP,YAAxB,CAAd;AACA,YAAIM,KAAJ,EAAW;AACTJ,wBAAcA,YACXC,OADW,CACH,MADG,EACKG,MAAM,CAAN,CADL,EAEXH,OAFW,CAEH,SAFG,EAEQ,UAACK,CAAD,EAAIC,EAAJ;AAAA,mBAAWH,MAAMI,SAASD,EAAT,EAAa,EAAb,CAAN,CAAX;AAAA,WAFR,CAAd;AAGA,iBAAO,CACL,CACET,aAAaW,KAAb,CAAmB,CAAnB,EAAsBL,MAAMM,KAA5B,CADF,EAEEV,WAFF,EAGEF,aAAaW,KAAb,CAAmBL,MAAMM,KAAN,GAAcN,MAAM,CAAN,EAASO,MAA1C,CAHF,EAIEC,IAJF,CAIO,EAJP,CADK,EAMLb,WANK,CAAP;AAQD;AACF;AACF;;;6BAEgB;AACf,aAAO,KAAKF,QAAL,CAAcgB,QAAd,CAAuB,KAAKlB,IAA5B,EAAkC,KAAKC,IAAvC,CAAP;AACD;;;;;;kBAxCkBF,Y","file":"search_result.js","sourcesContent":["// @flow\n\nimport Strategy from \"./strategy\"\n\n/**\n * Encapsulate an result of each search results.\n */\nexport default class SearchResult {\n  data: Object\n  term: string\n  strategy: Strategy\n\n  /**\n   * @param {object} data - An element of array callbacked by search function.\n   */\n  constructor(data: Object, term: string, strategy: Strategy) {\n    this.data = data\n    this.term = term\n    this.strategy = strategy\n  }\n\n  replace(beforeCursor: string, afterCursor: string) {\n    let replacement = this.strategy.replace(this.data)\n    if (replacement !== null) {\n      if (Array.isArray(replacement)) {\n        afterCursor = replacement[1] + afterCursor\n        replacement = replacement[0]\n      }\n      const match = this.strategy.matchText(beforeCursor)\n      if (match) {\n        replacement = replacement\n          .replace(/\\$&/g, match[0])\n          .replace(/\\$(\\d)/g, (_, p1) => match[parseInt(p1, 10)])\n        return [\n          [\n            beforeCursor.slice(0, match.index),\n            replacement,\n            beforeCursor.slice(match.index + match[0].length),\n          ].join(\"\"),\n          afterCursor,\n        ]\n      }\n    }\n  }\n\n  render(): string {\n    return this.strategy.template(this.data, this.term)\n  }\n}\n"]}