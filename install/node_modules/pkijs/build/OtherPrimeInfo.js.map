{"version":3,"sources":["../src/OtherPrimeInfo.js"],"names":["asn1js","OtherPrimeInfo","constructor","parameters","prime","defaultValues","exponent","coefficient","fromSchema","schema","fromJSON","json","memberName","Integer","Error","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","convertFromDER","toSchema","convertToDER","toJSON","r","valueBlock","valueHex","d","t"],"mappings":"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","file":"OtherPrimeInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class OtherPrimeInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherPrimeInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description prime\r\n\t\t */\r\n\t\tthis.prime = getParametersValue(parameters, \"prime\", OtherPrimeInfo.defaultValues(\"prime\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description exponent\r\n\t\t */\r\n\t\tthis.exponent = getParametersValue(parameters, \"exponent\", OtherPrimeInfo.defaultValues(\"exponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description coefficient\r\n\t\t */\r\n\t\tthis.coefficient = getParametersValue(parameters, \"coefficient\", OtherPrimeInfo.defaultValues(\"coefficient\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"prime\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"coefficient\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherPrimeInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OtherPrimeInfo ::= Sequence {\r\n\t\t//    prime             Integer,  -- ri\r\n\t\t//    exponent          Integer,  -- di\r\n\t\t//    coefficient       Integer   -- ti\r\n\t\t//}\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} prime\r\n\t\t * @property {string} exponent\r\n\t\t * @property {string} coefficient\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.coefficient || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"prime\",\r\n\t\t\t\"exponent\",\r\n\t\t\t\"coefficient\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherPrimeInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tprime: \"prime\",\r\n\t\t\t\t\texponent: \"exponent\",\r\n\t\t\t\t\tcoefficient: \"coefficient\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherPrimeInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.prime = asn1.result.prime.convertFromDER();\r\n\t\tthis.exponent = asn1.result.exponent.convertFromDER();\r\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.prime.convertToDER(),\r\n\t\t\t\tthis.exponent.convertToDER(),\r\n\t\t\t\tthis.coefficient.convertToDER()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tr: toBase64(arrayBufferToString(this.prime.valueBlock.valueHex), true, true),\r\n\t\t\td: toBase64(arrayBufferToString(this.exponent.valueBlock.valueHex), true, true),\r\n\t\t\tt: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"r\" in json)\r\n\t\t\tthis.prime = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.r, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"r\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t\tthis.exponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.d, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif(\"t\" in json)\r\n\t\t\tthis.coefficient = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.t, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"t\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}