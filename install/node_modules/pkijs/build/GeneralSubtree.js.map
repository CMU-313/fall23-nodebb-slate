{"version":3,"sources":["../src/GeneralSubtree.js"],"names":["asn1js","GeneralSubtree","constructor","parameters","base","defaultValues","minimum","maximum","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Integer","asn1","compareSchema","verified","result","valueBlock","isHexOnly","valueDec","toSchema","outputArray","push","valueMinimum","valueMaximum","toJSON","object"],"mappings":"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","file":"GeneralSubtree.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class GeneralSubtree\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for GeneralSubtree class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralName}\r\n\t\t * @description base\r\n\t\t */\r\n\t\tthis.base = getParametersValue(parameters, \"base\", GeneralSubtree.defaultValues(\"base\"));\r\n\r\n\t\t/**\r\n\t\t * @type {number|Integer}\r\n\t\t * @description base\r\n\t\t */\r\n\t\tthis.minimum = getParametersValue(parameters, \"minimum\", GeneralSubtree.defaultValues(\"minimum\"));\r\n\r\n\t\tif(\"maximum\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number|Integer}\r\n\t\t\t * @description minimum\r\n\t\t\t */\r\n\t\t\tthis.maximum = getParametersValue(parameters, \"maximum\", GeneralSubtree.defaultValues(\"maximum\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"base\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"minimum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"maximum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for GeneralSubtree class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//GeneralSubtree ::= SEQUENCE {\r\n\t\t//    base                    GeneralName,\r\n\t\t//    minimum         [0]     BaseDistance DEFAULT 0,\r\n\t\t//    maximum         [1]     BaseDistance OPTIONAL }\r\n\t\t//\r\n\t\t//BaseDistance ::= INTEGER (0..MAX)\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [base]\r\n\t\t * @property {string} [minimum]\r\n\t\t * @property {string} [maximum]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralName.schema(names.base || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.minimum || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.maximum || \"\") })]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"base\",\r\n\t\t\t\"minimum\",\r\n\t\t\t\"maximum\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tGeneralSubtree.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbase: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"base\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tminimum: \"minimum\",\r\n\t\t\t\t\tmaximum: \"maximum\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for GeneralSubtree\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.base = new GeneralName({ schema: asn1.result.base });\r\n\r\n\t\tif(\"minimum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.minimum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.minimum = asn1.result.minimum;\r\n\t\t\telse\r\n\t\t\t\tthis.minimum = asn1.result.minimum.valueBlock.valueDec;\r\n\t\t}\r\n\r\n\t\tif(\"maximum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.maximum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.maximum = asn1.result.maximum;\r\n\t\t\telse\r\n\t\t\t\tthis.maximum = asn1.result.maximum.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.base.toSchema());\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tlet valueMinimum = 0;\r\n\t\t\t\r\n\t\t\tif(this.minimum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMinimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tvalueMinimum = new asn1js.Integer({ value: this.minimum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMinimum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tlet valueMaximum = 0;\r\n\t\t\t\r\n\t\t\tif(this.maximum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMaximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tvalueMaximum = new asn1js.Integer({ value: this.maximum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMaximum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tbase: this.base.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tif((typeof this.minimum) === \"number\")\r\n\t\t\t\tobject.minimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tobject.minimum = this.minimum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tif((typeof this.maximum) === \"number\")\r\n\t\t\t\tobject.maximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tobject.maximum = this.maximum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}