{"version":3,"sources":["../src/SingleResponse.js"],"names":["asn1js","SingleResponse","constructor","parameters","certID","defaultValues","certStatus","thisUpdate","nextUpdate","singleExtensions","fromSchema","schema","memberName","Date","Error","compareWithDefault","memberValue","hashAlgorithm","issuerNameHash","issuerKeyHash","serialNumber","Object","keys","length","names","Sequence","name","blockName","value","Choice","Primitive","idBlock","tagClass","tagNumber","lenBlockLength","Constructed","GeneralizedTime","optional","Enumerated","lenBlock","asn1","compareSchema","verified","result","toDate","Array","from","valueBlock","element","toSchema","outputArray","push","valueDate","toJSON","_object"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;AACA;;;;AACA;;;;;;;;AACA;AACA;;;AAGe,MAAMC,cAAN,CACf;AACC;AACA;;;;;AAKAC,aAAYC,aAAa,EAAzB,EACA;AACC;AACA;;;;AAIA,OAAKC,MAAL,GAAc,iCAAmBD,UAAnB,EAA+B,QAA/B,EAAyCF,eAAeI,aAAf,CAA6B,QAA7B,CAAzC,CAAd;AACA;;;;AAIA,OAAKC,UAAL,GAAkB,iCAAmBH,UAAnB,EAA+B,YAA/B,EAA6CF,eAAeI,aAAf,CAA6B,YAA7B,CAA7C,CAAlB;AACA;;;;AAIA,OAAKE,UAAL,GAAkB,iCAAmBJ,UAAnB,EAA+B,YAA/B,EAA6CF,eAAeI,aAAf,CAA6B,YAA7B,CAA7C,CAAlB;;AAEA,MAAG,gBAAgBF,UAAnB;AACC;;;;AAIA,QAAKK,UAAL,GAAkB,iCAAmBL,UAAnB,EAA+B,YAA/B,EAA6CF,eAAeI,aAAf,CAA6B,YAA7B,CAA7C,CAAlB;;AAED,MAAG,sBAAsBF,UAAzB;AACC;;;;AAIA,QAAKM,gBAAL,GAAwB,iCAAmBN,UAAnB,EAA+B,kBAA/B,EAAmDF,eAAeI,aAAf,CAA6B,kBAA7B,CAAnD,CAAxB;AACD;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKO,UAAL,CAAgBP,WAAWQ,MAA3B;AACD;AACA;AACD;AACA;;;;AAIA,QAAON,aAAP,CAAqBO,UAArB,EACA;AACC,UAAOA,UAAP;AAEC,QAAK,QAAL;AACC,WAAO,sBAAP;AACD,QAAK,YAAL;AACC,WAAO,EAAP;AACD,QAAK,YAAL;AACA,QAAK,YAAL;AACC,WAAO,IAAIC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAP;AACD,QAAK,kBAAL;AACC,WAAO,EAAP;AACD;AACC,UAAM,IAAIC,KAAJ,CAAW,iDAAgDF,UAAW,EAAtE,CAAN;AAZF;AAcA;AACD;AACA;;;;;AAKA,QAAOG,kBAAP,CAA0BH,UAA1B,EAAsCI,WAAtC,EACA;AACC,UAAOJ,UAAP;AAEC,QAAK,QAAL;AACC;AACA,WAAS,iBAAOG,kBAAP,CAA0B,eAA1B,EAA2CC,YAAYC,aAAvD,CAAD,IACL,iBAAOF,kBAAP,CAA0B,gBAA1B,EAA4CC,YAAYE,cAAxD,CADK,IAEL,iBAAOH,kBAAP,CAA0B,eAA1B,EAA2CC,YAAYG,aAAvD,CAFK,IAGL,iBAAOJ,kBAAP,CAA0B,cAA1B,EAA0CC,YAAYI,YAAtD,CAHH;AAID,QAAK,YAAL;AACC,WAAQC,OAAOC,IAAP,CAAYN,WAAZ,EAAyBO,MAAzB,KAAoC,CAA5C;AACD,QAAK,YAAL;AACA,QAAK,YAAL;AACC,WAAQP,gBAAgBf,eAAeI,aAAf,CAA6BO,UAA7B,CAAxB;AACD;AACC,UAAM,IAAIE,KAAJ,CAAW,iDAAgDF,UAAW,EAAtE,CAAN;AAdF;AAgBA;AACD;AACA;;;;;AAKA,QAAOD,MAAP,CAAcR,aAAa,EAA3B,EACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AASA,QAAMqB,QAAQ,iCAAmBrB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,SAAQ,IAAIH,OAAOyB,QAAX,CAAoB;AAC3BC,SAAOF,MAAMG,SAAN,IAAmB,EADC;AAE3BC,UAAO,CACN,iBAAOjB,MAAP,CAAca,MAAMpB,MAAN,IAAgB,EAA9B,CADM,EAEN,IAAIJ,OAAO6B,MAAX,CAAkB;AACjBD,WAAO,CACN,IAAI5B,OAAO8B,SAAX,CAAqB;AACpBJ,WAAOF,MAAMlB,UAAN,IAAoB,EADP;AAEpByB,cAAS;AACRC,gBAAU,CADF,EACK;AACbC,iBAAW,CAFH,CAEK;AAFL,MAFW;AAMpBC,qBAAgB,CANI,CAMF;AANE,KAArB,CADM,EAQF;AACJ,QAAIlC,OAAOmC,WAAX,CAAuB;AACtBT,WAAOF,MAAMlB,UAAN,IAAoB,EADL;AAEtByB,cAAS;AACRC,gBAAU,CADF,EACK;AACbC,iBAAW,CAFH,CAEK;AAFL,MAFa;AAMtBL,YAAO,CACN,IAAI5B,OAAOoC,eAAX,EADM,EAEN,IAAIpC,OAAOmC,WAAX,CAAuB;AACtBE,gBAAU,IADY;AAEtBN,eAAS;AACRC,iBAAU,CADF,EACK;AACbC,kBAAW,CAFH,CAEK;AAFL,OAFa;AAMtBL,aAAO,CAAC,IAAI5B,OAAOsC,UAAX,EAAD;AANe,MAAvB,CAFM;AANe,KAAvB,CATM,EA2BN,IAAItC,OAAO8B,SAAX,CAAqB;AACpBJ,WAAOF,MAAMlB,UAAN,IAAoB,EADP;AAEpByB,cAAS;AACRC,gBAAU,CADF,EACK;AACbC,iBAAW,CAFH,CAEK;AAFL,MAFW;AAMpBM,eAAU,EAAEhB,QAAQ,CAAV;AANU,KAArB,CA3BM,CAkCH;AAlCG;AADU,IAAlB,CAFM,EAwCN,IAAIvB,OAAOoC,eAAX,CAA2B,EAAEV,MAAOF,MAAMjB,UAAN,IAAoB,EAA7B,EAA3B,CAxCM,EAyCN,IAAIP,OAAOmC,WAAX,CAAuB;AACtBE,cAAU,IADY;AAEtBN,aAAS;AACRC,eAAU,CADF,EACK;AACbC,gBAAW,CAFH,CAEK;AAFL,KAFa;AAMtBL,WAAO,CAAC,IAAI5B,OAAOoC,eAAX,CAA2B,EAAEV,MAAOF,MAAMhB,UAAN,IAAoB,EAA7B,EAA3B,CAAD;AANe,IAAvB,CAzCM,EAiDN,IAAIR,OAAOmC,WAAX,CAAuB;AACtBE,cAAU,IADY;AAEtBN,aAAS;AACRC,eAAU,CADF,EACK;AACbC,gBAAW,CAFH,CAEK;AAFL,KAFa;AAMtBL,WAAO,CAAC,qBAAWjB,MAAX,CAAkBa,MAAMf,gBAAN,IAA0B,EAA5C,CAAD;AANe,IAAvB,CAjDM,CAwDH;AAxDG;AAFoB,GAApB,CAAR;AA6DA;AACD;AACA;;;;AAIAC,YAAWC,MAAX,EACA;AACC;AACA,2BAAWA,MAAX,EAAmB,CAClB,QADkB,EAElB,YAFkB,EAGlB,YAHkB,EAIlB,YAJkB,EAKlB,kBALkB,CAAnB;AAOA;;AAEA;AACA,QAAM6B,OAAOxC,OAAOyC,aAAP,CAAqB9B,MAArB,EACZA,MADY,EAEZV,eAAeU,MAAf,CAAsB;AACrBa,UAAO;AACNpB,YAAQ;AACPoB,YAAO;AACNG,iBAAW;AADL;AADA,KADF;AAMNrB,gBAAY,YANN;AAONC,gBAAY,YAPN;AAQNC,gBAAY,YARN;AASNC,sBAAkB;AACjBe,YAAO;AACNG,iBACC;AAFK;AADU;AATZ;AADc,GAAtB,CAFY,CAAb;;AAsBA,MAAGa,KAAKE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI5B,KAAJ,CAAU,wEAAV,CAAN;AACD;;AAEA;AACA,OAAKV,MAAL,GAAc,qBAAW,EAAEO,QAAQ6B,KAAKG,MAAL,CAAYvC,MAAtB,EAAX,CAAd;AACA,OAAKE,UAAL,GAAkBkC,KAAKG,MAAL,CAAYrC,UAA9B;AACA,OAAKC,UAAL,GAAkBiC,KAAKG,MAAL,CAAYpC,UAAZ,CAAuBqC,MAAvB,EAAlB;AACA,MAAG,gBAAgBJ,KAAKG,MAAxB,EACC,KAAKnC,UAAL,GAAkBgC,KAAKG,MAAL,CAAYnC,UAAZ,CAAuBoC,MAAvB,EAAlB;;AAED,MAAG,sBAAsBJ,KAAKG,MAA9B,EACC,KAAKlC,gBAAL,GAAwBoC,MAAMC,IAAN,CAAWN,KAAKG,MAAL,CAAYlC,gBAAZ,CAA6BsC,UAA7B,CAAwCnB,KAAnD,EAA0DoB,WAAW,wBAAc,EAAErC,QAAQqC,OAAV,EAAd,CAArE,CAAxB;AACD;AACA;AACD;AACA;;;;AAIAC,YACA;AACC;AACA,QAAMC,cAAc,EAApB;;AAEAA,cAAYC,IAAZ,CAAiB,KAAK/C,MAAL,CAAY6C,QAAZ,EAAjB;AACAC,cAAYC,IAAZ,CAAiB,KAAK7C,UAAtB;AACA4C,cAAYC,IAAZ,CAAiB,IAAInD,OAAOoC,eAAX,CAA2B,EAAEgB,WAAW,KAAK7C,UAAlB,EAA3B,CAAjB;AACA,MAAG,gBAAgB,IAAnB,EACC2C,YAAYC,IAAZ,CAAiB,IAAInD,OAAOoC,eAAX,CAA2B,EAAEgB,WAAW,KAAK5C,UAAlB,EAA3B,CAAjB;;AAED,MAAG,sBAAsB,IAAzB,EACA;AACC0C,eAAYC,IAAZ,CAAiB,IAAInD,OAAOyB,QAAX,CAAoB;AACpCG,WAAOiB,MAAMC,IAAN,CAAW,KAAKrC,gBAAhB,EAAkCuC,WAAWA,QAAQC,QAAR,EAA7C;AAD6B,IAApB,CAAjB;AAGA;AACD;;AAEA;AACA,SAAQ,IAAIjD,OAAOyB,QAAX,CAAoB;AAC3BG,UAAOsB;AADoB,GAApB,CAAR;AAGA;AACA;AACD;AACA;;;;AAIAG,UACA;AACC,QAAMC,UAAU;AACflD,WAAQ,KAAKA,MAAL,CAAYiD,MAAZ,EADO;AAEf/C,eAAY,KAAKA,UAAL,CAAgB+C,MAAhB,EAFG;AAGf9C,eAAY,KAAKA;AAHF,GAAhB;;AAMA,MAAG,gBAAgB,IAAnB,EACC+C,QAAQ9C,UAAR,GAAqB,KAAKA,UAA1B;;AAED,MAAG,sBAAsB,IAAzB,EACC8C,QAAQ7C,gBAAR,GAA2BoC,MAAMC,IAAN,CAAW,KAAKrC,gBAAhB,EAAkCuC,WAAWA,QAAQK,MAAR,EAA7C,CAA3B;;AAED,SAAOC,OAAP;AACA;AACD;AA1SD;kBADqBrD,c,EA6SrB","file":"SingleResponse.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertID from \"./CertID.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class SingleResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SingleResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @description certID\r\n\t\t */\r\n\t\tthis.certID = getParametersValue(parameters, \"certID\", SingleResponse.defaultValues(\"certID\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description certStatus\r\n\t\t */\r\n\t\tthis.certStatus = getParametersValue(parameters, \"certStatus\", SingleResponse.defaultValues(\"certStatus\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @description thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", SingleResponse.defaultValues(\"thisUpdate\"));\r\n\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Date}\r\n\t\t\t * @description nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", SingleResponse.defaultValues(\"nextUpdate\"));\r\n\r\n\t\tif(\"singleExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @description singleExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleExtensions = getParametersValue(parameters, \"singleExtensions\", SingleResponse.defaultValues(\"singleExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"singleExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber)));\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn (memberValue === SingleResponse.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SingleResponse ::= SEQUENCE {\r\n\t\t//    certID                       CertID,\r\n\t\t//    certStatus                   CertStatus,\r\n\t\t//    thisUpdate                   GeneralizedTime,\r\n\t\t//    nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,\r\n\t\t//    singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }\r\n\t\t//\r\n\t\t//CertStatus ::= CHOICE {\r\n\t\t//    good        [0]     IMPLICIT NULL,\r\n\t\t//    revoked     [1]     IMPLICIT RevokedInfo,\r\n\t\t//    unknown     [2]     IMPLICIT UnknownInfo }\r\n\t\t//\r\n\t\t//RevokedInfo ::= SEQUENCE {\r\n\t\t//    revocationTime              GeneralizedTime,\r\n\t\t//    revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }\r\n\t\t//\r\n\t\t//UnknownInfo ::= NULL\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certID]\r\n\t\t * @property {string} [certStatus]\r\n\t\t * @property {string} [thisUpdate]\r\n\t\t * @property {string} [nextUpdate]\r\n\t\t * @property {string} [singleExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.certID || {}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlockLength: 1 // The length contains one byte 0x00\r\n\t\t\t\t\t\t}), // IMPLICIT NULL (no \"valueBlock\")\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.GeneralizedTime(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [new asn1js.Enumerated()]\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlock: { length: 1 }\r\n\t\t\t\t\t\t}) // IMPLICIT NULL (no \"valueBlock\")\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.thisUpdate || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.GeneralizedTime({ name: (names.nextUpdate || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.singleExtensions || {})]\r\n\t\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certID\",\r\n\t\t\t\"certStatus\",\r\n\t\t\t\"thisUpdate\",\r\n\t\t\t\"nextUpdate\",\r\n\t\t\t\"singleExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSingleResponse.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcertID: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"certID\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcertStatus: \"certStatus\",\r\n\t\t\t\t\tthisUpdate: \"thisUpdate\",\r\n\t\t\t\t\tnextUpdate: \"nextUpdate\",\r\n\t\t\t\t\tsingleExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName:\r\n\t\t\t\t\t\t\t\t\"singleExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SingleResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certID = new CertID({ schema: asn1.result.certID });\r\n\t\tthis.certStatus = asn1.result.certStatus;\r\n\t\tthis.thisUpdate = asn1.result.thisUpdate.toDate();\r\n\t\tif(\"nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = asn1.result.nextUpdate.toDate();\r\n\r\n\t\tif(\"singleExtensions\" in asn1.result)\r\n\t\t\tthis.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create value array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.certID.toSchema());\r\n\t\toutputArray.push(this.certStatus);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.thisUpdate }));\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.nextUpdate }));\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.singleExtensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcertID: this.certID.toJSON(),\r\n\t\t\tcertStatus: this.certStatus.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate\r\n\t\t};\r\n\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\t_object.nextUpdate = this.nextUpdate;\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t\t_object.singleExtensions = Array.from(this.singleExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}