{"version":3,"sources":["../src/EncapsulatedContentInfo.js"],"names":["asn1js","EncapsulatedContentInfo","constructor","parameters","eContentType","defaultValues","eContent","idBlock","tagClass","tagNumber","isConstructed","constrString","OctetString","offset","length","valueBlock","valueHex","byteLength","pieceView","Uint8Array","_array","ArrayBuffer","_view","i","value","push","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","isEqual","names","Sequence","name","blockName","ObjectIdentifier","Constructed","optional","Any","asn1","compareSchema","verified","result","toString","toSchema","outputArray","toJSON","_object"],"mappings":"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","file":"EncapsulatedContentInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncapsulatedContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncapsulatedContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description eContentType\r\n\t\t */\r\n\t\tthis.eContentType = getParametersValue(parameters, \"eContentType\", EncapsulatedContentInfo.defaultValues(\"eContentType\"));\r\n\r\n\t\tif(\"eContent\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @description eContent\r\n\t\t\t */\r\n\t\t\tthis.eContent = getParametersValue(parameters, \"eContent\", EncapsulatedContentInfo.defaultValues(\"eContent\"));\r\n\t\t\tif((this.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t(this.eContent.idBlock.tagNumber === 4))\r\n\t\t\t{\r\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\r\n\t\t\t\tif(this.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\r\n\t\t\t\t\t\tidBlock: { isConstructed: true },\r\n\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tlet length = this.eContent.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile(length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.eContent.valueBlock.valueHex, offset, ((offset + 65536) > this.eContent.valueBlock.valueHex.byteLength) ? (this.eContent.valueBlock.valueHex.byteLength - offset) : 65536);\r\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\r\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let i = 0; i < _view.length; i++)\r\n\t\t\t\t\t\t\t_view[i] = pieceView[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlength -= pieceView.length;\r\n\t\t\t\t\t\toffset += pieceView.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.eContent = constrString;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"eContentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"eContent\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncapsulatedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"eContentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"eContent\":\r\n\t\t\t\t{\r\n\t\t\t\t\tif((memberValue.idBlock.tagClass === 1) && (memberValue.idBlock.tagNumber === 4))\r\n\t\t\t\t\t\treturn (memberValue.isEqual(EncapsulatedContentInfo.defaultValues(\"eContent\")));\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncapsulatedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//EncapsulatedContentInfo ::= SEQUENCE {\r\n\t\t//    eContentType ContentType,\r\n\t\t//    eContent [0] EXPLICIT OCTET STRING OPTIONAL } // Changed it to ANY, as in PKCS#7\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.eContentType || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Any({ name: (names.eContent || \"\") }) // In order to aling this with PKCS#7 and CMS as well\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"eContentType\",\r\n\t\t\t\"eContent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncapsulatedContentInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\teContentType: \"eContentType\",\r\n\t\t\t\t\teContent: \"eContent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncapsulatedContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.eContentType = asn1.result.eContentType.valueBlock.toString();\r\n\t\tif(\"eContent\" in asn1.result)\r\n\t\t\tthis.eContent = asn1.result.eContent;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.eContentType }));\r\n\t\tif(\"eContent\" in this)\r\n\t\t{\r\n\t\t\tif(EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.eContent]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\teContentType: this.eContentType\r\n\t\t};\r\n\r\n\t\tif(\"eContent\" in this)\r\n\t\t{\r\n\t\t\tif(EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false)\r\n\t\t\t\t_object.eContent = this.eContent.toJSON();\r\n\t\t}\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}