{"version":3,"sources":["../src/CertBag.js"],"names":["asn1js","CertBag","constructor","parameters","certId","defaultValues","certValue","parsedValue","fromSchema","schema","memberName","Any","Error","compareWithDefault","memberValue","Object","keys","length","names","Sequence","name","blockName","value","ObjectIdentifier","id","Constructed","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","toString","asn1Inner","fromBER","valueHex","ex","toSchema","OctetString","toBER","toJSON"],"mappings":"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","file":"CertBag.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class CertBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description certId\r\n\t\t */\r\n\t\tthis.certId = getParametersValue(parameters, \"certId\", CertBag.defaultValues(\"certId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @description certValue\r\n\t\t */\r\n\t\tthis.certValue = getParametersValue(parameters, \"certValue\", CertBag.defaultValues(\"certValue\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", CertBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"certValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"certValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertBag ::= SEQUENCE {\r\n\t\t//    certId    BAG-TYPE.&id   ({CertTypes}),\r\n\t\t//    certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certId\",\r\n\t\t\t\"certValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"certId\",\r\n\t\t\t\t\tvalue: \"certValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertBag\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get internal properties from parsed schema \r\n\t\tthis.certId = asn1.result.certId.valueBlock.toString();\r\n\t\tthis.certValue = asn1.result.certValue;\r\n\t\t\r\n\t\tswitch(this.certId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.9.22.1\": // x509Certificate\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.parsedValue = new Certificate({ schema: asn1Inner.result });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex) // In some realizations the same OID used for attribute certificates\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.parsedValue = new AttributeCertificateV2({ schema: asn1Inner.result });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.9.22.3\": // attributeCertificate - (!!!) THIS OID IS SUBJECT FOR CHANGE IN FUTURE (!!!)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1Inner = asn1js.fromBER(this.certValue.valueBlock.valueHex);\r\n\t\t\t\t\tthis.parsedValue = new AttributeCertificateV2({ schema: asn1Inner.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.9.22.2\": // sdsiCertificate\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect \"certId\" value in CertBag: ${this.certId}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tif(\"parsedValue\" in this)\r\n\t\t{\r\n\t\t\tif(\"acinfo\" in this.parsedValue) // attributeCertificate\r\n\t\t\t\tthis.certId = \"1.2.840.113549.1.9.22.3\";\r\n\t\t\telse // x509Certificate\r\n\t\t\t\tthis.certId = \"1.2.840.113549.1.9.22.1\";\r\n\r\n\t\t\tthis.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\r\n\t\t}\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.certId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [((\"toSchema\" in this.certValue) ? this.certValue.toSchema() : this.certValue)]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertId: this.certId,\r\n\t\t\tcertValue: this.certValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}