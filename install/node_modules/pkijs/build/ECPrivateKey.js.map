{"version":3,"sources":["../src/ECPrivateKey.js"],"names":["asn1js","ECPrivateKey","constructor","parameters","version","defaultValues","privateKey","namedCurve","publicKey","fromSchema","schema","fromJSON","json","memberName","OctetString","Error","compareWithDefault","memberValue","isEqual","x","y","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","ObjectIdentifier","BitString","asn1","compareSchema","verified","result","valueBlock","valueDec","toString","publicKeyData","valueHex","toSchema","outputArray","push","toBER","toJSON","crvName","privateKeyJSON","crv","d","publicKeyJSON","coodinateLength","toUpperCase","convertBuffer","byteLength","buffer","ArrayBuffer","view","Uint8Array","convertBufferView","set","slice"],"mappings":"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","file":"ECPrivateKey.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\nimport ECPublicKey from \"./ECPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5915\r\n */\r\nexport default class ECPrivateKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECCPrivateKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", ECPrivateKey.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", ECPrivateKey.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"namedCurve\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {string}\r\n\t\t\t * @description namedCurve\r\n\t\t\t */\r\n\t\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPrivateKey.defaultValues(\"namedCurve\"));\r\n\r\n\t\tif(\"publicKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPublicKey}\r\n\t\t\t * @description publicKey\r\n\t\t\t */\r\n\t\t\tthis.publicKey = getParametersValue(parameters, \"publicKey\", ECPrivateKey.defaultValues(\"publicKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn new ECPublicKey();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === ECPrivateKey.defaultValues(memberName));\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn ((ECPublicKey.compareWithDefault(\"namedCurve\", memberValue.namedCurve)) &&\r\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\r\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// ECPrivateKey ::= SEQUENCE {\r\n\t\t// version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\r\n\t\t// privateKey     OCTET STRING,\r\n\t\t// parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\r\n\t\t// publicKey  [1] BIT STRING OPTIONAL\r\n\t\t// }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [namedCurve]\r\n\t\t * @property {string} [publicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.namedCurve || \"\") })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.BitString({ name: (names.publicKey || \"\") })\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"privateKey\",\r\n\t\t\t\"namedCurve\",\r\n\t\t\t\"publicKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tECPrivateKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tnamedCurve: \"namedCurve\",\r\n\t\t\t\t\tpublicKey: \"publicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPrivateKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"namedCurve\" in asn1.result)\r\n\t\t\tthis.namedCurve = asn1.result.namedCurve.valueBlock.toString();\r\n\r\n\t\tif(\"publicKey\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\r\n\t\t\tif(\"namedCurve\" in this)\r\n\t\t\t\tpublicKeyData.namedCurve = this.namedCurve;\r\n\r\n\t\t\tthis.publicKey = new ECPublicKey(publicKeyData);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"namedCurve\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.namedCurve })\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"publicKey\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(((\"namedCurve\" in this) === false) || (ECPrivateKey.compareWithDefault(\"namedCurve\", this.namedCurve)))\r\n\t\t\tthrow new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\r\n\r\n\t\tlet crvName = \"\";\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcrvName = \"P-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcrvName = \"P-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcrvName = \"P-521\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst privateKeyJSON = {\r\n\t\t\tcrv: crvName,\r\n\t\t\td: toBase64(arrayBufferToString(this.privateKey.valueBlock.valueHex), true, true, false)\r\n\t\t};\r\n\r\n\t\tif(\"publicKey\" in this)\r\n\t\t{\r\n\t\t\tconst publicKeyJSON = this.publicKey.toJSON();\r\n\r\n\t\t\tprivateKeyJSON.x = publicKeyJSON.x;\r\n\t\t\tprivateKeyJSON.y = publicKeyJSON.y;\r\n\t\t}\r\n\r\n\t\treturn privateKeyJSON;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coodinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.crv.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"P-256\":\r\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\t\tcoodinateLength = 32;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-384\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\r\n\t\t\t\t\tcoodinateLength = 48;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-521\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\r\n\t\t\t\t\tcoodinateLength = 66;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.d, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tconst buffer = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(buffer);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t\t\r\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: buffer });\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: convertBuffer.slice(0, coodinateLength) });\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif((\"x\" in json) && (\"y\" in json))\r\n\t\t\tthis.publicKey = new ECPublicKey({ json });\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}