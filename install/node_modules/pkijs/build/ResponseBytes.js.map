{"version":3,"sources":["../src/ResponseBytes.js"],"names":["asn1js","ResponseBytes","constructor","parameters","responseType","defaultValues","response","fromSchema","schema","memberName","OctetString","Error","compareWithDefault","memberValue","isEqual","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":"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","file":"ResponseBytes.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class ResponseBytes\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ResponseBytes class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description responseType\r\n\t\t */\r\n\t\tthis.responseType = getParametersValue(parameters, \"responseType\", ResponseBytes.defaultValues(\"responseType\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description response\r\n\t\t */\r\n\t\tthis.response = getParametersValue(parameters, \"response\", ResponseBytes.defaultValues(\"response\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"response\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ResponseBytes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"response\":\r\n\t\t\t\treturn (memberValue.isEqual(ResponseBytes.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ResponseBytes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//ResponseBytes ::=       SEQUENCE {\r\n\t\t//    responseType   OBJECT IDENTIFIER,\r\n\t\t//    response       OCTET STRING }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [responseType]\r\n\t\t * @property {string} [response]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.responseType || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.response || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"responseType\",\r\n\t\t\t\"response\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tResponseBytes.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tresponseType: \"responseType\",\r\n\t\t\t\t\tresponse: \"response\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ResponseBytes\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.responseType = asn1.result.responseType.valueBlock.toString();\r\n\t\tthis.response = asn1.result.response;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.responseType }),\r\n\t\t\t\tthis.response\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tresponseType: this.responseType,\r\n\t\t\tresponse: this.response.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}