{"version":3,"sources":["../src/RevocationInfoChoices.js"],"names":["asn1js","RevocationInfoChoices","constructor","parameters","crls","defaultValues","otherRevocationInfos","fromSchema","schema","memberName","Error","names","Set","name","blockName","value","Repeated","Choice","Constructed","idBlock","tagClass","tagNumber","ObjectIdentifier","Any","asn1","compareSchema","verified","result","element","push","toSchema","outputArray","Array","from","toJSON"],"mappings":"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","file":"RevocationInfoChoices.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RevocationInfoChoices \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RevocationInfoChoices class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @description crls\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", RevocationInfoChoices.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array.<OtherRevocationInfoFormat>}\r\n\t\t * @description otherRevocationInfos\r\n\t\t */\r\n\t\tthis.otherRevocationInfos = getParametersValue(parameters, \"otherRevocationInfos\", RevocationInfoChoices.defaultValues(\"otherRevocationInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"otherRevocationInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevocationInfoChoices class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//RevocationInfoChoices ::= SET OF RevocationInfoChoice\r\n\t\t\r\n\t\t//RevocationInfoChoice ::= CHOICE {\r\n\t\t//    crl CertificateList,\r\n\t\t//    other [1] IMPLICIT OtherRevocationInfoFormat }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [crls]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.crls || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tCertificateRevocationList.schema(),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"crls\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRevocationInfoChoices.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcrls: \"crls\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RevocationInfoChoices\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tfor(const element of asn1.result.crls)\r\n\t\t{\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\tthis.crls.push(new CertificateRevocationList({ schema: element }));\r\n\t\t\telse\r\n\t\t\t\tthis.otherRevocationInfos.push(new OtherRevocationInfoFormat({ schema: element }));\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output set\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(...Array.from(this.crls, element => element.toSchema()));\r\n\t\t\r\n\t\toutputArray.push(...Array.from(this.otherRevocationInfos, element =>\r\n\t\t{\r\n\t\t\tconst schema = element.toSchema();\r\n\t\t\t\r\n\t\t\tschema.idBlock.tagClass = 3;\r\n\t\t\tschema.idBlock.tagNumber = 1;\r\n\t\t\t\r\n\t\t\treturn schema;\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcrls: Array.from(this.crls, element => element.toJSON()),\r\n\t\t\totherRevocationInfos: Array.from(this.otherRevocationInfos, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}