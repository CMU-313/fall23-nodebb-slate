{"version":3,"sources":["../src/OtherCertificateFormat.js"],"names":["asn1js","OtherCertificateFormat","constructor","parameters","otherCertFormat","defaultValues","otherCert","fromSchema","schema","memberName","Any","Error","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON","object"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;;;AACA;AACA;;;AAGe,MAAMC,sBAAN,CACf;AACC;AACA;;;;;AAKAC,aAAYC,aAAa,EAAzB,EACA;AACC;AACA;;;;AAIA,OAAKC,eAAL,GAAuB,iCAAmBD,UAAnB,EAA+B,iBAA/B,EAAkDF,uBAAuBI,aAAvB,CAAqC,iBAArC,CAAlD,CAAvB;AACA;;;;AAIA,OAAKC,SAAL,GAAiB,iCAAmBH,UAAnB,EAA+B,WAA/B,EAA4CF,uBAAuBI,aAAvB,CAAqC,WAArC,CAA5C,CAAjB;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,WAAWK,MAA3B;AACD;AACA;AACD;AACA;;;;AAIA,QAAOH,aAAP,CAAqBI,UAArB,EACA;AACC,UAAOA,UAAP;AAEC,QAAK,iBAAL;AACC,WAAO,EAAP;AACD,QAAK,WAAL;AACC,WAAO,IAAIT,OAAOU,GAAX,EAAP;AACD;AACC,UAAM,IAAIC,KAAJ,CAAW,yDAAwDF,UAAW,EAA9E,CAAN;AAPF;AASA;AACD;AACA;;;;;AAKA,QAAOD,MAAP,CAAcL,aAAa,EAA3B,EACA;AACC;AACA;AACA;;AAEA;;;;;;AAMA,QAAMS,QAAQ,iCAAmBT,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,SAAQ,IAAIH,OAAOa,QAAX,CAAoB;AAC3BC,SAAOF,MAAMG,SAAN,IAAmB,EADC;AAE3BC,UAAO,CACN,IAAIhB,OAAOiB,gBAAX,CAA4B,EAAEH,MAAOF,MAAMR,eAAN,IAAyB,iBAAlC,EAA5B,CADM,EAEN,IAAIJ,OAAOU,GAAX,CAAe,EAAEI,MAAOF,MAAMN,SAAN,IAAmB,WAA5B,EAAf,CAFM;AAFoB,GAApB,CAAR;AAOA;AACD;AACA;;;;AAIAC,YAAWC,MAAX,EACA;AACC;AACA,2BAAWA,MAAX,EAAmB,CAClB,iBADkB,EAElB,WAFkB,CAAnB;AAIA;;AAEA;AACA,QAAMU,OAAOlB,OAAOmB,aAAP,CAAqBX,MAArB,EACZA,MADY,EAEZP,uBAAuBO,MAAvB,EAFY,CAAb;;AAKA,MAAGU,KAAKE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIT,KAAJ,CAAU,gFAAV,CAAN;AACD;;AAEA;AACA,OAAKP,eAAL,GAAuBc,KAAKG,MAAL,CAAYjB,eAAZ,CAA4BkB,UAA5B,CAAuCC,QAAvC,EAAvB;AACA,OAAKjB,SAAL,GAAiBY,KAAKG,MAAL,CAAYf,SAA7B;AACA;AACA;AACD;AACA;;;;AAIAkB,YACA;AACC;AACA,SAAQ,IAAIxB,OAAOa,QAAX,CAAoB;AAC3BG,UAAO,CACN,IAAIhB,OAAOiB,gBAAX,CAA4B,EAAED,OAAO,KAAKZ,eAAd,EAA5B,CADM,EAEN,KAAKE,SAFC;AADoB,GAApB,CAAR;AAMA;AACA;AACD;AACA;;;;AAIAmB,UACA;AACC,QAAMC,SAAS;AACdtB,oBAAiB,KAAKA;AADR,GAAf;;AAIA,MAAG,EAAE,KAAKE,SAAL,YAA0BN,OAAOU,GAAnC,CAAH,EACCgB,OAAOpB,SAAP,GAAmB,KAAKA,SAAL,CAAemB,MAAf,EAAnB;;AAED,SAAOC,MAAP;AACA;AACD;AArID;kBADqBzB,sB,EAwIrB","file":"OtherCertificateFormat.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherCertificateFormat\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherCertificateFormat class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description otherCertFormat\r\n\t\t */\r\n\t\tthis.otherCertFormat = getParametersValue(parameters, \"otherCertFormat\", OtherCertificateFormat.defaultValues(\"otherCertFormat\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @description otherCert\r\n\t\t */\r\n\t\tthis.otherCert = getParametersValue(parameters, \"otherCert\", OtherCertificateFormat.defaultValues(\"otherCert\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"otherCertFormat\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"otherCert\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherCertificateFormat class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OtherCertificateFormat ::= SEQUENCE {\r\n\t\t//    otherCertFormat OBJECT IDENTIFIER,\r\n\t\t//    otherCert ANY DEFINED BY otherCertFormat }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [otherCertFormat]\r\n\t\t * @property {string} [otherCert]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.otherCertFormat || \"otherCertFormat\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.otherCert || \"otherCert\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"otherCertFormat\",\r\n\t\t\t\"otherCert\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherCertificateFormat.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherCertificateFormat\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();\r\n\t\tthis.otherCert = asn1.result.otherCert;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.otherCertFormat }),\r\n\t\t\t\tthis.otherCert\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\totherCertFormat: this.otherCertFormat\r\n\t\t};\r\n\r\n\t\tif(!(this.otherCert instanceof asn1js.Any))\r\n\t\t\tobject.otherCert = this.otherCert.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}