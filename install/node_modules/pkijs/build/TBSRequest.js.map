{"version":3,"sources":["../src/TBSRequest.js"],"names":["asn1js","TBSRequest","constructor","parameters","tbs","defaultValues","version","requestorName","requestList","requestExtensions","fromSchema","schema","memberName","ArrayBuffer","Error","compareWithDefault","memberValue","byteLength","type","Object","keys","value","length","names","Sequence","name","blockName","Constructed","optional","idBlock","tagClass","tagNumber","Integer","TBSRequestVersion","Repeated","requests","requestNames","extensions","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","toSchema","encodeFlag","tbsSchema","fromBER","outputArray","push","toJSON","_object"],"mappings":"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","file":"TBSRequest.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport Request from \"./Request.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class TBSRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TBSRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", TBSRequest.defaultValues(\"tbs\"));\r\n\r\n\t\tif(\"version\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @description version\r\n\t\t\t */\r\n\t\t\tthis.version = getParametersValue(parameters, \"version\", TBSRequest.defaultValues(\"version\"));\r\n\r\n\t\tif(\"requestorName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @description requestorName\r\n\t\t\t */\r\n\t\t\tthis.requestorName = getParametersValue(parameters, \"requestorName\", TBSRequest.defaultValues(\"requestorName\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<Request>}\r\n\t\t * @description requestList\r\n\t\t */\r\n\t\tthis.requestList = getParametersValue(parameters, \"requestList\", TBSRequest.defaultValues(\"requestList\"));\r\n\r\n\t\tif(\"requestExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @description requestExtensions\r\n\t\t\t */\r\n\t\t\tthis.requestExtensions = getParametersValue(parameters, \"requestExtensions\", TBSRequest.defaultValues(\"requestExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"requestorName\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"requestList\":\r\n\t\t\tcase \"requestExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TBSRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === TBSRequest.defaultValues(memberName));\r\n\t\t\tcase \"requestorName\":\r\n\t\t\t\treturn ((memberValue.type === GeneralName.defaultValues(\"type\")) && (Object.keys(memberValue.value).length === 0));\r\n\t\t\tcase \"requestList\":\r\n\t\t\tcase \"requestExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TBSRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//TBSRequest      ::=     SEQUENCE {\r\n\t\t//    version             [0]     EXPLICIT Version DEFAULT v1,\r\n\t\t//    requestorName       [1]     EXPLICIT GeneralName OPTIONAL,\r\n\t\t//    requestList                 SEQUENCE OF Request,\r\n\t\t//    requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [TBSRequestVersion]\r\n\t\t * @property {string} [requestorName]\r\n\t\t * @property {string} [requestList]\r\n\t\t * @property {string} [requests]\r\n\t\t * @property {string} [requestNames]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [requestExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TBSRequest\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.TBSRequestVersion || \"TBSRequest.version\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.requestorName || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TBSRequest.requestorName\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.requestList || \"TBSRequest.requestList\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.requests || \"TBSRequest.requests\"),\r\n\t\t\t\t\t\t\tvalue: Request.schema(names.requestNames || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.requestExtensions || \"TBSRequest.requestExtensions\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TBSRequest\",\r\n\t\t\t\"TBSRequest.version\",\r\n\t\t\t\"TBSRequest.requestorName\",\r\n\t\t\t\"TBSRequest.requests\",\r\n\t\t\t\"TBSRequest.requestExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTBSRequest.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TBSRequest\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.TBSRequest.valueBeforeDecode;\r\n\r\n\t\tif(\"TBSRequest.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"TBSRequest.version\"].valueBlock.valueDec;\r\n\t\tif(\"TBSRequest.requestorName\" in asn1.result)\r\n\t\t\tthis.requestorName = new GeneralName({ schema: asn1.result[\"TBSRequest.requestorName\"] });\r\n\r\n\t\tthis.requestList = Array.from(asn1.result[\"TBSRequest.requests\"], element => new Request({ schema: element }));\r\n\r\n\t\tif(\"TBSRequest.requestExtensions\" in asn1.result)\r\n\t\t\tthis.requestExtensions = Array.from(asn1.result[\"TBSRequest.requestExtensions\"].valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.byteLength === 0) // No stored TBS part\r\n\t\t\t\treturn TBSRequest.schema();\r\n\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst outputArray = [];\r\n\r\n\t\t\tif(\"version\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\tif(\"requestorName\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.requestorName.toSchema()]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.requestList, element => element.toSchema())\r\n\t\t\t}));\r\n\r\n\t\t\tif(\"requestExtensions\" in this)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: Array.from(this.requestExtensions, element => element.toSchema())\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\r\n\t\t\ttbsSchema = new asn1js.Sequence({\r\n\t\t\t\tvalue: outputArray\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn tbsSchema;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\r\n\t\tif(\"version\" in this)\r\n\t\t\t_object.version = this.version;\r\n\r\n\t\tif(\"requestorName\" in this)\r\n\t\t\t_object.requestorName = this.requestorName.toJSON();\r\n\r\n\t\t_object.requestList = Array.from(this.requestList, element => element.toJSON());\r\n\r\n\t\tif(\"requestExtensions\" in this)\r\n\t\t\t_object.requestExtensions = Array.from(this.requestExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}