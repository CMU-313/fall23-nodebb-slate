{"version":3,"sources":["../src/AuthorityKeyIdentifier.js"],"names":["asn1js","AuthorityKeyIdentifier","constructor","parameters","keyIdentifier","defaultValues","authorityCertIssuer","authorityCertSerialNumber","fromSchema","schema","memberName","OctetString","Integer","Error","names","Sequence","name","blockName","value","Primitive","optional","idBlock","tagClass","tagNumber","Constructed","Repeated","asn1","compareSchema","verified","result","valueHex","valueBlock","Array","from","element","toSchema","outputArray","push","toJSON","object"],"mappings":"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","file":"AuthorityKeyIdentifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AuthorityKeyIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AuthorityKeyIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"keyIdentifier\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @description keyIdentifier\r\n\t\t\t */\r\n\t\t\tthis.keyIdentifier = getParametersValue(parameters, \"keyIdentifier\", AuthorityKeyIdentifier.defaultValues(\"keyIdentifier\"));\r\n\r\n\t\tif(\"authorityCertIssuer\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralName>}\r\n\t\t\t * @description authorityCertIssuer\r\n\t\t\t */\r\n\t\t\tthis.authorityCertIssuer = getParametersValue(parameters, \"authorityCertIssuer\", AuthorityKeyIdentifier.defaultValues(\"authorityCertIssuer\"));\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @description authorityCertIssuer\r\n\t\t\t */\r\n\t\t\tthis.authorityCertSerialNumber = getParametersValue(parameters, \"authorityCertSerialNumber\", AuthorityKeyIdentifier.defaultValues(\"authorityCertSerialNumber\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"authorityCertIssuer\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"authorityCertSerialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthorityKeyIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// AuthorityKeyIdentifier OID ::= 2.5.29.35\r\n\t\t//\r\n\t\t//AuthorityKeyIdentifier ::= SEQUENCE {\r\n\t\t//    keyIdentifier             [0] KeyIdentifier           OPTIONAL,\r\n\t\t//    authorityCertIssuer       [1] GeneralNames            OPTIONAL,\r\n\t\t//    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\r\n\t\t//\r\n\t\t//KeyIdentifier ::= OCTET STRING\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyIdentifier]\r\n\t\t * @property {string} [authorityCertIssuer]\r\n\t\t * @property {string} [authorityCertSerialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.keyIdentifier || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.authorityCertIssuer || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.authorityCertSerialNumber || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyIdentifier\",\r\n\t\t\t\"authorityCertIssuer\",\r\n\t\t\t\"authorityCertSerialNumber\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAuthorityKeyIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyIdentifier: \"keyIdentifier\",\r\n\t\t\t\t\tauthorityCertIssuer: \"authorityCertIssuer\",\r\n\t\t\t\t\tauthorityCertSerialNumber: \"authorityCertSerialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AuthorityKeyIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"keyIdentifier\" in asn1.result)\r\n\t\t\tthis.keyIdentifier = new asn1js.OctetString({ valueHex: asn1.result.keyIdentifier.valueBlock.valueHex });\r\n\r\n\t\tif(\"authorityCertIssuer\" in asn1.result)\r\n\t\t\tthis.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, element => new GeneralName({ schema: element }));\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in asn1.result)\r\n\t\t\tthis.authorityCertSerialNumber = new asn1js.Integer({ valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"keyIdentifier\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.keyIdentifier.valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"authorityCertIssuer\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.authorityCertIssuer, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"authorityCertSerialNumber\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.authorityCertSerialNumber.valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"keyIdentifier\" in this)\r\n\t\t\tobject.keyIdentifier = this.keyIdentifier.toJSON();\r\n\r\n\t\tif(\"authorityCertIssuer\" in this)\r\n\t\t\tobject.authorityCertIssuer = Array.from(this.authorityCertIssuer, element => element.toJSON());\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in this)\r\n\t\t\tobject.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}