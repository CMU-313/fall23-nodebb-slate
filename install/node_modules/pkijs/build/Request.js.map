{"version":3,"sources":["../src/Request.js"],"names":["asn1js","Request","constructor","parameters","reqCert","defaultValues","singleRequestExtensions","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","isEqual","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","extensions","asn1","compareSchema","verified","result","Array","from","valueBlock","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"Request.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertID from \"./CertID.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class Request\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Request class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @description reqCert\r\n\t\t */\r\n\t\tthis.reqCert = getParametersValue(parameters, \"reqCert\", Request.defaultValues(\"reqCert\"));\r\n\r\n\t\tif(\"singleRequestExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @description singleRequestExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleRequestExtensions = getParametersValue(parameters, \"singleRequestExtensions\", Request.defaultValues(\"singleRequestExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"reqCert\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"singleRequestExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Request class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"reqCert\":\r\n\t\t\t\treturn (memberValue.isEqual(Request.defaultValues(memberName)));\r\n\t\t\tcase \"singleRequestExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Request class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//Request         ::=     SEQUENCE {\r\n\t\t//    reqCert                     CertID,\r\n\t\t//    singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [reqCert]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [singleRequestExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.reqCert || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extension.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.singleRequestExtensions || \"\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"reqCert\",\r\n\t\t\t\"singleRequestExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRequest.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\treqCert: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"reqCert\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsingleRequestExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"singleRequestExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Request\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.reqCert = new CertID({ schema: asn1.result.reqCert });\r\n\r\n\t\tif(\"singleRequestExtensions\" in asn1.result)\r\n\t\t\tthis.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.reqCert.toSchema());\r\n\r\n\t\tif(\"singleRequestExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.singleRequestExtensions, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\treqCert: this.reqCert.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"singleRequestExtensions\" in this)\r\n\t\t\t_object.singleRequestExtensions = Array.from(this.singleRequestExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}