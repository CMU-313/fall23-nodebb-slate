{"version":3,"sources":["../src/OCSPRequest.js"],"names":["asn1js","OCSPRequest","constructor","parameters","tbsRequest","defaultValues","optionalSignature","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","tbs","version","requestorName","requestList","requestExtensions","signatureAlgorithm","signature","certs","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","toSchema","encodeFlag","outputArray","push","toJSON","_object","createForCertificate","certificate","sequence","Promise","resolve","certID","then","reqCert","error","reject","sign","privateKey","hashAlgorithm","engine","subtle","getSignatureParameters","toBER","signWithPrivateKey","BitString","valueHex","verify"],"mappings":"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","file":"OCSPRequest.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport TBSRequest from \"./TBSRequest.js\";\r\nimport Signature from \"./Signature.js\";\r\nimport Request from \"./Request.js\";\r\nimport CertID from \"./CertID.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPRequest \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {TBSRequest}\r\n\t\t * @description tbsRequest\r\n\t\t */\r\n\t\tthis.tbsRequest = getParametersValue(parameters, \"tbsRequest\", OCSPRequest.defaultValues(\"tbsRequest\"));\r\n\t\t\r\n\t\tif(\"optionalSignature\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Signature}\r\n\t\t\t * @description optionalSignature\r\n\t\t\t */\r\n\t\t\tthis.optionalSignature = getParametersValue(parameters, \"optionalSignature\", OCSPRequest.defaultValues(\"optionalSignature\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\treturn new TBSRequest();\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn new Signature();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"version\", memberValue.version)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions)));\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn ((Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm)) &&\r\n\t\t\t\t(Signature.compareWithDefault(\"signature\", memberValue.signature)) &&\r\n\t\t\t\t(Signature.compareWithDefault(\"certs\", memberValue.certs)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OCSPRequest     ::=     SEQUENCE {\r\n\t\t//    tbsRequest                  TBSRequest,\r\n\t\t//    optionalSignature   [0]     EXPLICIT Signature OPTIONAL }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsRequest]\r\n\t\t * @property {string} [optionalSignature]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: names.blockName || \"OCSPRequest\",\r\n\t\t\tvalue: [\r\n\t\t\t\tTBSRequest.schema(names.tbsRequest || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsRequest\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tSignature.schema(names.optionalSignature || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"optionalSignature\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsRequest\",\r\n\t\t\t\"optionalSignature\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPRequest.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSPRequest\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsRequest = new TBSRequest({ schema: asn1.result.tbsRequest });\r\n\t\tif(\"optionalSignature\" in asn1.result)\r\n\t\t\tthis.optionalSignature = new Signature({ schema: asn1.result.optionalSignature });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsRequest.toSchema(encodeFlag));\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\toutputArray.push(this.optionalSignature.toSchema());\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsRequest: this.tbsRequest.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\t_object.optionalSignature = this.optionalSignature.toJSON();\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP Request for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst certID = new CertID();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create OCSP certificate identifier for the certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcertID.createForCertificate(certificate, parameters)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make final request data\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbsRequest = new TBSRequest({\r\n\t\t\t\trequestList: [\r\n\t\t\t\t\tnew Request({\r\n\t\t\t\t\t\treqCert: certID\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Request\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Check private key\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that \"optionalSignature\" exists in the current request\r\n\t\tif((\"optionalSignature\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Need to create \\\"optionalSignature\\\" field before signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tlet tbs;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.optionalSignature.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\ttbs = this.tbsRequest.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.optionalSignature.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify()\r\n\t{\r\n\t\t// TODO: Create the function\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}