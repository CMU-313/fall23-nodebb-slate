{"version":3,"sources":["../src/common.js"],"names":["setEngine","getEngine","getCrypto","getRandomValues","getOIDByAlgorithm","getAlgorithmParameters","createCMSECDSASignature","stringPrep","createECDSASignatureFromCMS","getAlgorithmByOID","getHashAlgorithm","kdfWithCounter","kdf","asn1js","engine","name","crypto","subtle","process","global","pid","Error","pkijs","_engine","ex","initCryptoEngine","self","engineName","cryptoObject","subtleObject","webkitSubtle","undefined","view","algorithm","algorithmName","operation","signatureBuffer","byteLength","ArrayBuffer","length","rBuffer","rView","Uint8Array","set","rInteger","Integer","valueHex","sBuffer","sView","sInteger","Sequence","value","convertToDER","toBER","inputString","isSpace","cuttedResult","result","trim","i","charCodeAt","toLowerCase","cmsSignature","valueBlock","rValue","convertFromDER","sValue","correctedLength","rValueView","rValueBufferCorrected","rValueViewCorrected","sValueView","sValueBufferCorrected","sValueViewCorrected","oid","signatureAlgorithm","hashFunction","Zbuffer","Counter","SharedInfo","toUpperCase","Promise","reject","counterBuffer","counterView","combinedBuffer","digest","then","counter","keydatalen","hashLength","maxCounter","kdfArray","quotient","Math","floor","push","all","incomingResult","currentCounter","found","newBuffer","newView","combinedView"],"mappings":"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","file":"common.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { utilConcatBuf } from \"pvutils\";\r\nimport CryptoEngine from \"./CryptoEngine.js\";\r\n//**************************************************************************************\r\n//region Crypto engine related function\r\n//**************************************************************************************\r\nlet engine = {\r\n\tname: \"none\",\r\n\tcrypto: null,\r\n\tsubtle: null\r\n};\r\n//**************************************************************************************\r\nexport function setEngine(name, crypto, subtle)\r\n{\r\n\t//region We are in Node\r\n\t// noinspection JSUnresolvedVariable\r\n\tif((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\"))\r\n\t{\r\n\t\t// noinspection ES6ModulesDependencies, JSUnresolvedVariable\r\n\t\tif(typeof global[process.pid] === \"undefined\")\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tglobal[process.pid] = {};\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tif(typeof global[process.pid] !== \"object\")\r\n\t\t\t{\r\n\t\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t\tthrow new Error(`Name global.${process.pid} already exists and it is not an object`);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tif(typeof global[process.pid].pkijs === \"undefined\")\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tglobal[process.pid].pkijs = {};\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tif(typeof global[process.pid].pkijs !== \"object\")\r\n\t\t\t{\r\n\t\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t\tthrow new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tglobal[process.pid].pkijs.engine = {\r\n\t\t\tname: name,\r\n\t\t\tcrypto: crypto,\r\n\t\t\tsubtle: subtle\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region We are in browser\r\n\telse\r\n\t{\r\n\t\tengine = {\r\n\t\t\tname: name,\r\n\t\t\tcrypto: crypto,\r\n\t\t\tsubtle: subtle\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\nexport function getEngine()\r\n{\r\n\t//region We are in Node\r\n\t// noinspection JSUnresolvedVariable\r\n\tif((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\"))\r\n\t{\r\n\t\tlet _engine;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t_engine = global[process.pid].pkijs.engine;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tthrow new Error(\"Please call \\\"setEngine\\\" before call to \\\"getEngine\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\treturn _engine;\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn engine;\r\n}\r\n//**************************************************************************************\r\n(function initCryptoEngine()\r\n{\r\n\tif(typeof self !== \"undefined\")\r\n\t{\r\n\t\tif(\"crypto\" in self)\r\n\t\t{\r\n\t\t\tlet engineName = \"webcrypto\";\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Standard crypto object\r\n\t\t\t * @type {Object}\r\n\t\t\t * @property {Object} [webkitSubtle] Subtle object from Apple\r\n\t\t\t */\r\n\t\t\tconst cryptoObject = self.crypto;\r\n\t\t\tlet subtleObject = null;\r\n\t\t\t\r\n\t\t\t// Apple Safari support\r\n\t\t\tif(\"webkitSubtle\" in self.crypto)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tsubtleObject = self.crypto.webkitSubtle;\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tsubtleObject = self.crypto.subtle;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tengineName = \"safari\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(\"subtle\" in self.crypto)\r\n\t\t\t\tsubtleObject = self.crypto.subtle;\r\n\t\t\t\r\n\t\t\tengine = {\r\n\t\t\t\tname: engineName,\r\n\t\t\t\tcrypto: cryptoObject,\r\n\t\t\t\tsubtle: new CryptoEngine({ name: engineName, crypto: self.crypto, subtle: subtleObject })\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t\r\n\tsetEngine(engine.name, engine.crypto, engine.subtle);\r\n})();\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of common functions\r\n//**************************************************************************************\r\n/**\r\n * Get crypto subtle from current \"crypto engine\" or \"undefined\"\r\n * @returns {({decrypt, deriveKey, digest, encrypt, exportKey, generateKey, importKey, sign, unwrapKey, verify, wrapKey}|null)}\r\n */\r\nexport function getCrypto()\r\n{\r\n\tconst _engine = getEngine();\r\n\t\r\n\tif(_engine.subtle !== null)\r\n\t\treturn _engine.subtle;\r\n\t\r\n\treturn undefined;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n * @param {!Uint8Array} view\r\n * @returns {*}\r\n */\r\nexport function getRandomValues(view)\r\n{\r\n\treturn getEngine().subtle.getRandomValues(view);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get OID for each specific algorithm\r\n * @param {Object} algorithm\r\n * @returns {string}\r\n */\r\nexport function getOIDByAlgorithm(algorithm)\r\n{\r\n\treturn getEngine().subtle.getOIDByAlgorithm(algorithm);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get default algorithm parameters for each kind of operation\r\n * @param {string} algorithmName Algorithm name to get common parameters for\r\n * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n * @returns {*}\r\n */\r\nexport function getAlgorithmParameters(algorithmName, operation)\r\n{\r\n\treturn getEngine().subtle.getAlgorithmParameters(algorithmName, operation);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Create CMS ECDSA signature from WebCrypto ECDSA signature\r\n * @param {ArrayBuffer} signatureBuffer WebCrypto result of \"sign\" function\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function createCMSECDSASignature(signatureBuffer)\r\n{\r\n\t//region Initial check for correct length\r\n\tif((signatureBuffer.byteLength % 2) !== 0)\r\n\t\treturn new ArrayBuffer(0);\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tconst length = signatureBuffer.byteLength / 2; // There are two equal parts inside incoming ArrayBuffer\r\n\t\r\n\tconst rBuffer = new ArrayBuffer(length);\r\n\tconst rView = new Uint8Array(rBuffer);\r\n\trView.set(new Uint8Array(signatureBuffer, 0, length));\r\n\t\r\n\tconst rInteger = new asn1js.Integer({ valueHex: rBuffer });\r\n\t\r\n\tconst sBuffer = new ArrayBuffer(length);\r\n\tconst sView = new Uint8Array(sBuffer);\r\n\tsView.set(new Uint8Array(signatureBuffer, length, length));\r\n\t\r\n\tconst sInteger = new asn1js.Integer({ valueHex: sBuffer });\r\n\t//endregion\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tvalue: [\r\n\t\t\trInteger.convertToDER(),\r\n\t\t\tsInteger.convertToDER()\r\n\t\t]\r\n\t})).toBER(false);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * String preparation function. In a future here will be realization of algorithm from RFC4518\r\n * @param {string} inputString JavaScript string. As soon as for each ASN.1 string type we have a specific transformation function here we will work with pure JavaScript string\r\n * @returns {string} Formated string\r\n */\r\nexport function stringPrep(inputString)\r\n{\r\n\t//region Initial variables\r\n\tlet isSpace = false;\r\n\tlet cuttedResult = \"\";\r\n\t//endregion\r\n\t\r\n\tconst result = inputString.trim(); // Trim input string\r\n\t\r\n\t//region Change all sequence of SPACE down to SPACE char\r\n\tfor(let i = 0; i < result.length; i++)\r\n\t{\r\n\t\tif(result.charCodeAt(i) === 32)\r\n\t\t{\r\n\t\t\tif(isSpace === false)\r\n\t\t\t\tisSpace = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(isSpace)\r\n\t\t\t{\r\n\t\t\t\tcuttedResult += \" \";\r\n\t\t\t\tisSpace = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcuttedResult += result[i];\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn cuttedResult.toLowerCase();\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Create a single ArrayBuffer from CMS ECDSA signature\r\n * @param {Sequence} cmsSignature ASN.1 SEQUENCE contains CMS ECDSA signature\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function createECDSASignatureFromCMS(cmsSignature)\r\n{\r\n\t//region Check input variables\r\n\tif((cmsSignature instanceof asn1js.Sequence) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif(cmsSignature.valueBlock.value.length !== 2)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif((cmsSignature.valueBlock.value[0] instanceof asn1js.Integer) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif((cmsSignature.valueBlock.value[1] instanceof asn1js.Integer) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t//endregion\r\n\t\r\n\tconst rValue = cmsSignature.valueBlock.value[0].convertFromDER();\r\n\tconst sValue = cmsSignature.valueBlock.value[1].convertFromDER();\r\n\t\r\n\t//region Check the lengths of two parts are equal\r\n\tswitch(true)\r\n\t{\r\n\t\tcase (rValue.valueBlock.valueHex.byteLength < sValue.valueBlock.valueHex.byteLength):\r\n\t\t\t{\r\n\t\t\t\tif((sValue.valueBlock.valueHex.byteLength - rValue.valueBlock.valueHex.byteLength) !== 1)\r\n\t\t\t\t\tthrow new Error(\"Incorrect DER integer decoding\");\r\n\t\t\t\t\r\n\t\t\t\tconst correctedLength = sValue.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\r\n\t\t\t\tconst rValueView = new Uint8Array(rValue.valueBlock.valueHex);\r\n\t\t\t\t\r\n\t\t\t\tconst rValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\tconst rValueViewCorrected = new Uint8Array(rValueBufferCorrected);\r\n\t\t\t\t\r\n\t\t\t\trValueViewCorrected.set(rValueView, 1);\r\n\t\t\t\trValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\r\n\t\t\t\treturn utilConcatBuf(rValueBufferCorrected, sValue.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\tcase (rValue.valueBlock.valueHex.byteLength > sValue.valueBlock.valueHex.byteLength):\r\n\t\t\t{\r\n\t\t\t\tif((rValue.valueBlock.valueHex.byteLength - sValue.valueBlock.valueHex.byteLength) !== 1)\r\n\t\t\t\t\tthrow new Error(\"Incorrect DER integer decoding\");\r\n\t\t\t\t\r\n\t\t\t\tconst correctedLength = rValue.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\r\n\t\t\t\tconst sValueView = new Uint8Array(sValue.valueBlock.valueHex);\r\n\t\t\t\t\r\n\t\t\t\tconst sValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\tconst sValueViewCorrected = new Uint8Array(sValueBufferCorrected);\r\n\t\t\t\t\r\n\t\t\t\tsValueViewCorrected.set(sValueView, 1);\r\n\t\t\t\tsValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\r\n\t\t\t\treturn utilConcatBuf(rValue.valueBlock.valueHex, sValueBufferCorrected);\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\t//region In case we have equal length and the length is not even with 2\r\n\t\t\t\tif(rValue.valueBlock.valueHex.byteLength % 2)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst correctedLength = (rValue.valueBlock.valueHex.byteLength + 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst rValueView = new Uint8Array(rValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst rValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\t\tconst rValueViewCorrected = new Uint8Array(rValueBufferCorrected);\r\n\t\t\t\t\t\r\n\t\t\t\t\trValueViewCorrected.set(rValueView, 1);\r\n\t\t\t\t\trValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst sValueView = new Uint8Array(sValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst sValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\t\tconst sValueViewCorrected = new Uint8Array(sValueBufferCorrected);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsValueViewCorrected.set(sValueView, 1);\r\n\t\t\t\t\tsValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn utilConcatBuf(rValueBufferCorrected, sValueBufferCorrected);\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn utilConcatBuf(rValue.valueBlock.valueHex, sValue.valueBlock.valueHex);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get WebCrypto algorithm by wel-known OID\r\n * @param {string} oid well-known OID to search for\r\n * @returns {Object}\r\n */\r\nexport function getAlgorithmByOID(oid)\r\n{\r\n\treturn getEngine().subtle.getAlgorithmByOID(oid);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Getting hash algorithm by signature algorithm\r\n * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n * @returns {string}\r\n */\r\nexport function getHashAlgorithm(signatureAlgorithm)\r\n{\r\n\treturn getEngine().subtle.getHashAlgorithm(signatureAlgorithm);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * ANS X9.63 Key Derivation Function having a \"Counter\" as a parameter\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} Counter\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\r\nexport function kdfWithCounter(hashFunction, Zbuffer, Counter, SharedInfo)\r\n{\r\n\t//region Check of input parameters\r\n\tswitch(hashFunction.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\tcase \"SHA-256\":\r\n\t\tcase \"SHA-384\":\r\n\t\tcase \"SHA-512\":\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn Promise.reject(`Unknown hash function: ${hashFunction}`);\r\n\t}\r\n\t\r\n\tif((Zbuffer instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Zbuffer.byteLength === 0)\r\n\t\treturn Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\r\n\t\r\n\tif((SharedInfo instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Counter > 255)\r\n\t\treturn Promise.reject(\"Please set \\\"Counter\\\" variable to value less or equal to 255\");\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tconst counterBuffer = new ArrayBuffer(4);\r\n\tconst counterView = new Uint8Array(counterBuffer);\r\n\tcounterView[0] = 0x00;\r\n\tcounterView[1] = 0x00;\r\n\tcounterView[2] = 0x00;\r\n\tcounterView[3] = Counter;\r\n\t\r\n\tlet combinedBuffer = new ArrayBuffer(0);\r\n\t//endregion\r\n\t\r\n\t//region Get a \"crypto\" extension\r\n\tconst crypto = getCrypto();\r\n\tif(typeof crypto === \"undefined\")\r\n\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t//endregion\r\n\t\r\n\t//region Create a combined ArrayBuffer for digesting\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, Zbuffer);\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, counterBuffer);\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, SharedInfo);\r\n\t//endregion\r\n\t\r\n\t//region Return digest of combined ArrayBuffer and information about current counter\r\n\treturn crypto.digest({\r\n\t\tname: hashFunction\r\n\t},\r\n\tcombinedBuffer)\r\n\t\t.then(result =>\r\n\t\t\t({\r\n\t\t\t\tcounter: Counter,\r\n\t\t\t\tresult\r\n\t\t\t}));\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n/**\r\n * ANS X9.63 Key Derivation Function\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} keydatalen Length (!!! in BITS !!!) of used kew derivation function\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\r\nexport function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo)\r\n{\r\n\t//region Initial variables\r\n\tlet hashLength = 0;\r\n\tlet maxCounter = 1;\r\n\t\r\n\tconst kdfArray = [];\r\n\t//endregion\r\n\t\r\n\t//region Check of input parameters\r\n\tswitch(hashFunction.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\thashLength = 160; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\thashLength = 256; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\thashLength = 384; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\thashLength = 512; // In bits\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn Promise.reject(`Unknown hash function: ${hashFunction}`);\r\n\t}\r\n\t\r\n\tif((Zbuffer instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Zbuffer.byteLength === 0)\r\n\t\treturn Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\r\n\t\r\n\tif((SharedInfo instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\r\n\t//endregion\r\n\t\r\n\t//region Calculated maximum value of \"Counter\" variable\r\n\tconst quotient = keydatalen / hashLength;\r\n\t\r\n\tif(Math.floor(quotient) > 0)\r\n\t{\r\n\t\tmaxCounter = Math.floor(quotient);\r\n\t\t\r\n\t\tif((quotient - maxCounter) > 0)\r\n\t\t\tmaxCounter++;\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Create an array of \"kdfWithCounter\"\r\n\tfor(let i = 1; i <= maxCounter; i++)\r\n\t\tkdfArray.push(kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo));\r\n\t//endregion\r\n\t\r\n\t//region Return combined digest with specified length\r\n\treturn Promise.all(kdfArray).then(incomingResult =>\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet combinedBuffer = new ArrayBuffer(0);\r\n\t\tlet currentCounter = 1;\r\n\t\tlet found = true;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Combine all buffer together\r\n\t\twhile(found)\r\n\t\t{\r\n\t\t\tfound = false;\r\n\t\t\t\r\n\t\t\tfor(const result of incomingResult)\r\n\t\t\t{\r\n\t\t\t\tif(result.counter === currentCounter)\r\n\t\t\t\t{\r\n\t\t\t\t\tcombinedBuffer = utilConcatBuf(combinedBuffer, result.result);\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcurrentCounter++;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create output buffer with specified length\r\n\t\tkeydatalen >>= 3; // Divide by 8 since \"keydatalen\" is in bits\r\n\t\t\r\n\t\tif(combinedBuffer.byteLength > keydatalen)\r\n\t\t{\r\n\t\t\tconst newBuffer = new ArrayBuffer(keydatalen);\r\n\t\t\tconst newView = new Uint8Array(newBuffer);\r\n\t\t\tconst combinedView = new Uint8Array(combinedBuffer);\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < keydatalen; i++)\r\n\t\t\t\tnewView[i] = combinedView[i];\r\n\t\t\t\r\n\t\t\treturn newBuffer;\r\n\t\t}\r\n\t\t\r\n\t\treturn combinedBuffer; // Since the situation when \"combinedBuffer.byteLength < keydatalen\" here we have only \"combinedBuffer.byteLength === keydatalen\"\r\n\t\t//endregion\r\n\t});\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n"]}