{"version":3,"sources":["../src/TSTInfo.js"],"names":["asn1js","TSTInfo","constructor","parameters","version","defaultValues","policy","messageImprint","serialNumber","genTime","accuracy","ordering","nonce","tsa","extensions","fromSchema","schema","memberName","Integer","Date","Error","compareWithDefault","memberValue","hashAlgorithm","hashedMessage","isEqual","seconds","millis","micros","type","value","length","names","Sequence","name","blockName","ObjectIdentifier","GeneralizedTime","Boolean","optional","Constructed","idBlock","tagClass","tagNumber","Repeated","extension","asn1","compareSchema","verified","result","valueBlock","valueDec","toString","toDate","Array","from","element","toSchema","outputArray","push","valueDate","toJSON","_object","verify","sequence","Promise","resolve","data","notBefore","notAfter","crypto","reject","shaAlgorithm","algorithmId","then","digest","Uint8Array","valueHex"],"mappings":"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","file":"TSTInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getAlgorithmByOID } from \"./common.js\";\r\nimport MessageImprint from \"./MessageImprint.js\";\r\nimport Accuracy from \"./Accuracy.js\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TSTInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TSTInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", TSTInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description policy\r\n\t\t */\r\n\t\tthis.policy = getParametersValue(parameters, \"policy\", TSTInfo.defaultValues(\"policy\"));\r\n\t\t/**\r\n\t\t * @type {MessageImprint}\r\n\t\t * @description messageImprint\r\n\t\t */\r\n\t\tthis.messageImprint = getParametersValue(parameters, \"messageImprint\", TSTInfo.defaultValues(\"messageImprint\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", TSTInfo.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @description genTime\r\n\t\t */\r\n\t\tthis.genTime = getParametersValue(parameters, \"genTime\", TSTInfo.defaultValues(\"genTime\"));\r\n\r\n\t\tif(\"accuracy\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Accuracy}\r\n\t\t\t * @description accuracy\r\n\t\t\t */\r\n\t\t\tthis.accuracy = getParametersValue(parameters, \"accuracy\", TSTInfo.defaultValues(\"accuracy\"));\r\n\r\n\t\tif(\"ordering\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @description ordering\r\n\t\t\t */\r\n\t\t\tthis.ordering = getParametersValue(parameters, \"ordering\", TSTInfo.defaultValues(\"ordering\"));\r\n\r\n\t\tif(\"nonce\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @description nonce\r\n\t\t\t */\r\n\t\t\tthis.nonce = getParametersValue(parameters, \"nonce\", TSTInfo.defaultValues(\"nonce\"));\r\n\r\n\t\tif(\"tsa\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @description tsa\r\n\t\t\t */\r\n\t\t\tthis.tsa = getParametersValue(parameters, \"tsa\", TSTInfo.defaultValues(\"tsa\"));\r\n\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @description extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", TSTInfo.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"policy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn new MessageImprint();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"genTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn new Accuracy();\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn false;\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\tcase \"policy\":\r\n\t\t\tcase \"genTime\":\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn (memberValue === TSTInfo.defaultValues(memberName));\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn (memberValue.isEqual(TSTInfo.defaultValues(memberName)));\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn ((Accuracy.compareWithDefault(\"seconds\", memberValue.seconds)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"millis\", memberValue.millis)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"micros\", memberValue.micros)));\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn ((GeneralName.compareWithDefault(\"type\", memberValue.type)) &&\r\n\t\t\t\t\t\t(GeneralName.compareWithDefault(\"value\", memberValue.value)));\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//TSTInfo ::= SEQUENCE  {\r\n\t\t//   version                      INTEGER  { v1(1) },\r\n\t\t//   policy                       TSAPolicyId,\r\n\t\t//   messageImprint               MessageImprint,\r\n\t\t//   serialNumber                 INTEGER,\r\n\t\t//   genTime                      GeneralizedTime,\r\n\t\t//   accuracy                     Accuracy                 OPTIONAL,\r\n\t\t//   ordering                     BOOLEAN             DEFAULT FALSE,\r\n\t\t//   nonce                        INTEGER                  OPTIONAL,\r\n\t\t//   tsa                          [0] GeneralName          OPTIONAL,\r\n\t\t//   extensions                   [1] IMPLICIT Extensions  OPTIONAL  }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [policy]\r\n\t\t * @property {string} [messageImprint]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t * @property {string} [genTime]\r\n\t\t * @property {string} [accuracy]\r\n\t\t * @property {string} [ordering]\r\n\t\t * @property {string} [nonce]\r\n\t\t * @property {string} [tsa]\r\n\t\t * @property {string} [extensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TSTInfo\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"TSTInfo.version\") }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policy || \"TSTInfo.policy\") }),\r\n\t\t\t\tMessageImprint.schema(names.messageImprint || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.messageImprint\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"TSTInfo.serialNumber\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.genTime || \"TSTInfo.genTime\") }),\r\n\t\t\t\tAccuracy.schema(names.accuracy || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.accuracy\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\tname: (names.ordering || \"TSTInfo.ordering\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.nonce || \"TSTInfo.nonce\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.tsa || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TSTInfo.tsa\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.extensions || \"TSTInfo.extensions\"),\r\n\t\t\t\t\t\t\tvalue: Extension.schema(names.extension || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}) // IMPLICIT Extensions\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TSTInfo.version\",\r\n\t\t\t\"TSTInfo.policy\",\r\n\t\t\t\"TSTInfo.messageImprint\",\r\n\t\t\t\"TSTInfo.serialNumber\",\r\n\t\t\t\"TSTInfo.genTime\",\r\n\t\t\t\"TSTInfo.accuracy\",\r\n\t\t\t\"TSTInfo.ordering\",\r\n\t\t\t\"TSTInfo.nonce\",\r\n\t\t\t\"TSTInfo.tsa\",\r\n\t\t\t\"TSTInfo.extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTSTInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TSTInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"TSTInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.policy = asn1.result[\"TSTInfo.policy\"].valueBlock.toString();\r\n\t\tthis.messageImprint = new MessageImprint({ schema: asn1.result[\"TSTInfo.messageImprint\"] });\r\n\t\tthis.serialNumber = asn1.result[\"TSTInfo.serialNumber\"];\r\n\t\tthis.genTime = asn1.result[\"TSTInfo.genTime\"].toDate();\r\n\t\tif(\"TSTInfo.accuracy\" in asn1.result)\r\n\t\t\tthis.accuracy = new Accuracy({ schema: asn1.result[\"TSTInfo.accuracy\"] });\r\n\t\tif(\"TSTInfo.ordering\" in asn1.result)\r\n\t\t\tthis.ordering = asn1.result[\"TSTInfo.ordering\"].valueBlock.value;\r\n\t\tif(\"TSTInfo.nonce\" in asn1.result)\r\n\t\t\tthis.nonce = asn1.result[\"TSTInfo.nonce\"];\r\n\t\tif(\"TSTInfo.tsa\" in asn1.result)\r\n\t\t\tthis.tsa = new GeneralName({ schema: asn1.result[\"TSTInfo.tsa\"] });\r\n\t\tif(\"TSTInfo.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"TSTInfo.extensions\"], element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policy }));\r\n\t\toutputArray.push(this.messageImprint.toSchema());\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.genTime }));\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\toutputArray.push(this.accuracy.toSchema());\r\n\t\tif(\"ordering\" in this)\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.ordering }));\r\n\t\tif(\"nonce\" in this)\r\n\t\t\toutputArray.push(this.nonce);\r\n\t\tif(\"tsa\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.tsa.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t//region Create array of extensions\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tpolicy: this.policy,\r\n\t\t\tmessageImprint: this.messageImprint.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tgenTime: this.genTime\r\n\t\t};\r\n\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\t_object.accuracy = this.accuracy.toJSON();\r\n\r\n\t\tif(\"ordering\" in this)\r\n\t\t\t_object.ordering = this.ordering;\r\n\r\n\t\tif(\"nonce\" in this)\r\n\t\t\t_object.nonce = this.nonce.toJSON();\r\n\r\n\t\tif(\"tsa\" in this)\r\n\t\t\t_object.tsa = this.tsa.toJSON();\r\n\r\n\t\tif(\"extensions\" in this)\r\n\t\t\t_object.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TST Info value\r\n\t * @param {{data: ArrayBuffer, notBefore: Date, notAfter: Date}} parameters Input parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tlet data;\r\n\r\n\t\tlet notBefore = null;\r\n\t\tlet notAfter = null;\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get initial parameters\r\n\t\tif(\"data\" in parameters)\r\n\t\t\tdata = parameters.data;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\r\n\r\n\t\tif(\"notBefore\" in parameters)\r\n\t\t\tnotBefore = parameters.notBefore;\r\n\r\n\t\tif(\"notAfter\" in parameters)\r\n\t\t\tnotAfter = parameters.notAfter;\r\n\t\t//endregion\r\n\r\n\t\t//region Check date\r\n\t\tif(notBefore !== null)\r\n\t\t{\r\n\t\t\tif(this.genTime < notBefore)\r\n\t\t\t\treturn Promise.reject(\"Generation time for TSTInfo object is less than notBefore value\");\r\n\t\t}\r\n\t\t\r\n\t\tif(notAfter !== null)\r\n\t\t{\r\n\t\t\tif(this.genTime > notAfter)\r\n\t\t\t\treturn Promise.reject(\"Generation time for TSTInfo object is more than notAfter value\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find hashing algorithm\r\n\t\tconst shaAlgorithm = getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId);\r\n\t\tif((\"name\" in shaAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.messageImprint.hashAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Calculate message digest for input \"data\" buffer\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest(shaAlgorithm.name, new Uint8Array(data))\r\n\t\t).then(\r\n\t\t\tresult => isEqualBuffer(result, this.messageImprint.hashedMessage.valueBlock.valueHex)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}