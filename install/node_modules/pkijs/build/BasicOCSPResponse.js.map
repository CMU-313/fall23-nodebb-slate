{"version":3,"sources":["../src/BasicOCSPResponse.js"],"names":["asn1js","BasicOCSPResponse","constructor","parameters","tbsResponseData","defaultValues","signatureAlgorithm","signature","certs","fromSchema","schema","memberName","BitString","Error","compareWithDefault","memberValue","comparisonResult","tbs","responderID","producedAt","responses","responseExtensions","algorithmId","isEqual","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","_object","getCertificateStatus","certificate","issuerCertificate","sequence","Promise","resolve","isForCertificate","status","hashesObject","certIDs","certIDPromises","response","hashAlgorithm","certID","reject","createForCertificate","then","all","id","certStatus","isConstructed","ex","sign","privateKey","engine","subtle","getSignatureParameters","toBER","signWithPrivateKey","valueHex","verify","signerCert","certIndex","trustedCerts","_this","checkCA","cert","issuer","serialNumber","isCA","extensions","extension","extnID","parsedValue","cA","crypto","entries","index","subject","OctetString","digest","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","valueBlock","results","promiseResults","additionalCerts","promiseResult","certChain","verificationResult","error","Object","resultMessage","promiseError","verifyWithPublicKey"],"mappings":"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","file":"BasicOCSPResponse.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getAlgorithmByOID, getCrypto, getEngine } from \"./common.js\";\r\nimport ResponseData from \"./ResponseData.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertID from \"./CertID.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class BasicOCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for BasicOCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ResponseData}\r\n\t\t * @description tbsResponseData\r\n\t\t */\r\n\t\tthis.tbsResponseData = getParametersValue(parameters, \"tbsResponseData\", BasicOCSPResponse.defaultValues(\"tbsResponseData\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", BasicOCSPResponse.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", BasicOCSPResponse.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @description certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", BasicOCSPResponse.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsResponseData\":\r\n\t\t\t\treturn new ResponseData();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\t\tlet comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(\"responseExtensions\" in memberValue)\r\n\t\t\t\t\t\tcomparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn comparisonResult;\r\n\t\t\t\t}\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//BasicOCSPResponse       ::= SEQUENCE {\r\n\t\t//    tbsResponseData      ResponseData,\r\n\t\t//    signatureAlgorithm   AlgorithmIdentifier,\r\n\t\t//    signature            BIT STRING,\r\n\t\t//    certs            [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsResponseData]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"BasicOCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tResponseData.schema(names.tbsResponseData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.tbsResponseData\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"BasicOCSPResponse.signature\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: \"BasicOCSPResponse.certs\",\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"BasicOCSPResponse.tbsResponseData\",\r\n\t\t\t\"BasicOCSPResponse.signatureAlgorithm\",\r\n\t\t\t\"BasicOCSPResponse.signature\",\r\n\t\t\t\"BasicOCSPResponse.certs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tBasicOCSPResponse.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for BasicOCSPResponse\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsResponseData = new ResponseData({ schema: asn1.result[\"BasicOCSPResponse.tbsResponseData\"] });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"BasicOCSPResponse.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"BasicOCSPResponse.signature\"];\r\n\t\t\r\n\t\tif(\"BasicOCSPResponse.certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result[\"BasicOCSPResponse.certs\"], element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsResponseData.toSchema());\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\t//region Create array of certificates\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsResponseData: this.tbsResponseData.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate Certificate to be checked\r\n\t * @param {Certificate} issuerCertificate Certificate of issuer for certificate to be checked\r\n\t * @returns {Promise}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t\r\n\t\tconst hashesObject = {};\r\n\t\t\r\n\t\tconst certIDs = [];\r\n\t\tconst certIDPromises = [];\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create all \"certIDs\" for input certificates\r\n\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t{\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Wrong CertID hashing algorithm: ${response.certID.hashAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tif((hashAlgorithm.name in hashesObject) === false)\r\n\t\t\t{\r\n\t\t\t\thashesObject[hashAlgorithm.name] = 1;\r\n\t\t\t\t\r\n\t\t\t\tconst certID = new CertID();\r\n\t\t\t\t\r\n\t\t\t\tcertIDs.push(certID);\r\n\t\t\t\tcertIDPromises.push(certID.createForCertificate(certificate, {\r\n\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\tissuerCertificate\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tPromise.all(certIDPromises)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Compare all response's \"certIDs\" with identifiers for input certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t\t{\r\n\t\t\t\tfor(const id of certIDs)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(response.certID.isEqual(id))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult.isForCertificate = true;\r\n\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.isConstructed)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcase true:\r\n\t\t\t\t\t\t\t\t\tif(response.certStatus.idBlock.tagNumber === 1)\r\n\t\t\t\t\t\t\t\t\t\tresult.status = 1; // revoked\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase false:\r\n\t\t\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.tagNumber)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase 0: // good\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 0;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase 2: // unknown\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 2;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Basic Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbsResponseData.tbs = this.tbsResponseData.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbsResponseData.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing OCSP Basic Response\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet signerCert = null;\r\n\t\t\r\n\t\tlet certIndex = -1;\r\n\t\t\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet trustedCerts = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check amount of certificates\r\n\t\tif((\"certs\" in this) === false)\r\n\t\t\treturn Promise.reject(\"No certificates attached to the BasicOCSPResponce\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get input values\r\n\t\tif(\"trustedCerts\" in parameters)\r\n\t\t\ttrustedCerts = parameters.trustedCerts;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux functions\r\n\t\t/**\r\n\t\t * Check CA flag for the certificate\r\n\t\t * @param {Certificate} cert Certificate to find CA flag for\r\n\t\t * @returns {*}\r\n\t\t */\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCert.issuer) === true) && (cert.serialNumber.isEqual(signerCert.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find correct value for \"responderID\"\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof RelativeDistinguishedNames): // [1] Name\r\n\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, certificate] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(certificate.subject.isEqual(_this.tbsResponseData.responderID))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof asn1js.OctetString): // [2] KeyHash\r\n\t\t\t\tsequence = sequence.then(() => Promise.all(Array.from(_this.certs, element =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(element.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))).then(results =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, ] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], _this.tbsResponseData.responderID.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(\"Wrong value for responderID\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(certIndex === (-1))\r\n\t\t\t\treturn Promise.reject(\"Correct certificate was not found in OCSP response\");\r\n\t\t\t\r\n\t\t\tsignerCert = this.certs[certIndex];\r\n\t\t\t\r\n\t\t\treturn Promise.all(Array.from(_this.certs, element => checkCA(element))).then(promiseResults =>\r\n\t\t\t{\r\n\t\t\t\tconst additionalCerts = [];\r\n\t\t\t\tadditionalCerts.push(signerCert);\r\n\t\t\t\t\r\n\t\t\t\tfor(const promiseResult of promiseResults)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(promiseResult !== null)\r\n\t\t\t\t\t\tadditionalCerts.push(promiseResult);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst certChain = new CertificateChainValidationEngine({\r\n\t\t\t\t\tcerts: additionalCerts,\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn certChain.verify().then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`)\r\n\t\t\t\t);\r\n\t\t\t}, promiseError =>\r\n\t\t\t\tPromise.reject(`Error during checking certificates for CA flag: ${promiseError}`)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbsResponseData.tbs, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm));\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}