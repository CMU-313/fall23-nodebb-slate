{"version":3,"sources":["../src/Certificate.js"],"names":["asn1js","tbsCertificate","parameters","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Integer","tbsCertificateVersion","tbsCertificateSerialNumber","schema","signature","issuer","tbsCertificateValidity","notBefore","utcTimeName","generalTimeName","notAfter","subject","subjectPublicKeyInfo","Primitive","tbsCertificateIssuerUniqueID","tbsCertificateSubjectUniqueID","extensions","Certificate","constructor","tbs","defaultValues","version","serialNumber","issuerUniqueID","subjectUniqueID","signatureAlgorithm","signatureValue","fromSchema","memberName","ArrayBuffer","BitString","Error","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","valueHex","Array","from","element","encodeTBS","outputArray","push","toSchema","encodeFlag","tbsSchema","length","fromBER","toJSON","object","byteLength","getPublicKey","subtle","getKeyHash","crypto","Promise","reject","digest","Uint8Array","subjectPublicKey","sign","privateKey","hashAlgorithm","sequence","resolve","engine","then","getSignatureParameters","toBER","signWithPrivateKey","verify","issuerCertificate","isEqual","verifyWithPublicKey"],"mappings":"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","file":"Certificate.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport Time from \"./Time.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\nfunction tbsCertificate(parameters = {})\r\n{\r\n\t//TBSCertificate  ::=  SEQUENCE  {\r\n\t//    version         [0]  EXPLICIT Version DEFAULT v1,\r\n\t//    serialNumber         CertificateSerialNumber,\r\n\t//    signature            AlgorithmIdentifier,\r\n\t//    issuer               Name,\r\n\t//    validity             Validity,\r\n\t//    subject              Name,\r\n\t//    subjectPublicKeyInfo SubjectPublicKeyInfo,\r\n\t//    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    extensions      [3]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- If present, version MUST be v3\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertificateVersion]\r\n\t * @property {string} [tbsCertificateSerialNumber]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertificateValidity]\r\n\t * @property {string} [notBefore]\r\n\t * @property {string} [notAfter]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [subjectPublicKeyInfo]\r\n\t * @property {string} [tbsCertificateIssuerUniqueID]\r\n\t * @property {string} [tbsCertificateSubjectUniqueID]\r\n\t * @property {string} [extensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertificate\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateVersion || \"tbsCertificate.version\") }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateSerialNumber || \"tbsCertificate.serialNumber\") }),\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: (names.tbsCertificateValidity || \"tbsCertificate.validity\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tTime.schema(names.notBefore || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notBefore\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notBefore\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tTime.schema(names.notAfter || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notAfter\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notAfter\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema(names.subjectPublicKeyInfo || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateIssuerUniqueID || \"tbsCertificate.issuerUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateSubjectUniqueID || \"tbsCertificate.subjectUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Certificate\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Certificate class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", Certificate.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", Certificate.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", Certificate.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Certificate.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", Certificate.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @description notBefore\r\n\t\t */\r\n\t\tthis.notBefore = getParametersValue(parameters, \"notBefore\", Certificate.defaultValues(\"notBefore\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @description notAfter\r\n\t\t */\r\n\t\tthis.notAfter = getParametersValue(parameters, \"notAfter\", Certificate.defaultValues(\"notAfter\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description subject\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", Certificate.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @description subjectPublicKeyInfo\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", Certificate.defaultValues(\"subjectPublicKeyInfo\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @description issuerUniqueID\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", Certificate.defaultValues(\"issuerUniqueID\"));\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @description subjectUniqueID\r\n\t\t\t */\r\n\t\t\tthis.subjectUniqueID = getParametersValue(parameters, \"subjectUniqueID\", Certificate.defaultValues(\"subjectUniqueID\"));\r\n\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array}\r\n\t\t\t * @description extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", Certificate.defaultValues(\"extensions\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Certificate.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", Certificate.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"notBefore\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"notAfter\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"subjectUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Certificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//Certificate  ::=  SEQUENCE  {\r\n\t\t//    tbsCertificate       TBSCertificate,\r\n\t\t//    signatureAlgorithm   AlgorithmIdentifier,\r\n\t\t//    signatureValue       BIT STRING  }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsCertificate]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertificate(names.tbsCertificate),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsCertificate\",\r\n\t\t\t\"tbsCertificate.extensions\",\r\n\t\t\t\"tbsCertificate.version\",\r\n\t\t\t\"tbsCertificate.serialNumber\",\r\n\t\t\t\"tbsCertificate.signature\",\r\n\t\t\t\"tbsCertificate.issuer\",\r\n\t\t\t\"tbsCertificate.notBefore\",\r\n\t\t\t\"tbsCertificate.notAfter\",\r\n\t\t\t\"tbsCertificate.subject\",\r\n\t\t\t\"tbsCertificate.subjectPublicKeyInfo\",\r\n\t\t\t\"tbsCertificate.issuerUniqueID\",\r\n\t\t\t\"tbsCertificate.subjectUniqueID\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificate.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttbsCertificate: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\textensions: {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\textensions: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Certificate\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.tbsCertificate.valueBeforeDecode;\r\n\t\t\r\n\t\tif(\"tbsCertificate.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertificate.version\"].valueBlock.valueDec;\r\n\t\tthis.serialNumber = asn1.result[\"tbsCertificate.serialNumber\"];\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertificate.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.issuer\"] });\r\n\t\tthis.notBefore = new Time({ schema: asn1.result[\"tbsCertificate.notBefore\"] });\r\n\t\tthis.notAfter = new Time({ schema: asn1.result[\"tbsCertificate.notAfter\"] });\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"tbsCertificate.subjectPublicKeyInfo\"] });\r\n\t\tif(\"tbsCertificate.issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result[\"tbsCertificate.issuerUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.subjectUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result[\"tbsCertificate.subjectUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"tbsCertificate.extensions\"], element => new Extension({ schema: element }));\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create ASN.1 schema for existing values of TBS part for the certificate\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ value: this.version }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.notBefore.toSchema(),\r\n\t\t\t\tthis.notAfter.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t\r\n\t\toutputArray.push(this.subject.toSchema());\r\n\t\toutputArray.push(this.subjectPublicKeyInfo.toSchema());\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.issuerUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.subjectUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.extensions.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create and return output sequence\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\tlet tbsSchema = {};\r\n\t\t\r\n\t\t//region Decode stored TBS value\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored certificate TBS part\r\n\t\t\t\treturn Certificate.schema().value[0];\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tnotBefore: this.notBefore.toJSON(),\r\n\t\t\tnotAfter: this.notAfter.toJSON(),\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tobject.issuerUniqueID = bufferToHexCodes(this.issuerUniqueID, 0, this.issuerUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t\tobject.subjectUniqueID = bufferToHexCodes(this.subjectUniqueID, 0, this.subjectUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tobject.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\treturn getEngine().subtle.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get SHA-1 hash value for subject public key\r\n\t */\r\n\tgetKeyHash()\r\n\t{\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn crypto.digest({ name: \"sha-1\" }, new Uint8Array(this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current value from TBS section\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Check private key\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signature = result.signatureAlgorithm;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet subjectPublicKeyInfo = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set correct \"subjectPublicKeyInfo\" value\r\n\t\tif(issuerCertificate !== null)\r\n\t\t\tsubjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(this.issuer.isEqual(this.subject)) // Self-signed certificate\r\n\t\t\t\tsubjectPublicKeyInfo = this.subjectPublicKeyInfo;\r\n\t\t}\r\n\t\t\r\n\t\tif((subjectPublicKeyInfo instanceof PublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Please provide issuer certificate as a parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}