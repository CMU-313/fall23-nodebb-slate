{"version":3,"sources":["../src/PKCS8ShroudedKeyBag.js"],"names":["asn1js","PKCS8ShroudedKeyBag","constructor","parameters","encryptionAlgorithm","defaultValues","encryptedData","parsedValue","fromSchema","schema","memberName","OctetString","Error","compareWithDefault","memberValue","algorithmId","isEqual","Object","keys","length","names","Sequence","name","blockName","value","Choice","idBlock","isConstructed","asn1","compareSchema","verified","result","toSchema","toJSON","parseInternalValues","sequence","Promise","resolve","cmsEncrypted","encryptedContentInfo","contentEncryptionAlgorithm","encryptedContent","then","decrypt","error","reject","fromBER","offset","makeInternalValues","contentToEncrypt","toBER","encrypt"],"mappings":"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","file":"PKCS8ShroudedKeyBag.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedData from \"./EncryptedData.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PKCS8ShroudedKeyBag \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKCS8ShroudedKeyBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description encryptionAlgorithm\r\n\t\t */\r\n\t\tthis.encryptionAlgorithm = getParametersValue(parameters, \"encryptionAlgorithm\", PKCS8ShroudedKeyBag.defaultValues(\"encryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description encryptedData\r\n\t\t */\r\n\t\tthis.encryptedData = getParametersValue(parameters, \"encryptedData\", PKCS8ShroudedKeyBag.defaultValues(\"encryptedData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PKCS8ShroudedKeyBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn (new AlgorithmIdentifier());\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (new asn1js.OctetString());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PKCS8ShroudedKeyBag ::= EncryptedPrivateKeyInfo\r\n\t\t\r\n\t\t//EncryptedPrivateKeyInfo ::= SEQUENCE {\r\n\t\t//    encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},\r\n\t\t//    encryptedData EncryptedData\r\n\t\t//}\r\n\t\t\r\n\t\t//EncryptedData ::= OCTET STRING\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [encryptionAlgorithm]\r\n\t\t * @property {string} [encryptedData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedData || \"encryptedData\") }),\r\n\t\t\t\t\t\tnew asn1js.OctetString({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tname: (names.encryptedData || \"encryptedData\")\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"encryptionAlgorithm\",\r\n\t\t\t\"encryptedData\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKCS8ShroudedKeyBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tencryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedData: \"encryptedData\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKCS8ShroudedKeyBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\r\n\t\tthis.encryptedData = asn1.result.encryptedData;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.encryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedData\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tencryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedData: this.encryptedData.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData({\r\n\t\t\tencryptedContentInfo: new EncryptedContentInfo({\r\n\t\t\t\tcontentEncryptionAlgorithm: this.encryptionAlgorithm,\r\n\t\t\t\tencryptedContent: this.encryptedData\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Decrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() => cmsEncrypted.decrypt(parameters),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize \"parsedValue\" with decrypted PKCS#8 private key \r\n\t\tsequence = sequence.then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t */\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\treturn Promise.reject(\"Error during parsing ASN.1 data\");\r\n\t\t\t\t\r\n\t\t\t\tthis.parsedValue = new PrivateKeyInfo({ schema: asn1.result });\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check that we do have \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please initialize \\\"parsedValue\\\" first\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Encrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tparameters.contentToEncrypt = this.parsedValue.toSchema().toBER(false);\r\n\t\t\t\t\r\n\t\t\t\treturn cmsEncrypted.encrypt(parameters);\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize internal values \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\r\n\t\t\t\tthis.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}