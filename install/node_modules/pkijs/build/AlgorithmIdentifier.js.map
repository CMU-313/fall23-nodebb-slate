{"version":3,"sources":["../src/AlgorithmIdentifier.js"],"names":["asn1js","AlgorithmIdentifier","constructor","parameters","algorithmId","defaultValues","algorithmParams","fromSchema","schema","memberName","Any","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","optional","value","ObjectIdentifier","algorithmIdentifier","asn1","compareSchema","verified","result","algorithm","valueBlock","toString","params","toSchema","outputArray","push","toJSON","object","isEqual","JSON","stringify"],"mappings":"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","file":"AlgorithmIdentifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AlgorithmIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AlgorithmIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description ObjectIdentifier for algorithm (string representation)\r\n\t\t */\r\n\t\tthis.algorithmId = getParametersValue(parameters, \"algorithmId\", AlgorithmIdentifier.defaultValues(\"algorithmId\"));\r\n\r\n\t\tif(\"algorithmParams\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Object}\r\n\t\t\t * @description Any algorithm parameters\r\n\t\t\t */\r\n\t\t\tthis.algorithmParams = getParametersValue(parameters, \"algorithmParams\", AlgorithmIdentifier.defaultValues(\"algorithmParams\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//AlgorithmIdentifier  ::=  Sequence  {\r\n\t\t//    algorithm               OBJECT IDENTIFIER,\r\n\t\t//    parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm\r\n\t\t * @property {string} algorithmParams Any algorithm parameters\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.algorithmIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.algorithmParams || \"\"), optional: true })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"params\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAlgorithmIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithmIdentifier: \"algorithm\",\r\n\t\t\t\t\talgorithmParams: \"params\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AlgorithmIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithmId = asn1.result.algorithm.valueBlock.toString();\r\n\t\tif(\"params\" in asn1.result)\r\n\t\t\tthis.algorithmParams = asn1.result.params;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.algorithmId }));\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\toutputArray.push(this.algorithmParams);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\talgorithmId: this.algorithmId\r\n\t\t};\r\n\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\tobject.algorithmParams = this.algorithmParams.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"AlgorithmIdentifiers\" are equal\r\n\t * @param {AlgorithmIdentifier} algorithmIdentifier\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(algorithmIdentifier)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((algorithmIdentifier instanceof AlgorithmIdentifier) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_id\"\r\n\t\tif(this.algorithmId !== algorithmIdentifier.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_params\"\r\n\t\tif(\"algorithmParams\" in this)\r\n\t\t{\r\n\t\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\t\treturn JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}