{"version":3,"sources":["../src/SignerInfo.js"],"names":["asn1js","SignerInfo","constructor","parameters","version","defaultValues","sid","digestAlgorithm","signedAttrs","signatureAlgorithm","signature","unsignedAttrs","fromSchema","schema","memberName","Any","type","OctetString","Error","compareWithDefault","memberValue","isEqual","attributes","encodedValue","names","Sequence","name","value","Integer","Choice","blockName","Constructed","optional","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","valueDec","currentSid","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"SignerInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignerInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignerInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignerInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description sid\r\n\t\t */\r\n\t\tthis.sid = getParametersValue(parameters, \"sid\", SignerInfo.defaultValues(\"sid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\r\n\t\tif(\"signedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @description signedAttrs\r\n\t\t\t */\r\n\t\t\tthis.signedAttrs = getParametersValue(parameters, \"signedAttrs\", SignerInfo.defaultValues(\"signedAttrs\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description digestAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignerInfo.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @description unsignedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unsignedAttrs = getParametersValue(parameters, \"unsignedAttrs\", SignerInfo.defaultValues(\"unsignedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 0 });\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 1 });\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (SignerInfo.defaultValues(\"version\") === memberValue);\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t\tcase \"signature\":\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SignerInfo ::= SEQUENCE {\r\n\t\t//    version CMSVersion,\r\n\t\t//    sid SignerIdentifier,\r\n\t\t//    digestAlgorithm DigestAlgorithmIdentifier,\r\n\t\t//    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\r\n\t\t//    signatureAlgorithm SignatureAlgorithmIdentifier,\r\n\t\t//    signature SignatureValue,\r\n\t\t//    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\r\n\t\t//\r\n\t\t//SignerIdentifier ::= CHOICE {\r\n\t\t//    issuerAndSerialNumber IssuerAndSerialNumber,\r\n\t\t//    subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n\t\t//\r\n\t\t//SubjectKeyIdentifier ::= OCTET STRING\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [sid]\r\n\t\t * @property {string} [digestAlgorithm]\r\n\t\t * @property {string} [signedAttrs]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [unsignedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: \"SignerInfo\",\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignerInfo.version\") }),\r\n\t\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tIssuerAndSerialNumber.schema(names.sid || {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\tblockName: \"SignerInfo.sid\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\tname: (names.sid || \"SignerInfo.sid\"),\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [new asn1js.OctetString()]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.signedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 0\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tnew asn1js.OctetString({ name: (names.signature || \"SignerInfo.signature\") }),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.unsignedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"SignerInfo.version\",\r\n\t\t\t\"SignerInfo.sid\",\r\n\t\t\t\"SignerInfo.digestAlgorithm\",\r\n\t\t\t\"SignerInfo.signedAttrs\",\r\n\t\t\t\"SignerInfo.signatureAlgorithm\",\r\n\t\t\t\"SignerInfo.signature\",\r\n\t\t\t\"SignerInfo.unsignedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignerInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignerInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignerInfo.version\"].valueBlock.valueDec;\r\n\r\n\t\tconst currentSid = asn1.result[\"SignerInfo.sid\"];\r\n\t\tif(currentSid.idBlock.tagClass === 1)\r\n\t\t\tthis.sid = new IssuerAndSerialNumber({ schema: currentSid });\r\n\t\telse\r\n\t\t\tthis.sid = currentSid;\r\n\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.digestAlgorithm\"] });\r\n\t\tif(\"SignerInfo.signedAttrs\" in asn1.result)\r\n\t\t\tthis.signedAttrs = new SignedAndUnsignedAttributes({ type: 0, schema: asn1.result[\"SignerInfo.signedAttrs\"] });\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"SignerInfo.signature\"];\r\n\t\tif(\"SignerInfo.unsignedAttrs\" in asn1.result)\r\n\t\t\tthis.unsignedAttrs = new SignedAndUnsignedAttributes({ type: 1, schema: asn1.result[\"SignerInfo.unsignedAttrs\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(this.sid instanceof IssuerAndSerialNumber)\r\n\t\t\toutputArray.push(this.sid.toSchema());\r\n\t\telse\r\n\t\t\toutputArray.push(this.sid);\r\n\t\t\r\n\t\toutputArray.push(this.digestAlgorithm.toSchema());\r\n\t\t\r\n\t\tif(\"signedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.signedAttrs.toSchema());\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.unsignedAttrs.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\r\n\t\tif(!(this.sid instanceof asn1js.Any))\r\n\t\t\t_object.sid = this.sid.toJSON();\r\n\r\n\t\t_object.digestAlgorithm = this.digestAlgorithm.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t_object.signedAttrs = this.signedAttrs.toJSON();\r\n\r\n\t\t_object.signatureAlgorithm = this.signatureAlgorithm.toJSON();\r\n\t\t_object.signature = this.signature.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t_object.unsignedAttrs = this.unsignedAttrs.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}