{"version":3,"sources":["../src/PublicKeyInfo.js"],"names":["asn1js","PublicKeyInfo","constructor","parameters","algorithm","defaultValues","subjectPublicKey","parsedKey","fromSchema","schema","fromJSON","json","memberName","BitString","Error","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","algorithmId","algorithmParams","ObjectIdentifier","namedCurve","valueBlock","toString","valueHex","ex","publicKeyASN1","fromBER","offset","toSchema","toJSON","jwk","kty","publicKeyJWK","Object","keys","key","toUpperCase","Null","toBER","importKey","publicKey","sequence","Promise","resolve","_this","reject","crypto","then","exportKey","exportedKey","exception","undefined","error"],"mappings":"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","file":"PublicKeyInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getCrypto } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport ECPublicKey from \"./ECPublicKey.js\";\r\nimport RSAPublicKey from \"./RSAPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PublicKeyInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PublicKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description Algorithm identifier\r\n\t\t */\r\n\t\tthis.algorithm = getParametersValue(parameters, \"algorithm\", PublicKeyInfo.defaultValues(\"algorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description Subject public key value\r\n\t\t */\r\n\t\tthis.subjectPublicKey = getParametersValue(parameters, \"subjectPublicKey\", PublicKeyInfo.defaultValues(\"subjectPublicKey\"));\r\n\t\t\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPublicKey|RSAPublicKey}\r\n\t\t\t * @description Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PublicKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"subjectPublicKey\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PublicKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SubjectPublicKeyInfo  ::=  Sequence  {\r\n\t\t//    algorithm            AlgorithmIdentifier,\r\n\t\t//    subjectPublicKey     BIT STRING  }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [algorithm]\r\n\t\t * @property {string} [subjectPublicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.algorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.subjectPublicKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"subjectPublicKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"algorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsubjectPublicKey: \"subjectPublicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PublicKeyInfo\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\r\n\t\tthis.subjectPublicKey = asn1.result.subjectPublicKey;\r\n\t\t\r\n\t\tswitch(this.algorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.algorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.algorithm.algorithmParams instanceof asn1js.ObjectIdentifier)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPublicKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: this.subjectPublicKey.valueBlock.valueHex\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(publicKeyASN1.offset !== (-1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.algorithm.toSchema(),\r\n\t\t\t\tthis.subjectPublicKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\talgorithm: this.algorithm.toJSON(),\r\n\t\t\t\tsubjectPublicKey: this.subjectPublicKey.toJSON()\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\t\t\r\n\t\tswitch(this.algorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\t\t\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\t\t\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPublicKey({ json });\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ json });\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\timportKey(publicKey)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial check\r\n\t\tif(typeof publicKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide publicKey input parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Export public key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.exportKey(\"spki\", publicKey));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize internal variables by parsing exported value\r\n\t\tsequence = sequence.then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} exportedKey\r\n\t\t\t */\r\n\t\t\texportedKey =>\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedKey);\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\t_this.fromSchema(asn1.result);\r\n\t\t\t\t}\r\n\t\t\t\tcatch(exception)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Error during initializing object from schema\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn undefined;\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(`Error during exporting public key: ${error}`)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}