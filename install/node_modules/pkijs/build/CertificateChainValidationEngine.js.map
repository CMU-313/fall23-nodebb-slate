{"version":3,"sources":["../src/CertificateChainValidationEngine.js"],"names":["CertificateChainValidationEngine","constructor","parameters","trustedCerts","defaultValues","certs","crls","ocsps","checkDate","findOrigin","findIssuer","defaultFindOrigin","certificate","validationEngine","tbs","byteLength","encodeTBS","localCert","trustedCert","defaultFindIssuer","result","keyIdentifier","authorityCertIssuer","authorityCertSerialNumber","subject","isEqual","issuer","verificationResult","verify","ex","extensions","extension","extnID","parsedValue","checkCertificate","possibleIssuer","extensionFound","valueBlock","valueHex","push","authorityCertSerialNumberEqual","serialNumber","intermediateCert","i","length","splice","memberName","Date","Error","sort","checkUnique","array","unique","j","findIssuerResult","_this","buildPathResult","buildPath","copy","slice","issuerCertificates","crlsAndCertificates","localCerts","filter","element","status","statusMessage","nextUpdate","value","issuerCertificate","crl","findCRL","hashAlgorithm","signatureAlgorithm","algorithmId","getCertificateStatus","isForCertificate","findOCSP","needToCheckCRL","isCA","mustBeCA","keyUsagePresent","cRLSign","critical","resultCode","resultMessage","view","Uint8Array","cA","checkForCA","path","notBefore","notAfter","ocspResult","crlResult","isCertificateRevoked","isCertificateCA","basicCheck","certificatePath","found","k","shortestLength","shortestIndex","compareDNSName","name","constraint","namePrepared","constraintPrepared","nameSplitted","split","constraintSplitted","nameLen","constrLen","localeCompare","compareRFC822Name","ns","cs","compareUniformResourceIdentifier","charAt","nsPort","compareIPAddress","nameView","constraintView","compareDirectoryName","typesAndValues","nameStart","localResult","type","initialPolicySet","initialExplicitPolicy","initialPolicyMappingInhibit","initialInhibitPolicy","initialPermittedSubtreesSet","initialExcludedSubtreesSet","initialRequiredNameForms","explicitPolicyIndicator","policyMappingInhibitIndicator","inhibitAnyPolicyIndicator","pendingConstraints","Array","explicitPolicyPending","policyMappingInhibitPending","inhibitAnyPolicyPending","permittedSubtrees","excludedSubtrees","requiredNameForms","pathDepth","allPolicies","policiesAndCerts","anyPolicyArray","ii","policyMappings","certPolicies","explicitPolicyStart","s","certificatePolicies","policyIndex","policyIdentifier","certArray","requireExplicitPolicy","inhibitPolicyMapping","valueDec","searchAnyPolicy","mappings","issuerDomainPolicy","subjectDomainPolicy","issuerDomainPolicyIndex","subjectDomainPolicyIndex","n","m","authConstrPolicies","anyPolicyFound","userConstrPolicies","policyResult","subjectAltNames","certPermittedSubtrees","certExcludedSubtrees","concat","altNames","formFound","base","constrGroups","p","groupPermitted","valueExists","group","excluded","error","Object","message"],"mappings":"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","file":"CertificateChainValidationEngine.js","sourcesContent":["import { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getAlgorithmByOID, stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\nexport default class CertificateChainValidationEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateChainValidationEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @description Array of pre-defined trusted (by user) certificates\r\n\t\t */\r\n\t\tthis.trustedCerts = getParametersValue(parameters, \"trustedCerts\", this.defaultValues(\"trustedCerts\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @description Array with certificate chain. Could be only one end-user certificate in there!\r\n\t\t */\r\n\t\tthis.certs = getParametersValue(parameters, \"certs\", this.defaultValues(\"certs\"));\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @description Array of all CRLs for all certificates from certificate chain\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", this.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @description Array of all OCSP responses\r\n\t\t */\r\n\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", this.defaultValues(\"ocsps\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @description The date at which the check would be\r\n\t\t */\r\n\t\tthis.checkDate = getParametersValue(parameters, \"checkDate\", this.defaultValues(\"checkDate\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @description The date at which the check would be\r\n\t\t */\r\n\t\tthis.findOrigin = getParametersValue(parameters, \"findOrigin\", this.defaultValues(\"findOrigin\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @description The date at which the check would be\r\n\t\t */\r\n\t\tthis.findIssuer = getParametersValue(parameters, \"findIssuer\", this.defaultValues(\"findIssuer\"));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tstatic defaultFindOrigin(certificate, validationEngine)\r\n\t{\r\n\t\t//region Firstly encode TBS for certificate\r\n\t\tif(certificate.tbs.byteLength === 0)\r\n\t\t\tcertificate.tbs = certificate.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const localCert of validationEngine.certs)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(localCert.tbs.byteLength === 0)\r\n\t\t\t\tlocalCert.tbs = localCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, localCert.tbs))\r\n\t\t\t\treturn \"Intermediate Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(trustedCert.tbs.byteLength === 0)\r\n\t\t\t\ttrustedCert.tbs = trustedCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, trustedCert.tbs))\r\n\t\t\t\treturn \"Trusted Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn \"Unknown\";\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync defaultFindIssuer(certificate, validationEngine)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet result = [];\r\n\t\t\r\n\t\tlet keyIdentifier = null;\r\n\t\t\r\n\t\tlet authorityCertIssuer = null;\r\n\t\tlet authorityCertSerialNumber = null;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Speed-up searching in case of self-signed certificates\r\n\t\tif(certificate.subject.isEqual(certificate.issuer))\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify();\r\n\t\t\t\tif(verificationResult === true)\r\n\t\t\t\t\treturn [certificate];\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find values to speed-up search\r\n\t\tif(\"extensions\" in certificate)\r\n\t\t{\r\n\t\t\tfor(const extension of certificate.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.35\") // AuthorityKeyIdentifier\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"keyIdentifier\" in extension.parsedValue)\r\n\t\t\t\t\t\tkeyIdentifier = extension.parsedValue.keyIdentifier;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"authorityCertIssuer\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertIssuer = extension.parsedValue.authorityCertIssuer;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(\"authorityCertSerialNumber\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux function\r\n\t\tfunction checkCertificate(possibleIssuer)\r\n\t\t{\r\n\t\t\t//region Firstly search for appropriate extensions\r\n\t\t\tif(keyIdentifier !== null)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in possibleIssuer)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet extensionFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(const extension of possibleIssuer.extensions)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.extnID === \"2.5.29.14\") // SubjectKeyIdentifier\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\textensionFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(isEqualBuffer(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHex))\r\n\t\t\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extensionFound)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Now search for authorityCertSerialNumber\r\n\t\t\tlet authorityCertSerialNumberEqual = false;\r\n\t\t\t\r\n\t\t\tif(authorityCertSerialNumber !== null)\r\n\t\t\t\tauthorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region And at least search for Issuer data\r\n\t\t\tif(authorityCertIssuer !== null)\r\n\t\t\t{\r\n\t\t\t\tif(possibleIssuer.subject.isEqual(authorityCertIssuer))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(authorityCertSerialNumberEqual)\r\n\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(certificate.issuer.isEqual(possibleIssuer.subject))\r\n\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t\tcheckCertificate(trustedCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const intermediateCert of validationEngine.certs)\r\n\t\t\tcheckCertificate(intermediateCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Now perform certificate verification checking\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify(result[i]);\r\n\t\t\t\tif(verificationResult === false)\r\n\t\t\t\t\tresult.splice(i, 1);\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1); // Something wrong, remove the certificate\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tdefaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"trustedCerts\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"checkDate\":\r\n\t\t\t\treturn new Date();\r\n\t\t\tcase \"findOrigin\":\r\n\t\t\t\treturn CertificateChainValidationEngine.defaultFindOrigin;\r\n\t\t\tcase \"findIssuer\":\r\n\t\t\t\treturn this.defaultFindIssuer;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync sort()\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst localCerts = [];\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Building certificate path\r\n\t\tasync function buildPath(certificate)\r\n\t\t{\r\n\t\t\tconst result = [];\r\n\t\t\t\r\n\t\t\t//region Aux function checking array for unique elements\r\n\t\t\tfunction checkUnique(array)\r\n\t\t\t{\r\n\t\t\t\tlet unique = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let i = 0; i < array.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < array.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j === i)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(array[i] === array[j])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tunique = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!unique)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn unique;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst findIssuerResult = await _this.findIssuer(certificate, _this);\r\n\t\t\tif(findIssuerResult.length === 0)\r\n\t\t\t\tthrow new Error(\"No valid certificate paths found\");\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < findIssuerResult.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(findIssuerResult[i].tbs, certificate.tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push([findIssuerResult[i]]);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst buildPathResult = await buildPath(findIssuerResult[i]);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < buildPathResult.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst copy = buildPathResult[j].slice();\r\n\t\t\t\t\tcopy.splice(0, 0, findIssuerResult[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(checkUnique(copy))\r\n\t\t\t\t\t\tresult.push(copy);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tresult.push(buildPathResult[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find CRL for specific certificate\r\n\t\tasync function findCRL(certificate)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tconst issuerCertificates = [];\r\n\t\t\tconst crls = [];\r\n\t\t\tconst crlsAndCertificates = [];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all possible CRL issuers\r\n\t\t\tissuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\r\n\t\t\tif(issuerCertificates.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 1,\r\n\t\t\t\t\tstatusMessage: \"No certificate's issuers\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all CRLs for crtificate's issuer\r\n\t\t\tcrls.push(..._this.crls.filter(element => element.issuer.isEqual(certificate.issuer)));\r\n\t\t\tif(crls.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 1,\r\n\t\t\t\t\tstatusMessage: \"No CRLs for specific certificate issuer\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find specific certificate of issuer for each CRL\r\n\t\t\tfor(let i = 0; i < crls.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check \"nextUpdate\" for the CRL\r\n\t\t\t\t// The \"nextUpdate\" is older than \"checkDate\".\r\n\t\t\t\t// Thus we should do have another, updated CRL.\r\n\t\t\t\t// Thus the CRL assumed to be invalid.\r\n\t\t\t\tif(crls[i].nextUpdate.value < _this.checkDate)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < issuerCertificates.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst result = await crls[i].verify({ issuerCertificate: issuerCertificates[j] });\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcrlsAndCertificates.push({\r\n\t\t\t\t\t\t\t\tcrl: crls[i],\r\n\t\t\t\t\t\t\t\tcertificate: issuerCertificates[j]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(crlsAndCertificates.length)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\tstatusMessage: \"\",\r\n\t\t\t\t\tresult: crlsAndCertificates\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 1,\r\n\t\t\t\tstatusMessage: \"No valid CRLs found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find OCSP for specific certificate\r\n\t\tasync function findOCSP(certificate, issuerCertificate)\r\n\t\t{\r\n\t\t\t//region Get hash algorithm from certificate\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\tif((\"hash\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Search for OCSP response for the certificate\r\n\t\t\tfor(let i = 0; i < _this.ocsps.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await _this.ocsps[i].getCertificateStatus(certificate, issuerCertificate);\r\n\t\t\t\tif(result.isForCertificate)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(result.status === 0)\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for certificate to be CA\r\n\t\tasync function checkForCA(certificate, needToCheckCRL = false)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet isCA = false;\r\n\t\t\tlet mustBeCA = false;\r\n\t\t\tlet keyUsagePresent = false;\r\n\t\t\tlet cRLSign = false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in certificate)\r\n\t\t\t{\r\n\t\t\t\tfor(let j = 0; j < certificate.extensions.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate.extensions[j].critical === true) &&\r\n\t\t\t\t\t\t((\"parsedValue\" in certificate.extensions[j]) === false))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 6,\r\n\t\t\t\t\t\t\tresultMessage: `Unable to parse critical certificate extension: ${certificate.extensions[j].extnID}`\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.15\") // KeyUsage\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkeyUsagePresent = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst view = new Uint8Array(certificate.extensions[j].parsedValue.valueBlock.valueHex);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x04) === 0x04) // Set flag \"keyCertSign\"\r\n\t\t\t\t\t\t\tmustBeCA = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x02) === 0x02) // Set flag \"cRLSign\"\r\n\t\t\t\t\t\t\tcRLSign = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in certificate.extensions[j].parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(certificate.extensions[j].parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((mustBeCA === true) && (isCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 3,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstaints\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 4,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\tif((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false)))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 5,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA === false)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 7,\r\n\t\t\t\t\tresultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true,\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: \"\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Basic check for certificate path\r\n\t\tasync function basicCheck(path, checkDate)\r\n\t\t{\r\n\t\t\t//region Check that all dates are valid\r\n\t\t\tfor(let i = 0; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif((path[i].notBefore.value > checkDate) ||\r\n\t\t\t\t\t(path[i].notAfter.value < checkDate))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 8,\r\n\t\t\t\t\t\tresultMessage: \"The certificate is either not yet valid or expired\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check certificate name chain\r\n\t\t\t\r\n\t\t\t// We should have at least two certificates: end entity and trusted root\r\n\t\t\tif(path.length < 2)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 9,\r\n\t\t\t\t\tresultMessage: \"Too short certificate path\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(let i = (path.length - 2); i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\t//region Check that we do not have a \"self-signed\" certificate\r\n\t\t\t\tif(path[i].issuer.isEqual(path[i].subject) === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(path[i].issuer.isEqual(path[i + 1].subject) === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 10,\r\n\t\t\t\t\t\t\tresultMessage: \"Incorrect name chaining\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"trusted root\") to be non-revoked\r\n\t\t\tif((_this.crls.length !== 0) || (_this.ocsps.length !== 0)) // If CRLs and OCSPs are empty then we consider all certificates to be valid\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < (path.length - 2); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tlet ocspResult;\r\n\t\t\t\t\tlet crlResult;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check OCSPs first\r\n\t\t\t\t\tif(_this.ocsps.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tocspResult = await findOCSP(path[i], path[i + 1]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(ocspResult)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates was revoked via OCSP response\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 2: // continue to check the certificate with CRL\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check CRLs\r\n\t\t\t\t\tif(_this.crls.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcrlResult = await findCRL(path[i]);\r\n\t\t\t\t\t\tif(crlResult.status)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrow {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let j = 0; j < crlResult.result.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Check that the CRL issuer certificate have not been revoked\r\n\t\t\t\t\t\t\tconst isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\r\n\t\t\t\t\t\t\tif(isCertificateRevoked)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates had been revoked\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Check that the CRL issuer certificate is a CA certificate\r\n\t\t\t\t\t\t\tconst isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\r\n\t\t\t\t\t\t\tif(isCertificateCA.result === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 13,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(ocspResult === 2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: \"No revocation values found for one of certificates\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"end entity\") in the path to be a CA certificate\r\n\t\t\tfor(let i = 1; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await checkForCA(path[i]);\r\n\t\t\t\tif(result.result === false)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 14,\r\n\t\t\t\t\t\tresultMessage: \"One of intermediate certificates is not a CA certificate\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Do main work\r\n\t\t//region Initialize \"localCerts\" by value of \"_this.certs\" + \"_this.trustedCerts\" arrays\r\n\t\tlocalCerts.push(..._this.trustedCerts);\r\n\t\tlocalCerts.push(..._this.certs);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check all certificates for been unique\r\n\t\tfor(let i = 0; i < localCerts.length; i++)\r\n\t\t{\r\n\t\t\tfor(let j = 0; j < localCerts.length; j++)\r\n\t\t\t{\r\n\t\t\t\tif(i === j)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(isEqualBuffer(localCerts[i].tbs, localCerts[j].tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalCerts.splice(j, 1);\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet result;\r\n\t\tconst certificatePath = [localCerts[localCerts.length - 1]]; // The \"end entity\" certificate must be the least in \"certs\" array\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Build path for \"end entity\" certificate\r\n\t\tresult = await buildPath(localCerts[localCerts.length - 1]);\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 60,\r\n\t\t\t\tresultMessage: \"Unable to find certificate path\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Exclude certificate paths not ended with \"trusted roots\"\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tlet found = false;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < (result[i]).length; j++)\r\n\t\t\t{\r\n\t\t\t\tconst certificate = (result[i])[j];\r\n\t\t\t\t\r\n\t\t\t\tfor(let k = 0; k < _this.trustedCerts.length; k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(certificate.tbs, _this.trustedCerts[k].tbs))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!found)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1);\r\n\t\t\t\ti = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\tthrow {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 97,\r\n\t\t\t\tresultMessage: \"No valid certificate paths found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find shortest certificate path (for the moment it is the only criteria)\r\n\t\tlet shortestLength = result[0].length;\r\n\t\tlet shortestIndex = 0;\r\n\t\t\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tif(result[i].length < shortestLength)\r\n\t\t\t{\r\n\t\t\t\tshortestLength = result[i].length;\r\n\t\t\t\tshortestIndex = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create certificate path for basic check\r\n\t\tfor(let i = 0; i < result[shortestIndex].length; i++)\r\n\t\t\tcertificatePath.push((result[shortestIndex])[i]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform basic checking for all certificates in the path\r\n\t\tresult = await basicCheck(certificatePath, _this.checkDate);\r\n\t\tif(result.result === false)\r\n\t\t\tthrow result;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn certificatePath;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Major verification function for certificate chain.\r\n\t * @param {{initialPolicySet, initialExplicitPolicy, initialPolicyMappingInhibit, initialInhibitPolicy, initialPermittedSubtreesSet, initialExcludedSubtreesSet, initialRequiredNameForms}} [parameters]\r\n\t * @returns {Promise}\r\n\t */\r\n\tasync verify(parameters = {})\r\n\t{\r\n\t\t//region Auxiliary functions for name constraints checking\r\n\t\tfunction compareDNSName(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two dNSName values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">DNS from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for DNS from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Length calculation and additional check\r\n\t\t\tconst nameLen = nameSplitted.length;\r\n\t\t\tconst constrLen = constraintSplitted.length;\r\n\t\t\t\r\n\t\t\tif((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen))\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that no part of \"name\" has zero length\r\n\t\t\tfor(let i = 0; i < nameLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(nameSplitted[i].length === 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that no part of \"constraint\" has zero length\r\n\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(constraintSplitted[i].length === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(constrLen === 1)\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that \"name\" has a tail as \"constraint\"\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(constraintSplitted[constrLen - 1 - i].length === 0)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareRFC822Name(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two rfc822Name values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">E-mail address from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for e-mail address from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\tconst nameSplitted = namePrepared.split(\"@\");\r\n\t\t\tconst constraintSplitted = constraintPrepared.split(\"@\");\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Splitted array length checking\r\n\t\t\tif((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(constraintSplitted.length === 1)\r\n\t\t\t{\r\n\t\t\t\tconst result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\r\n\t\t\t\t\r\n\t\t\t\tif(result)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Make a \"splitted\" versions of domain name from \"constraint\" and \"name\"\r\n\t\t\t\t\tconst ns = nameSplitted[1].split(\".\");\r\n\t\t\t\t\tconst cs = constraintSplitted[0].split(\".\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(cs[0].length === 0)\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn ns.length === cs.length;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (namePrepared.localeCompare(constraintPrepared) === 0);\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareUniformResourceIdentifier(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two uniformResourceIdentifier values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">uniformResourceIdentifier from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for uniformResourceIdentifier from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tlet namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find out a major URI part to compare with\r\n\t\t\tconst ns = namePrepared.split(\"/\");\r\n\t\t\tconst cs = constraintPrepared.split(\"/\");\r\n\t\t\t\r\n\t\t\tif(cs.length > 1) // Malformed constraint\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\tif(ns.length > 1) // Full URI string\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < ns.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst nsPort = ns[i].split(\":\");\r\n\t\t\t\t\t\tnamePrepared = nsPort[0];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst result = compareDNSName(namePrepared, constraintPrepared);\r\n\t\t\t\r\n\t\t\tif(result)\r\n\t\t\t{\r\n\t\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(constraintSplitted[0].length === 0)\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\r\n\t\t\t\treturn nameSplitted.length === constraintSplitted.length;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareIPAddress(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two iPAddress values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">iPAddress from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">Constraint for iPAddress from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Common variables\r\n\t\t\tconst nameView = new Uint8Array(name.valueBlock.valueHex);\r\n\t\t\tconst constraintView = new Uint8Array(constraint.valueBlock.valueHex);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with IPv4 addresses\r\n\t\t\tif((nameView.length === 4) && (constraintView.length === 8))\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < 4; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with IPv6 addresses\r\n\t\t\tif((nameView.length === 16) && (constraintView.length === 32))\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < 16; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareDirectoryName(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two directoryName values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.simpl.RDN\">directoryName from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.simpl.RDN\">Constraint for directoryName from name</param>\r\n\t\t\t/// <param name=\"any\" type=\"Boolean\">Boolean flag - should be comparision interrupted after first match or we need to match all \"constraints\" parts</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Initial check\r\n\t\t\tif((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\r\n\t\t\t\treturn true;\r\n\t\t\t\r\n\t\t\tif(name.typesAndValues.length < constraint.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Initial variables\r\n\t\t\tlet result = true;\r\n\t\t\tlet nameStart = 0;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < constraint.typesAndValues.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet localResult = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = nameStart; j < name.typesAndValues.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(name.typesAndValues[j].type === constraint.typesAndValues[i].type)\r\n\t\t\t\t\t\tresult = result && localResult;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(localResult === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((nameStart === 0) || (nameStart === j))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnameStart = j + 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse // Structure of \"name\" must be the same with \"constraint\"\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(localResult === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (nameStart === 0) ? false : result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//region Initial checks\r\n\t\t\tif(this.certs.length === 0)\r\n\t\t\t\tthrow \"Empty certificate array\";\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get input variables\r\n\t\t\tlet initialPolicySet = [];\r\n\t\t\tinitialPolicySet.push(\"2.5.29.32.0\"); // \"anyPolicy\"\r\n\t\t\t\r\n\t\t\tlet initialExplicitPolicy = false;\r\n\t\t\tlet initialPolicyMappingInhibit = false;\r\n\t\t\tlet initialInhibitPolicy = false;\r\n\t\t\t\r\n\t\t\tlet initialPermittedSubtreesSet = []; // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialExcludedSubtreesSet = [];  // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialRequiredNameForms = [];    // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\t\r\n\t\t\tif(\"initialPolicySet\" in parameters)\r\n\t\t\t\tinitialPolicySet = parameters.initialPolicySet;\r\n\t\t\t\r\n\t\t\tif(\"initialExplicitPolicy\" in parameters)\r\n\t\t\t\tinitialExplicitPolicy = parameters.initialExplicitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPolicyMappingInhibit\" in parameters)\r\n\t\t\t\tinitialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit;\r\n\t\t\t\r\n\t\t\tif(\"initialInhibitPolicy\" in parameters)\r\n\t\t\t\tinitialInhibitPolicy = parameters.initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPermittedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialExcludedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialRequiredNameForms\" in parameters)\r\n\t\t\t\tinitialRequiredNameForms = parameters.initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet explicitPolicyIndicator = initialExplicitPolicy;\r\n\t\t\tlet policyMappingInhibitIndicator = initialPolicyMappingInhibit;\r\n\t\t\tlet inhibitAnyPolicyIndicator = initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tconst pendingConstraints = new Array(3);\r\n\t\t\tpendingConstraints[0] = false; // For \"explicitPolicyPending\"\r\n\t\t\tpendingConstraints[1] = false; // For \"policyMappingInhibitPending\"\r\n\t\t\tpendingConstraints[2] = false; // For \"inhibitAnyPolicyPending\"\r\n\t\t\t\r\n\t\t\tlet explicitPolicyPending = 0;\r\n\t\t\tlet policyMappingInhibitPending = 0;\r\n\t\t\tlet inhibitAnyPolicyPending = 0;\r\n\t\t\t\r\n\t\t\tlet permittedSubtrees = initialPermittedSubtreesSet;\r\n\t\t\tlet excludedSubtrees = initialExcludedSubtreesSet;\r\n\t\t\tconst requiredNameForms = initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet pathDepth = 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Sorting certificates in the chain array\r\n\t\t\tthis.certs = await this.sort();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with policies\r\n\t\t\t//region Support variables\r\n\t\t\tconst allPolicies = []; // Array of all policies (string values)\r\n\t\t\tallPolicies.push(\"2.5.29.32.0\"); // Put \"anyPolicy\" at first place\r\n\t\t\t\r\n\t\t\tconst policiesAndCerts = []; // In fact \"array of array\" where rows are for each specific policy, column for each certificate and value is \"true/false\"\r\n\t\t\t\r\n\t\t\tconst anyPolicyArray = new Array(this.certs.length - 1); // Minus \"trusted anchor\"\r\n\t\t\tfor(let ii = 0; ii < (this.certs.length - 1); ii++)\r\n\t\t\t\tanyPolicyArray[ii] = true;\r\n\t\t\t\r\n\t\t\tpoliciesAndCerts.push(anyPolicyArray);\r\n\t\t\t\r\n\t\t\tconst policyMappings = new Array(this.certs.length - 1); // Array of \"PolicyMappings\" for each certificate\r\n\t\t\tconst certPolicies = new Array(this.certs.length - 1); // Array of \"CertificatePolicies\" for each certificate\r\n\t\t\t\r\n\t\t\tlet explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Gather all neccessary information from certificate chain\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get information about certificate extensions\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region CertificatePolicies\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.32\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertPolicies[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Remove entry from \"anyPolicies\" for the certificate\r\n\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[s] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[s])[i];\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].extensions[j].parsedValue.certificatePolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Try to find extension in \"allPolicies\" array\r\n\t\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier === allPolicies[s])\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpolicyIndex = s;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(policyIndex === (-1))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallPolicies.push(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tconst certArray = new Array(this.certs.length - 1);\r\n\t\t\t\t\t\t\t\t\tcertArray[i] = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tpoliciesAndCerts.push(certArray);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t(policiesAndCerts[policyIndex])[i] = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyMappings\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.33\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappingInhibitIndicator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 98,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"Policy mapping prohibited\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tpolicyMappings[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.36\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region requireExplicitPolicy\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.requireExplicitPolicy === 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[0] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[0] = true;\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = this.certs[i].extensions[j].parsedValue.requireExplicitPolicy;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = (explicitPolicyPending > this.certs[i].extensions[j].parsedValue.requireExplicitPolicy) ? this.certs[i].extensions[j].parsedValue.requireExplicitPolicy : explicitPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region inhibitPolicyMapping\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping === 0)\r\n\t\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[1] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[1] = true;\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = (policyMappingInhibitPending > (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1)) ? (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region InhibitAnyPolicy\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.54\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.valueBlock.valueDec === 0)\r\n\t\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[2] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[2] = true;\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = this.certs[i].extensions[j].parsedValue.valueBlock.valueDec;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = (inhibitAnyPolicyPending > this.certs[i].extensions[j].parsedValue.valueBlock.valueDec) ? this.certs[i].extensions[j].parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check \"inhibitAnyPolicyIndicator\"\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Find \"anyPolicy\" index\r\n\t\t\t\t\t\tfor(let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[searchAnyPolicy] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyIndex = searchAnyPolicy;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(policyIndex !== (-1))\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[0])[i]; // Unset value to \"undefined\" for \"anyPolicies\" value for current certificate\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Process with \"pending constraints\"\r\n\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[0] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\texplicitPolicyPending--;\r\n\t\t\t\t\t\t\tif(explicitPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tpendingConstraints[0] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(policyMappingInhibitIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[1] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpolicyMappingInhibitPending--;\r\n\t\t\t\t\t\t\tif(policyMappingInhibitPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[1] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[2] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tinhibitAnyPolicyPending--;\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[2] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with policy mappings\r\n\t\t\tfor(let i = 0; i < (this.certs.length - 1); i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check that there is \"policy mapping\" for level \"i + 1\"\r\n\t\t\t\tif((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let k = 0; k < policyMappings[i + 1].mappings.length; k++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do not have \"anyPolicy\" in current mapping\r\n\t\t\t\t\t\tif((policyMappings[i + 1].mappings[k].issuerDomainPolicy === \"2.5.29.32.0\") || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 99,\r\n\t\t\t\t\t\t\t\tresultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet issuerDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\tlet subjectDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Search for index of policies indedes\r\n\t\t\t\t\t\tfor(let n = 0; n < allPolicies.length; n++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\r\n\t\t\t\t\t\t\t\tissuerDomainPolicyIndex = n;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\r\n\t\t\t\t\t\t\t\tsubjectDomainPolicyIndex = n;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Delete existing \"issuerDomainPolicy\" because on the level we mapped the policy to another one\r\n\t\t\t\t\t\tif(typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[issuerDomainPolicyIndex])[i];\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check all policies for the certificate\r\n\t\t\t\t\t\tfor(let j = 0; j < certPolicies[i].certificatePolicies.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Set mapped policy for current certificate\r\n\t\t\t\t\t\t\t\tif((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1)))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let m = 0; m <= i; m++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\")\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t(policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\r\n\t\t\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[subjectDomainPolicyIndex])[m];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with \"explicitPolicyIndicator\" and \"anyPolicy\"\r\n\t\t\tfor(let i = 0; i < allPolicies.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(allPolicies[i] === \"2.5.29.32.0\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < explicitPolicyStart; j++)\r\n\t\t\t\t\t\tdelete (policiesAndCerts[i])[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of authorities-constrained policies\"\r\n\t\t\tconst authConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < policiesAndCerts.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet found = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < (this.certs.length - 1); j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet anyPolicyFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((j < explicitPolicyStart) && (allPolicies[i] === \"2.5.29.32.0\") && (allPolicies.length > 1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(typeof (policiesAndCerts[i])[j] === \"undefined\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j >= explicitPolicyStart)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Search for \"anyPolicy\" in the policy set\r\n\t\t\t\t\t\t\tfor(let k = 0; k < allPolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[k] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((policiesAndCerts[k])[j] === true)\r\n\t\t\t\t\t\t\t\t\t\tanyPolicyFound = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!anyPolicyFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found === true)\r\n\t\t\t\t\tauthConstrPolicies.push(allPolicies[i]);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of user-constrained policies\"\r\n\t\t\tlet userConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tif((initialPolicySet.length === 1) && (initialPolicySet[0] === \"2.5.29.32.0\") && (explicitPolicyIndicator === false))\r\n\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif((authConstrPolicies.length === 1) && (authConstrPolicies[0] === \"2.5.29.32.0\"))\r\n\t\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < authConstrPolicies.length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let j = 0; j < initialPolicySet.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tuserConstrPolicies.push(authConstrPolicies[i]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Combine output object\r\n\t\t\tconst policyResult = {\r\n\t\t\t\tresult: (userConstrPolicies.length > 0),\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: (userConstrPolicies.length > 0) ? \"\" : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\r\n\t\t\t\tauthConstrPolicies,\r\n\t\t\t\tuserConstrPolicies,\r\n\t\t\t\texplicitPolicyIndicator,\r\n\t\t\t\tpolicyMappings,\r\n\t\t\t\tcertificatePath: this.certs\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif(userConstrPolicies.length === 0)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with name constraints\r\n\t\t\t//region Check a result from \"policy checking\" part\r\n\t\t\tif(policyResult.result === false)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check all certificates, excluding \"trust anchor\"\r\n\t\t\tpathDepth = 1;\r\n\t\t\t\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\t//region Support variables\r\n\t\t\t\tlet subjectAltNames = [];\r\n\t\t\t\t\r\n\t\t\t\tlet certPermittedSubtrees = [];\r\n\t\t\t\tlet certExcludedSubtrees = [];\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region NameConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.30\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(\"permittedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertPermittedSubtrees = certPermittedSubtrees.concat(this.certs[i].extensions[j].parsedValue.permittedSubtrees);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(\"excludedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertExcludedSubtrees = certExcludedSubtrees.concat(this.certs[i].extensions[j].parsedValue.excludedSubtrees);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region SubjectAltName\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.17\")\r\n\t\t\t\t\t\t\tsubjectAltNames = subjectAltNames.concat(this.certs[i].extensions[j].parsedValue.altNames);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"required name forms\"\r\n\t\t\t\tlet formFound = (requiredNameForms.length <= 0);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < requiredNameForms.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(requiredNameForms[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase 4: // directoryName\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(requiredNameForms[j].base.value.typesAndValues.length !== this.certs[i].subject.typesAndValues.length)\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tformFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tformFound = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(formFound === true)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault: // ??? Probably here we should reject the certificate ???\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(formFound === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 21;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"No neccessary name form found\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"permited sub-trees\"\r\n\t\t\t\t//region Make groups for all types of constraints\r\n\t\t\t\tconst constrGroups = []; // Array of array for groupped constraints\r\n\t\t\t\tconstrGroups[0] = []; // rfc822Name\r\n\t\t\t\tconstrGroups[1] = []; // dNSName\r\n\t\t\t\tconstrGroups[2] = []; // directoryName\r\n\t\t\t\tconstrGroups[3] = []; // uniformResourceIdentifier\r\n\t\t\t\tconstrGroups[4] = []; // iPAddress\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < permittedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(permittedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tconstrGroups[0].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tconstrGroups[1].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\tconstrGroups[2].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tconstrGroups[3].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tconstrGroups[4].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check name constraints groupped by type, one-by-one\r\n\t\t\t\tfor(let p = 0; p < 5; p++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet groupPermitted = false;\r\n\t\t\t\t\tlet valueExists = false;\r\n\t\t\t\t\tconst group = constrGroups[p];\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 0; j < group.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(p)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\tgroupPermitted = compareDirectoryName(this.certs[i].subject, group[j].base.value);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(groupPermitted)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((groupPermitted === false) && (group.length > 0) && valueExists)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\t\tpolicyResult.resultCode = 41;\r\n\t\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"excluded sub-trees\"\r\n\t\t\t\tlet excluded = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < excludedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(excludedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length >= 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\texcluded = excluded || compareDirectoryName(this.certs[i].subject, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault: // No action, but probably here we need to create a warning for \"malformed constraint\"\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(excluded)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(excluded === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 42;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Append \"cert_..._subtrees\" to \"..._subtrees\"\r\n\t\t\t\tpermittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\r\n\t\t\t\texcludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\tcatch(error)\r\n\t\t{\r\n\t\t\tif(error instanceof Object)\r\n\t\t\t{\r\n\t\t\t\tif(\"resultMessage\" in error)\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t\r\n\t\t\t\tif(\"message\" in error)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: -1,\r\n\t\t\t\t\t\tresultMessage: error.message\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: -1,\r\n\t\t\t\tresultMessage: error\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}