{"version":3,"sources":["../src/CertID.js"],"names":["asn1js","CertID","constructor","parameters","hashAlgorithm","defaultValues","issuerNameHash","issuerKeyHash","serialNumber","fromSchema","schema","memberName","OctetString","Integer","Error","compareWithDefault","memberValue","algorithmId","isEqual","names","Sequence","name","blockName","value","hashAlgorithmObject","asn1","compareSchema","verified","result","toSchema","toJSON","certificateID","valueBlock","valueHex","createForCertificate","certificate","sequence","Promise","resolve","issuerCertificate","crypto","reject","hashOID","algorithmParams","Null","then","digest","subject","toBER","error","issuerKeyBuffer","subjectPublicKeyInfo","subjectPublicKey"],"mappings":"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","file":"CertID.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class CertID \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertID class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", CertID.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description issuerNameHash\r\n\t\t */\r\n\t\tthis.issuerNameHash = getParametersValue(parameters, \"issuerNameHash\", CertID.defaultValues(\"issuerNameHash\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description issuerKeyHash\r\n\t\t */\r\n\t\tthis.issuerKeyHash = getParametersValue(parameters, \"issuerKeyHash\", CertID.defaultValues(\"issuerKeyHash\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", CertID.defaultValues(\"serialNumber\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn (memberValue.isEqual(CertID.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertID          ::=     SEQUENCE {\r\n\t\t//    hashAlgorithm       AlgorithmIdentifier,\r\n\t\t//    issuerNameHash      OCTET STRING, -- Hash of issuer's DN\r\n\t\t//    issuerKeyHash       OCTET STRING, -- Hash of issuer's public key\r\n\t\t//    serialNumber        CertificateSerialNumber }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [hashAlgorithmObject]\r\n\t\t * @property {string} [issuerNameHash]\r\n\t\t * @property {string} [issuerKeyHash]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashAlgorithmObject || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.hashAlgorithm || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerNameHash || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerKeyHash || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"hashAlgorithm\",\r\n\t\t\t\"issuerNameHash\",\r\n\t\t\t\"issuerKeyHash\",\r\n\t\t\t\"serialNumber\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertID.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: \"hashAlgorithm\",\r\n\t\t\t\t\tissuerNameHash: \"issuerNameHash\",\r\n\t\t\t\t\tissuerKeyHash: \"issuerKeyHash\",\r\n\t\t\t\t\tserialNumber: \"serialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertID\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\t\tthis.issuerNameHash = asn1.result.issuerNameHash;\r\n\t\tthis.issuerKeyHash = asn1.result.issuerKeyHash;\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.hashAlgorithm.toSchema(),\r\n\t\t\t\tthis.issuerNameHash,\r\n\t\t\t\tthis.issuerKeyHash,\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\thashAlgorithm: this.hashAlgorithm.toJSON(),\r\n\t\t\tissuerNameHash: this.issuerNameHash.toJSON(),\r\n\t\t\tissuerKeyHash: this.issuerKeyHash.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"CertIDs\" are equal\r\n\t * @param {CertID} certificateID Identifier of the certificate to be checked\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(certificateID)\r\n\t{\r\n\t\t//region Check \"hashAlgorithm\"\r\n\t\tif(!this.hashAlgorithm.algorithmId === certificateID.hashAlgorithm.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"issuerNameHash\"\r\n\t\tif(isEqualBuffer(this.issuerNameHash.valueBlock.valueHex, certificateID.issuerNameHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"issuerKeyHash\"\r\n\t\tif(isEqualBuffer(this.issuerKeyHash.valueBlock.valueHex, certificateID.issuerKeyHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"serialNumber\"\r\n\t\tif(!this.serialNumber.isEqual(certificateID.serialNumber))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP certificate identifier for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet issuerCertificate;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Parameter \\\"hashAlgorithm\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t\r\n\t\tconst hashOID = getOIDByAlgorithm({ name: parameters.hashAlgorithm });\r\n\t\tif(hashOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect \"hashAlgorithm\": ${this.hashAlgorithm}`);\r\n\t\t\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t\r\n\t\tif(\"issuerCertificate\" in parameters)\r\n\t\t\tissuerCertificate = parameters.issuerCertificate;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"Parameter \\\"issuerCertificate\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize \"serialNumber\" field\r\n\t\tthis.serialNumber = certificate.serialNumber;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create \"issuerNameHash\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false)),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create \"issuerKeyHash\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.issuerNameHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\tconst issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\treturn crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\tthis.issuerKeyHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}