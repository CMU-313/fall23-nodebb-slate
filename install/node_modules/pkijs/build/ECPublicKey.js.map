{"version":3,"sources":["../src/ECPublicKey.js"],"names":["asn1js","ECPublicKey","constructor","parameters","x","defaultValues","y","namedCurve","fromSchema","schema","fromJSON","json","memberName","ArrayBuffer","Error","compareWithDefault","memberValue","RawData","view","Uint8Array","coordinateLength","byteLength","slice","toSchema","data","buffer","toJSON","crvName","crv","coodinateLength","toUpperCase","convertBuffer","convertBufferView","set"],"mappings":"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","file":"ECPublicKey.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5480\r\n */\r\nexport default class ECPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECCPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description type\r\n\t\t */\r\n\t\tthis.x = getParametersValue(parameters, \"x\", ECPublicKey.defaultValues(\"x\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description values\r\n\t\t */\r\n\t\tthis.y = getParametersValue(parameters, \"y\", ECPublicKey.defaultValues(\"y\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description namedCurve\r\n\t\t */\r\n\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPublicKey.defaultValues(\"namedCurve\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn (isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\treturn new asn1js.RawData();\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert ArrayBuffer into current class\r\n\t * @param {!ArrayBuffer} schema Special case: schema is an ArrayBuffer\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tif((schema instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\r\n\t\tconst view = new Uint8Array(schema);\r\n\t\tif(view[0] !== 0x04)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tlet coordinateLength;\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcoordinateLength = 32;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcoordinateLength = 48;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcoordinateLength = 66;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect curve OID: ${this.namedCurve}`);\r\n\t\t}\r\n\r\n\t\tif(schema.byteLength !== (coordinateLength * 2 + 1))\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t\r\n\t\tthis.x = schema.slice(1, coordinateLength + 1);\r\n\t\tthis.y = schema.slice(1 + coordinateLength, coordinateLength * 2 + 1);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn new asn1js.RawData({ data: utilConcatBuf(\r\n\t\t\t(new Uint8Array([0x04])).buffer,\r\n\t\t\tthis.x,\r\n\t\t\tthis.y\r\n\t\t)\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet crvName = \"\";\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcrvName = \"P-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcrvName = \"P-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcrvName = \"P-521\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tcrv: crvName,\r\n\t\t\tx: toBase64(arrayBufferToString(this.x), true, true, false),\r\n\t\t\ty: toBase64(arrayBufferToString(this.y), true, true, false)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coodinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.crv.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"P-256\":\r\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\t\tcoodinateLength = 32;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-384\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\r\n\t\t\t\t\tcoodinateLength = 48;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-521\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\r\n\t\t\t\t\tcoodinateLength = 66;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"x\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.x, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.x = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.x);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.x = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"x\\\"\");\r\n\r\n\t\tif(\"y\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.y, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.y = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.y);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.y = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"y\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}