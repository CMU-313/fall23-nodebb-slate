{"version":3,"sources":["../src/TimeStampResp.js"],"names":["asn1js","TimeStampResp","constructor","parameters","status","defaultValues","timeStampToken","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","contentType","content","Any","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","sign","privateKey","hashAlgorithm","Promise","reject","signed","verify","verificationParameters","signer","trustedCerts","data","ArrayBuffer"],"mappings":"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","file":"TimeStampResp.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PKIStatusInfo from \"./PKIStatusInfo.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport SignedData from \"./SignedData.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TimeStampResp\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TimeStampResp class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {PKIStatusInfo}\r\n\t\t * @description status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", TimeStampResp.defaultValues(\"status\"));\r\n\r\n\t\tif(\"timeStampToken\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ContentInfo}\r\n\t\t\t * @description timeStampToken\r\n\t\t\t */\r\n\t\t\tthis.timeStampToken = getParametersValue(parameters, \"timeStampToken\", TimeStampResp.defaultValues(\"timeStampToken\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn new PKIStatusInfo();\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn new ContentInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn ((PKIStatusInfo.compareWithDefault(\"status\", memberValue.status)) &&\r\n\t\t\t\t\t\t((\"statusStrings\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"failInfo\" in memberValue) === false));\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn ((memberValue.contentType === \"\") &&\r\n\t\t\t\t\t\t(memberValue.content instanceof asn1js.Any));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//TimeStampResp ::= SEQUENCE  {\r\n\t\t//    status                  PKIStatusInfo,\r\n\t\t//    timeStampToken          TimeStampToken     OPTIONAL  }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [timeStampToken]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TimeStampResp\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tPKIStatusInfo.schema(names.status || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.status\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tContentInfo.schema(names.timeStampToken || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.timeStampToken\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TimeStampResp.status\",\r\n\t\t\t\"TimeStampResp.timeStampToken\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTimeStampResp.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TimeStampResp\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.status = new PKIStatusInfo({ schema: asn1.result[\"TimeStampResp.status\"] });\r\n\t\tif(\"TimeStampResp.timeStampToken\" in asn1.result)\r\n\t\t\tthis.timeStampToken = new ContentInfo({ schema: asn1.result[\"TimeStampResp.timeStampToken\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.status.toSchema());\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\toutputArray.push(this.timeStampToken.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\t_object.timeStampToken = this.timeStampToken.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign current TSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Sign internal signed data value\r\n\t\tconst signed = new ContentInfo({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.sign(privateKey, 0, hashAlgorithm);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TSP Response\r\n\t * @param {Object} verificationParameters Input parameters for verification\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(verificationParameters = { signer: 0, trustedCerts: [], data: new ArrayBuffer(0) })\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Verify internal signed data value\r\n\t\tconst signed = new SignedData({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.verify(verificationParameters);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}