{"version":3,"sources":["../src/AttributeTypeAndValue.js"],"names":["asn1js","AttributeTypeAndValue","constructor","parameters","type","defaultValues","value","fromSchema","schema","memberName","Error","names","Sequence","name","blockName","ObjectIdentifier","Any","asn1","compareSchema","verified","result","valueBlock","toString","typeValue","toSchema","toJSON","_object","Object","keys","length","isEqual","compareTo","Utf8String","BmpString","UniversalString","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","value1","value2","localeCompare","valueBeforeDecode","ArrayBuffer"],"mappings":"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","file":"AttributeTypeAndValue.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AttributeTypeAndValue\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeTypeAndValue class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @description Value of the AttributeTypeAndValue class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeTypeAndValue class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//AttributeTypeAndValue ::= Sequence {\r\n\t\t//    type     AttributeType,\r\n\t\t//    value    AttributeValue }\r\n\t\t//\r\n\t\t//AttributeType ::= OBJECT IDENTIFIER\r\n\t\t//\r\n\t\t//AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [type] Name for \"type\" element\r\n\t\t * @property {string} [value] Name for \"value\" element\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.value || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"type\",\r\n\t\t\t\"typeValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeTypeAndValue.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalue: \"typeValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeTypeAndValue\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.value = asn1.result.typeValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tthis.value\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttype: this.type\r\n\t\t};\r\n\r\n\t\tif(Object.keys(this.value).length !== 0)\r\n\t\t\t_object.value = this.value.toJSON();\r\n\t\telse\r\n\t\t\t_object.value = this.value;\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\r\n\t * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof AttributeTypeAndValue)\r\n\t\t{\r\n\t\t\tif(this.type !== compareTo.type)\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\tif(((this.value instanceof asn1js.Utf8String) && (compareTo.value instanceof asn1js.Utf8String)) ||\r\n\t\t\t\t((this.value instanceof asn1js.BmpString) && (compareTo.value instanceof asn1js.BmpString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.UniversalString) && (compareTo.value instanceof asn1js.UniversalString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.NumericString) && (compareTo.value instanceof asn1js.NumericString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.PrintableString) && (compareTo.value instanceof asn1js.PrintableString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.TeletexString) && (compareTo.value instanceof asn1js.TeletexString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.VideotexString) && (compareTo.value instanceof asn1js.VideotexString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.IA5String) && (compareTo.value instanceof asn1js.IA5String)) ||\r\n\t\t\t\t((this.value instanceof asn1js.GraphicString) && (compareTo.value instanceof asn1js.GraphicString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.VisibleString) && (compareTo.value instanceof asn1js.VisibleString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.GeneralString) && (compareTo.value instanceof asn1js.GeneralString)) ||\r\n\t\t\t\t((this.value instanceof asn1js.CharacterString) && (compareTo.value instanceof asn1js.CharacterString)))\r\n\t\t\t{\r\n\t\t\t\tconst value1 = stringPrep(this.value.valueBlock.value);\r\n\t\t\t\tconst value2 = stringPrep(compareTo.value.valueBlock.value);\r\n\t\t\t\t\r\n\t\t\t\tif(value1.localeCompare(value2) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse // Comparing as two ArrayBuffers\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.value.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}