{"version":3,"sources":["../src/PrivateKeyInfo.js"],"names":["asn1js","PrivateKeyInfo","constructor","parameters","version","defaultValues","privateKeyAlgorithm","privateKey","attributes","parsedKey","fromSchema","schema","fromJSON","json","memberName","OctetString","Error","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","asn1","compareSchema","verified","result","valueBlock","valueDec","Array","from","element","algorithmId","privateKeyASN1","fromBER","valueHex","offset","algorithmParams","ObjectIdentifier","namedCurve","toString","toSchema","outputArray","push","toJSON","object","jwk","kty","publicKeyJWK","Object","keys","key","toUpperCase","Null","toBER"],"mappings":"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","file":"PrivateKeyInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport ECPrivateKey from \"./ECPrivateKey.js\";\r\nimport RSAPrivateKey from \"./RSAPrivateKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5208\r\n */\r\nexport default class PrivateKeyInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PrivateKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PrivateKeyInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description privateKeyAlgorithm\r\n\t\t */\r\n\t\tthis.privateKeyAlgorithm = getParametersValue(parameters, \"privateKeyAlgorithm\", PrivateKeyInfo.defaultValues(\"privateKeyAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", PrivateKeyInfo.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @description attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", PrivateKeyInfo.defaultValues(\"attributes\"));\r\n\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPrivateKey|RSAPrivateKey}\r\n\t\t\t * @description Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PrivateKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"privateKeyAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"parsedKey\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PrivateKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//PrivateKeyInfo ::= SEQUENCE {\r\n\t\t//    version Version,\r\n\t\t//    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},\r\n\t\t//    privateKey PrivateKey,\r\n\t\t//    attributes [0] Attributes OPTIONAL }\r\n\t\t//\r\n\t\t//Version ::= INTEGER {v1(0)} (v1,...)\r\n\t\t//\r\n\t\t//PrivateKey ::= OCTET STRING\r\n\t\t//\r\n\t\t//Attributes ::= SET OF Attribute\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKeyAlgorithm]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"privateKeyAlgorithm\",\r\n\t\t\t\"privateKey\",\r\n\t\t\t\"attributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPrivateKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKeyAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"privateKeyAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PrivateKeyInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.privateKeyAlgorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPrivateKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: privateKeyASN1.result\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKeyAlgorithm.toSchema(),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\tconst object = {\r\n\t\t\t\tversion: this.version,\r\n\t\t\t\tprivateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\r\n\t\t\t\tprivateKey: this.privateKey.toJSON()\r\n\t\t\t};\r\n\r\n\t\t\tif(\"attributes\" in this)\r\n\t\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\r\n\t\t\treturn object;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\r\n\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}