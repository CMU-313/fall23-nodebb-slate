{"version":3,"sources":["../src/Extensions.js"],"names":["asn1js","Extensions","constructor","parameters","extensions","defaultValues","fromSchema","schema","memberName","Error","optional","names","Sequence","name","blockName","value","Repeated","extension","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;AACA;AACA;;;AAGe,MAAMC,UAAN,CACf;AACC;AACA;;;;;AAKAC,aAAYC,aAAa,EAAzB,EACA;AACC;AACA;;;;AAIA,OAAKC,UAAL,GAAkB,iCAAmBD,UAAnB,EAA+B,YAA/B,EAA6CF,WAAWI,aAAX,CAAyB,YAAzB,CAA7C,CAAlB;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKG,UAAL,CAAgBH,WAAWI,MAA3B;AACD;AACA;AACD;AACA;;;;AAIA,QAAOF,aAAP,CAAqBG,UAArB,EACA;AACC,UAAOA,UAAP;AAEC,QAAK,YAAL;AACC,WAAO,EAAP;AACD;AACC,UAAM,IAAIC,KAAJ,CAAW,6CAA4CD,UAAW,EAAlE,CAAN;AALF;AAOA;AACD;AACA;;;;;;AAMA,QAAOD,MAAP,CAAcJ,aAAa,EAA3B,EAA+BO,WAAW,KAA1C,EACA;AACC;;AAEA;;;;;;AAMA,QAAMC,QAAQ,iCAAmBR,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,SAAQ,IAAIH,OAAOY,QAAX,CAAoB;AAC3BF,WAD2B;AAE3BG,SAAOF,MAAMG,SAAN,IAAmB,EAFC;AAG3BC,UAAO,CACN,IAAIf,OAAOgB,QAAX,CAAoB;AACnBH,UAAOF,MAAMP,UAAN,IAAoB,EADR;AAEnBW,WAAO,oBAAUR,MAAV,CAAiBI,MAAMM,SAAN,IAAmB,EAApC;AAFY,IAApB,CADM;AAHoB,GAApB,CAAR;AAUA;AACD;AACA;;;;AAIAX,YAAWC,MAAX,EACA;AACC;AACA,2BAAWA,MAAX,EAAmB,CAClB,YADkB,CAAnB;AAGA;;AAEA;AACA,QAAMW,OAAOlB,OAAOmB,aAAP,CAAqBZ,MAArB,EACZA,MADY,EAEZN,WAAWM,MAAX,CAAkB;AACjBI,UAAO;AACNP,gBAAY;AADN;AADU,GAAlB,CAFY,CAAb;;AASA,MAAGc,KAAKE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIX,KAAJ,CAAU,oEAAV,CAAN;AACD;;AAEA;AACA,OAAKL,UAAL,GAAkBiB,MAAMC,IAAN,CAAWJ,KAAKK,MAAL,CAAYnB,UAAvB,EAAmCoB,WAAW,wBAAc,EAAEjB,QAAQiB,OAAV,EAAd,CAA9C,CAAlB;AACA;AACA;AACD;AACA;;;;AAIAC,YACA;AACC;AACA,SAAQ,IAAIzB,OAAOY,QAAX,CAAoB;AAC3BG,UAAOM,MAAMC,IAAN,CAAW,KAAKlB,UAAhB,EAA4BoB,WAAWA,QAAQC,QAAR,EAAvC;AADoB,GAApB,CAAR;AAGA;AACA;AACD;AACA;;;;AAIAC,UACA;AACC,SAAO;AACNtB,eAAYiB,MAAMC,IAAN,CAAW,KAAKlB,UAAhB,EAA4BoB,WAAWA,QAAQE,MAAR,EAAvC;AADN,GAAP;AAGA;AACD;AA1HD;kBADqBzB,U,EA6HrB","file":"Extensions.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Extensions\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Extensions class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Extension>}\r\n\t\t * @description type\r\n\t\t */\r\n\t\tthis.extensions = getParametersValue(parameters, \"extensions\", Extensions.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Extensions class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} optional Flag that current schema should be optional\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t//Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [extension]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional,\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.extensions || \"\"),\r\n\t\t\t\t\tvalue: Extension.schema(names.extension || {})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tExtensions.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\textensions: \"extensions\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Extensions\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.extensions = Array.from(asn1.result.extensions, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\textensions: Array.from(this.extensions, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}