{"version":3,"sources":["../src/CertificationRequest.js"],"names":["asn1js","CertificationRequestInfo","parameters","names","Sequence","name","value","Integer","CertificationRequestInfoVersion","schema","subject","blockName","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","CertificationRequestInfoAttributes","attributes","CertificationRequest","constructor","tbs","defaultValues","version","subjectPublicKeyInfo","signatureAlgorithm","signatureValue","fromSchema","memberName","ArrayBuffer","BitString","Error","certificationRequestInfo","ObjectIdentifier","Any","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","encodeTBS","outputArray","toSchema","push","encodeFlag","tbsSchema","byteLength","fromBER","toJSON","object","sign","privateKey","hashAlgorithm","Promise","reject","sequence","resolve","engine","then","subtle","getSignatureParameters","toBER","signWithPrivateKey","valueHex","verify","verifyWithPublicKey","getPublicKey"],"mappings":"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","file":"CertificationRequest.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\nfunction CertificationRequestInfo(parameters = {})\r\n{\r\n\t//CertificationRequestInfo ::= SEQUENCE {\r\n\t//    version       INTEGER { v1(0) } (v1,...),\r\n\t//    subject       Name,\r\n\t//    subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},\r\n\t//    attributes    [0] Attributes{{ CRIAttributes }}\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [CertificationRequestInfo]\r\n\t * @property {string} [CertificationRequestInfoVersion]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [CertificationRequestInfoAttributes]\r\n\t * @property {string} [attributes]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.CertificationRequestInfo || \"CertificationRequestInfo\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({ name: (names.CertificationRequestInfoVersion || \"CertificationRequestInfo.version\") }),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\toptional: true, // Because OpenSSL makes wrong \"attributes\" field\r\n\t\t\t\t\t\tname: (names.CertificationRequestInfoAttributes || \"CertificationRequestInfo.attributes\"),\r\n\t\t\t\t\t\tvalue: Attribute.schema(names.attributes || {})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2986\r\n */\r\nexport default class CertificationRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificationRequest.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificationRequest.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description subject\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", CertificationRequest.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @description subjectPublicKeyInfo\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", CertificationRequest.defaultValues(\"subjectPublicKeyInfo\"));\r\n\t\t\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @description attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", CertificationRequest.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificationRequest.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificationRequest.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificationRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertificationRequest ::= SEQUENCE {\r\n\t\t//    certificationRequestInfo CertificationRequestInfo,\r\n\t\t//    signatureAlgorithm       AlgorithmIdentifier{{ SignatureAlgorithms }},\r\n\t\t//    signature                BIT STRING\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certificationRequestInfo]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tCertificationRequestInfo(names.certificationRequestInfo || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.signatureAlgorithm || \"signatureAlgorithm\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\tnew asn1js.Any({ optional: true })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"CertificationRequestInfo\",\r\n\t\t\t\"CertificationRequestInfo.version\",\r\n\t\t\t\"CertificationRequestInfo.subject\",\r\n\t\t\t\"CertificationRequestInfo.subjectPublicKeyInfo\",\r\n\t\t\t\"CertificationRequestInfo.attributes\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificationRequest.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificationRequest\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.CertificationRequestInfo.valueBeforeDecode;\r\n\t\t\r\n\t\tthis.version = asn1.result[\"CertificationRequestInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"CertificationRequestInfo.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"CertificationRequestInfo.subjectPublicKeyInfo\"] });\r\n\t\tif(\"CertificationRequestInfo.attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result[\"CertificationRequestInfo.attributes\"], element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function making ASN1js Sequence from current TBS\r\n\t * @returns {Sequence}\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.subject.toSchema(),\r\n\t\t\tthis.subjectPublicKeyInfo.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.byteLength === 0) // No stored TBS part\r\n\t\t\t\treturn CertificationRequest.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tversion: this.version,\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"attributes\" in this)\r\n\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Makes signature for currect certification request\r\n\t * @param {Object} privateKey WebCrypto private key\r\n\t * @param {string} [hashAlgorithm=SHA-1] String representing current hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing certification request signature\r\n\t * @returns {*}\r\n\t */\r\n\tverify()\r\n\t{\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate request\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\treturn getEngine().getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}