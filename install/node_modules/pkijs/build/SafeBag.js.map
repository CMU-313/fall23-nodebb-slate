{"version":3,"sources":["../src/SafeBag.js"],"names":["asn1js","SafeBag","constructor","parameters","bagId","defaultValues","bagValue","bagAttributes","fromSchema","schema","memberName","Any","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","value","ObjectIdentifier","Constructed","idBlock","tagClass","tagNumber","Set","optional","Repeated","asn1","compareSchema","verified","result","valueBlock","toString","Array","from","element","toSchema","outputArray","push","toJSON","output"],"mappings":"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","file":"SafeBag.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\nimport PKCS8ShroudedKeyBag from \"./PKCS8ShroudedKeyBag.js\";\r\nimport CertBag from \"./CertBag.js\";\r\nimport CRLBag from \"./CRLBag.js\";\r\nimport SecretBag from \"./SecretBag.js\";\r\nimport SafeContents from \"./SafeContents.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class SafeBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SafeBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description bagId\r\n\t\t */\r\n\t\tthis.bagId = getParametersValue(parameters, \"bagId\", SafeBag.defaultValues(\"bagId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @description bagValue\r\n\t\t */\r\n\t\tthis.bagValue = getParametersValue(parameters, \"bagValue\", SafeBag.defaultValues(\"bagValue\"));\r\n\t\t\r\n\t\tif(\"bagAttributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @description bagAttributes\r\n\t\t\t */\r\n\t\t\tthis.bagAttributes = getParametersValue(parameters, \"bagAttributes\", SafeBag.defaultValues(\"bagAttributes\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"bagId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"bagValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tcase \"bagAttributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SafeBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"bagId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"bagValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"bagAttributes\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SafeBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//SafeBag ::= SEQUENCE {\r\n\t\t//    bagId\t      \tBAG-TYPE.&id ({PKCS12BagSet}),\r\n\t\t//    bagValue      [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),\r\n\t\t//    bagAttributes SET OF PKCS12Attribute OPTIONAL\r\n\t\t//}\r\n\t\t\r\n\t\t//rsadsi\tOBJECT IDENTIFIER ::= {iso(1) member-body(2) us(840) rsadsi(113549)}\r\n\t\t//pkcs    OBJECT IDENTIFIER ::= {rsadsi pkcs(1)}\r\n\t\t//pkcs-12\tOBJECT IDENTIFIER ::= {pkcs 12}\r\n\t\t\r\n\t\t//bagtypes\t\t\tOBJECT IDENTIFIER ::= {pkcs-12 10 1}\r\n\t\t\r\n\t\t//keyBag \t  BAG-TYPE ::=\r\n\t\t//{KeyBag IDENTIFIED BY {bagtypes 1}}\r\n\t\t//pkcs8ShroudedKeyBag BAG-TYPE ::=\r\n\t\t//{PKCS8ShroudedKeyBag IDENTIFIED BY {bagtypes 2}}\r\n\t\t//certBag BAG-TYPE ::=\r\n\t\t//{CertBag IDENTIFIED BY {bagtypes 3}}\r\n\t\t//crlBag BAG-TYPE ::=\r\n\t\t//{CRLBag IDENTIFIED BY {bagtypes 4}}\r\n\t\t//secretBag BAG-TYPE ::=\r\n\t\t//{SecretBag IDENTIFIED BY {bagtypes 5}}\r\n\t\t//safeContentsBag BAG-TYPE ::=\r\n\t\t//{SafeContents IDENTIFIED BY {bagtypes 6}}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [bagId]\r\n\t\t * @property {string} [bagValue]\r\n\t\t * @property {string} [bagAttributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.bagId || \"bagId\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.bagValue || \"bagValue\") })] // EXPLICIT ANY value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.bagAttributes || \"bagAttributes\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"bagId\",\r\n\t\t\t\"bagValue\",\r\n\t\t\t\"bagAttributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSafeBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbagId: \"bagId\",\r\n\t\t\t\t\tbagValue: \"bagValue\",\r\n\t\t\t\t\tbagAttributes: \"bagAttributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SafeBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.bagId = asn1.result.bagId.valueBlock.toString();\r\n\t\t\r\n\t\tswitch(this.bagId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.1\": // keyBag\r\n\t\t\t\tthis.bagValue = new PrivateKeyInfo({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.2\": // pkcs8ShroudedKeyBag\r\n\t\t\t\tthis.bagValue = new PKCS8ShroudedKeyBag({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.3\": // certBag\r\n\t\t\t\tthis.bagValue = new CertBag({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.4\": // crlBag\r\n\t\t\t\tthis.bagValue = new CRLBag({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.5\": // secretBag\r\n\t\t\t\tthis.bagValue = new SecretBag({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.12.10.1.6\": // safeContentsBag\r\n\t\t\t\tthis.bagValue = new SafeContents({ schema: asn1.result.bagValue });\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid \"bagId\" for SafeBag: ${this.bagId}`);\r\n\t\t}\r\n\t\t\r\n\t\tif(\"bagAttributes\" in asn1.result)\r\n\t\t\tthis.bagAttributes = Array.from(asn1.result.bagAttributes, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.ObjectIdentifier({ value: this.bagId }),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.bagValue.toSchema()]\r\n\t\t\t})\r\n\t\t];\r\n\t\t\r\n\t\tif(\"bagAttributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Set({\r\n\t\t\t\tvalue: Array.from(this.bagAttributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tbagId: this.bagId,\r\n\t\t\tbagValue: this.bagValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"bagAttributes\" in this)\r\n\t\t\toutput.bagAttributes = Array.from(this.bagAttributes, element => element.toJSON());\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}