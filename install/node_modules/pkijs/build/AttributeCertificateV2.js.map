{"version":3,"sources":["../src/AttributeCertificateV2.js"],"names":["asn1js","ObjectDigestInfo","constructor","parameters","digestedObjectType","defaultValues","otherObjectTypeID","digestAlgorithm","objectDigest","fromSchema","schema","memberName","Enumerated","ObjectIdentifier","BitString","Error","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","push","toJSON","V2Form","issuerName","baseCertificateID","objectDigestInfo","Constructed","idBlock","tagClass","tagNumber","valueBlock","Holder","entityName","AttributeCertificateInfoV2","version","holder","issuer","signature","serialNumber","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","Integer","Choice","Repeated","valueDec","Array","from","element","AttributeCertificateV2","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","file":"AttributeCertificateV2.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralNames from \"./GeneralNames.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport Extensions from \"./Extensions.js\";\r\nimport { AttCertValidityPeriod, IssuerSerial } from \"./AttributeCertificateV1.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class ObjectDigestInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ObjectDigestInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Enumerated}\r\n\t\t * @description digestedObjectType\r\n\t\t */\r\n\t\tthis.digestedObjectType = getParametersValue(parameters, \"digestedObjectType\", ObjectDigestInfo.defaultValues(\"digestedObjectType\"));\r\n\t\t\r\n\t\tif(\"otherObjectTypeID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ObjectIdentifier}\r\n\t\t\t * @description otherObjectTypeID\r\n\t\t\t */\r\n\t\t\tthis.otherObjectTypeID = getParametersValue(parameters, \"otherObjectTypeID\", ObjectDigestInfo.defaultValues(\"otherObjectTypeID\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", ObjectDigestInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description objectDigest\r\n\t\t */\r\n\t\tthis.objectDigest = getParametersValue(parameters, \"objectDigest\", ObjectDigestInfo.defaultValues(\"objectDigest\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"digestedObjectType\":\r\n\t\t\t\treturn new asn1js.Enumerated();\r\n\t\t\tcase \"otherObjectTypeID\":\r\n\t\t\t\treturn new asn1js.ObjectIdentifier();\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"objectDigest\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ObjectDigestInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// ObjectDigestInfo ::= SEQUENCE {\r\n\t\t//   digestedObjectType  ENUMERATED {\r\n\t\t//     publicKey            (0),\r\n\t\t//     publicKeyCert        (1),\r\n\t\t//     otherObjectTypes     (2) },\r\n\t\t//   -- otherObjectTypes MUST NOT\r\n\t\t//   -- be used in this profile\r\n\t\t//   otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,\r\n\t\t//   digestAlgorithm     AlgorithmIdentifier,\r\n\t\t//   objectDigest        BIT STRING\r\n\t\t// }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [digestedObjectType]\r\n\t\t * @property {string} [otherObjectTypeID]\r\n\t\t * @property {string} [digestAlgorithm]\r\n\t\t * @property {string} [objectDigest]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Enumerated({ name: (names.digestedObjectType || \"\") }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.otherObjectTypeID || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.objectDigest || \"\") }),\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"digestedObjectType\",\r\n\t\t\t\"otherObjectTypeID\",\r\n\t\t\t\"digestAlgorithm\",\r\n\t\t\t\"objectDigest\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tObjectDigestInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tdigestedObjectType: \"digestedObjectType\",\r\n\t\t\t\t\totherObjectTypeID: \"otherObjectTypeID\",\r\n\t\t\t\t\tdigestAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tobjectDigest: \"objectDigest\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ObjectDigestInfo\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.digestedObjectType = asn1.result.digestedObjectType;\r\n\t\t\r\n\t\tif(\"otherObjectTypeID\" in asn1.result)\r\n\t\t\tthis.otherObjectTypeID = asn1.result.otherObjectTypeID;\r\n\t\t\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\r\n\t\tthis.objectDigest = asn1.result.objectDigest;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [this.digestedObjectType]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"otherObjectTypeID\" in this)\r\n\t\t\tresult.value.push(this.otherObjectTypeID);\r\n\t\t\r\n\t\tresult.value.push(this.digestAlgorithm.toSchema());\r\n\t\tresult.value.push(this.objectDigest);\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tdigestedObjectType: this.digestedObjectType.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"otherObjectTypeID\" in this)\r\n\t\t\tresult.otherObjectTypeID = this.otherObjectTypeID.toJSON();\r\n\t\t\r\n\t\tresult.digestAlgorithm = this.digestAlgorithm.toJSON();\r\n\t\tresult.objectDigest = this.objectDigest.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class V2Form\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for V2Form class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"issuerName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralNames}\r\n\t\t\t * @description issuerName\r\n\t\t\t */\r\n\t\t\tthis.issuerName = getParametersValue(parameters, \"issuerName\", V2Form.defaultValues(\"issuerName\"));\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {IssuerSerial}\r\n\t\t\t * @description baseCertificateID\r\n\t\t\t */\r\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", V2Form.defaultValues(\"baseCertificateID\"));\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ObjectDigestInfo}\r\n\t\t\t * @description objectDigestInfo\r\n\t\t\t */\r\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", V2Form.defaultValues(\"objectDigestInfo\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuerName\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"baseCertificateID\":\r\n\t\t\t\treturn new IssuerSerial();\r\n\t\t\tcase \"objectDigestInfo\":\r\n\t\t\t\treturn new ObjectDigestInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for V2Form class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// V2Form ::= SEQUENCE {\r\n\t\t//   issuerName            GeneralNames  OPTIONAL,\r\n\t\t//   baseCertificateID     [0] IssuerSerial  OPTIONAL,\r\n\t\t//   objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL\r\n\t\t//     -- issuerName MUST be present in this profile\r\n\t\t//     -- baseCertificateID and objectDigestInfo MUST NOT\r\n\t\t//     -- be present in this profile\r\n\t\t// }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuerName]\r\n\t\t * @property {string} [baseCertificateID]\r\n\t\t * @property {string} [objectDigestInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralNames.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: names.issuerName\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"issuerName\",\r\n\t\t\t\"baseCertificateID\",\r\n\t\t\t\"objectDigestInfo\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tV2Form.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuerName: \"issuerName\",\r\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\r\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for V2Form\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"issuerName\" in asn1.result)\r\n\t\t\tthis.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.baseCertificateID = new IssuerSerial({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence();\r\n\t\t\r\n\t\tif(\"issuerName\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerName.toSchema());\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {};\r\n\t\t\r\n\t\tif(\"issuerName\" in this)\r\n\t\t\tresult.issuerName = this.issuerName.toJSON();\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in this)\r\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class Holder\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Holder class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"baseCertificateID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {IssuerSerial}\r\n\t\t\t * @description baseCertificateID\r\n\t\t\t */\r\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", Holder.defaultValues(\"baseCertificateID\"));\r\n\t\t\r\n\t\tif(\"entityName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralNames}\r\n\t\t\t * @description entityName\r\n\t\t\t */\r\n\t\t\tthis.entityName = getParametersValue(parameters, \"entityName\", Holder.defaultValues(\"entityName\"));\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ObjectDigestInfo}\r\n\t\t\t * @description objectDigestInfo\r\n\t\t\t */\r\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", Holder.defaultValues(\"objectDigestInfo\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"baseCertificateID\":\r\n\t\t\t\treturn new IssuerSerial();\r\n\t\t\tcase \"entityName\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"objectDigestInfo\":\r\n\t\t\t\treturn new ObjectDigestInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Holder class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// Holder ::= SEQUENCE {\r\n\t\t//   baseCertificateID   [0] IssuerSerial OPTIONAL,\r\n\t\t//       -- the issuer and serial number of\r\n\t\t//       -- the holder's Public Key Certificate\r\n\t\t//   entityName          [1] GeneralNames OPTIONAL,\r\n\t\t//       -- the name of the claimant or role\r\n\t\t//   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL\r\n\t\t//       -- used to directly authenticate the holder,\r\n\t\t//       -- for example, an executable\r\n\t\t// }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [baseCertificateID]\r\n\t\t * @property {string} [entityName]\r\n\t\t * @property {string} [objectDigestInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.entityName || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 1 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"baseCertificateID\",\r\n\t\t\t\"entityName\",\r\n\t\t\t\"objectDigestInfo\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tHolder.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\r\n\t\t\t\t\tentityName: \"entityName\",\r\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Holder\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"baseCertificateID\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.baseCertificateID = new IssuerSerial({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"entityName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.entityName = new GeneralNames({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.entityName.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence();\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"entityName\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.entityName.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {};\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\r\n\t\t\r\n\t\tif(\"entityName\" in this)\r\n\t\t\tresult.entityName = this.entityName.toJSON();\r\n\t\t\r\n\t\tif(\"objectDigestInfo\" in this)\r\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class AttributeCertificateInfoV2\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateInfoV2 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Number}\r\n\t\t * @description version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV2.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Holder}\r\n\t\t * @description holder\r\n\t\t */\r\n\t\tthis.holder = getParametersValue(parameters, \"holder\", AttributeCertificateInfoV2.defaultValues(\"holder\"));\r\n\t\t/**\r\n\t\t * @type {GeneralNames|V2Form}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV2.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV2.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV2.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AttCertValidityPeriod}\r\n\t\t * @description attrCertValidityPeriod\r\n\t\t */\r\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV2.defaultValues(\"attrCertValidityPeriod\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Attribute>}\r\n\t\t * @description attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV2.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @description issuerUniqueID\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV2.defaultValues(\"issuerUniqueID\"));\r\n\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @description extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV2.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"holder\":\r\n\t\t\t\treturn new Holder();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"attrCertValidityPeriod\":\r\n\t\t\t\treturn new AttCertValidityPeriod();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV2 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// AttributeCertificateInfoV2 ::= SEQUENCE {\r\n\t\t//   version                 AttCertVersion, -- version is v2\r\n\t\t//   holder                  Holder,\r\n\t\t//   issuer                  AttCertIssuer,\r\n\t\t//   signature               AlgorithmIdentifier,\r\n\t\t//   serialNumber            CertificateSerialNumber,\r\n\t\t//   attrCertValidityPeriod  AttCertValidityPeriod,\r\n\t\t//   attributes              SEQUENCE OF Attribute,\r\n\t\t//   issuerUniqueID          UniqueIdentifier OPTIONAL,\r\n\t\t//   extensions              Extensions OPTIONAL\r\n\t\t// }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tHolder.schema(names.holder || {}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tGeneralNames.schema({\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: (names.issuer || \"\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.issuer || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: V2Form.schema().valueBlock.value\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\r\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"holder\",\r\n\t\t\t\"issuer\",\r\n\t\t\t\"signature\",\r\n\t\t\t\"serialNumber\",\r\n\t\t\t\"attrCertValidityPeriod\",\r\n\t\t\t\"attributes\",\r\n\t\t\t\"issuerUniqueID\",\r\n\t\t\t\"extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateInfoV2.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tholder: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"holder\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tissuer: \"issuer\",\r\n\t\t\t\t\tsignature: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signature\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\",\r\n\t\t\t\t\tattrCertValidityPeriod: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tattributes: \"attributes\",\r\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\r\n\t\t\t\t\textensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"extensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV2\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.holder = new Holder({ schema: asn1.result.holder });\r\n\t\t\r\n\t\tswitch(asn1.result.issuer.idBlock.tagClass)\r\n\t\t{\r\n\t\t\tcase 3: // V2Form\r\n\t\t\t\tthis.issuer = new V2Form({\r\n\t\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: asn1.result.issuer.valueBlock.value\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1: // GeneralNames (should not be used)\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Incorect value for 'issuer' in AttributeCertificateInfoV2\");\r\n\t\t}\r\n\t\t\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\r\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\r\n\t\t\r\n\t\tif(\"extensions\" in asn1.result)\r\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\t\tthis.holder.toSchema(),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: this.issuer.toSchema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tthis.signature.toSchema(),\r\n\t\t\t\tthis.serialNumber,\r\n\t\t\t\tthis.attrCertValidityPeriod.toSchema(),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tversion: this.version,\r\n\t\t\tholder: this.holder.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tattrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\r\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\r\n\t\t};\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.extensions = this.extensions.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport default class AttributeCertificateV2\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateV2 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AttributeCertificateInfoV2}\r\n\t\t * @description acinfo\r\n\t\t */\r\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV2.defaultValues(\"acinfo\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV2.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV2.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"acinfo\":\r\n\t\t\t\treturn new AttributeCertificateInfoV2();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV2 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// AttributeCertificate ::= SEQUENCE {\r\n\t\t//   acinfo               AttributeCertificateInfoV2,\r\n\t\t//   signatureAlgorithm   AlgorithmIdentifier,\r\n\t\t//   signatureValue       BIT STRING\r\n\t\t// }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {Object} [acinfo]\r\n\t\t * @property {Object} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAttributeCertificateInfoV2.schema(names.acinfo || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"acinfo\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateV2.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tacinfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"acinfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureValue: \"signatureValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV2\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.acinfo.toSchema(),\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tacinfo: this.acinfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}