{"version":3,"sources":["../src/GeneralNames.js"],"names":["asn1js","GeneralNames","constructor","parameters","names","defaultValues","fromSchema","schema","memberName","Error","optional","Sequence","name","blockName","value","Repeated","generalNames","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;AACA;AACA;;;AAGe,MAAMC,YAAN,CACf;AACC;AACA;;;;;AAKAC,aAAYC,aAAa,EAAzB,EACA;AACC;AACA;;;;AAIA,OAAKC,KAAL,GAAa,iCAAmBD,UAAnB,EAA+B,OAA/B,EAAwCF,aAAaI,aAAb,CAA2B,OAA3B,CAAxC,CAAb;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKG,UAAL,CAAgBH,WAAWI,MAA3B;AACD;AACA;AACD;AACA;;;;AAIA,QAAOF,aAAP,CAAqBG,UAArB,EACA;AACC,UAAOA,UAAP;AAEC,QAAK,OAAL;AACC,WAAO,EAAP;AACD;AACC,UAAM,IAAIC,KAAJ,CAAW,+CAA8CD,UAAW,EAApE,CAAN;AALF;AAOA;AACD;AACA;;;;;;AAMA,QAAOD,MAAP,CAAcJ,aAAa,EAA3B,EAA+BO,WAAW,KAA1C,EACA;AACC;;;;;AAKA,QAAMN,QAAQ,iCAAmBD,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,SAAQ,IAAIH,OAAOW,QAAX,CAAoB;AAC3BD,WAD2B;AAE3BE,SAAOR,MAAMS,SAAN,IAAmB,EAFC;AAG3BC,UAAO,CACN,IAAId,OAAOe,QAAX,CAAoB;AACnBH,UAAOR,MAAMY,YAAN,IAAsB,EADV;AAEnBF,WAAO,sBAAYP,MAAZ;AAFY,IAApB,CADM;AAHoB,GAApB,CAAR;AAUA;AACD;AACA;;;;AAIAD,YAAWC,MAAX,EACA;AACC;AACA,2BAAWA,MAAX,EAAmB,CAClB,OADkB,EAElB,cAFkB,CAAnB;AAIA;;AAEA;AACA,QAAMU,OAAOjB,OAAOkB,aAAP,CAAqBX,MAArB,EACZA,MADY,EAEZN,aAAaM,MAAb,CAAoB;AACnBH,UAAO;AACNS,eAAW,OADL;AAENG,kBAAc;AAFR;AADY,GAApB,CAFY,CAAb;;AAUA,MAAGC,KAAKE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIV,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAEA;AACA,OAAKL,KAAL,GAAagB,MAAMC,IAAN,CAAWJ,KAAKK,MAAL,CAAYN,YAAvB,EAAqCO,WAAW,0BAAgB,EAAEhB,QAAQgB,OAAV,EAAhB,CAAhD,CAAb;AACA;AACA;AACD;AACA;;;;AAIAC,YACA;AACC;AACA,SAAQ,IAAIxB,OAAOW,QAAX,CAAoB;AAC3BG,UAAOM,MAAMC,IAAN,CAAW,KAAKjB,KAAhB,EAAuBmB,WAAWA,QAAQC,QAAR,EAAlC;AADoB,GAApB,CAAR;AAGA;AACA;AACD;AACA;;;;AAIAC,UACA;AACC,SAAO;AACNrB,UAAOgB,MAAMC,IAAN,CAAW,KAAKjB,KAAhB,EAAuBmB,WAAWA,QAAQE,MAAR,EAAlC;AADD,GAAP;AAGA;AACD;AAzHD;kBADqBxB,Y,EA4HrB","file":"GeneralNames.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class GeneralNames\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for GeneralNames class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<GeneralName>}\r\n\t\t * @description Array of \"general names\"\r\n\t\t */\r\n\t\tthis.names = getParametersValue(parameters, \"names\", GeneralNames.defaultValues(\"names\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"names\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for GeneralNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} [optional=false] Flag would be element optional or not\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n\t\t * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional,\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.generalNames || \"\"),\r\n\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"names\",\r\n\t\t\t\"generalNames\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tGeneralNames.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"names\",\r\n\t\t\t\t\tgeneralNames: \"generalNames\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for GeneralNames\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.names = Array.from(asn1.result.generalNames, element => new GeneralName({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.names, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tnames: Array.from(this.names, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}