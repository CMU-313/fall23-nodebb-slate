{"version":3,"sources":["../src/OCSPResponse.js"],"names":["asn1js","OCSPResponse","constructor","parameters","responseStatus","defaultValues","responseBytes","fromSchema","schema","memberName","Enumerated","Error","compareWithDefault","memberValue","isEqual","responseType","response","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","getCertificateStatus","certificate","issuerCertificate","basicResponse","isForCertificate","status","asn1Basic","fromBER","valueBlock","valueHex","ex","sign","privateKey","hashAlgorithm","Promise","reject","verify","certs"],"mappings":"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","file":"OCSPResponse.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport ResponseBytes from \"./ResponseBytes.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Enumerated}\r\n\t\t * @description responseStatus\r\n\t\t */\r\n\t\tthis.responseStatus = getParametersValue(parameters, \"responseStatus\", OCSPResponse.defaultValues(\"responseStatus\"));\r\n\r\n\t\tif(\"responseBytes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ResponseBytes}\r\n\t\t\t * @description responseBytes\r\n\t\t\t */\r\n\t\t\tthis.responseBytes = getParametersValue(parameters, \"responseBytes\", OCSPResponse.defaultValues(\"responseBytes\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn new asn1js.Enumerated();\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn new ResponseBytes();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn (memberValue.isEqual(OCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn ((ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType)) &&\r\n\t\t\t\t\t\t(ResponseBytes.compareWithDefault(\"response\", memberValue.response)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OCSPResponse ::= SEQUENCE {\r\n\t\t//    responseStatus         OCSPResponseStatus,\r\n\t\t//    responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }\r\n\t\t//\r\n\t\t//OCSPResponseStatus ::= ENUMERATED {\r\n\t\t//    successful            (0),  -- Response has valid confirmations\r\n\t\t//    malformedRequest      (1),  -- Illegal confirmation request\r\n\t\t//    internalError         (2),  -- Internal error in issuer\r\n\t\t//    tryLater              (3),  -- Try again later\r\n\t\t//    -- (4) is not used\r\n\t\t//    sigRequired           (5),  -- Must sign the request\r\n\t\t//    unauthorized          (6)   -- Request unauthorized\r\n\t\t//}\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [responseStatus]\r\n\t\t * @property {string} [responseBytes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"OCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Enumerated({ name: (names.responseStatus || \"responseStatus\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tResponseBytes.schema(names.responseBytes || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"responseBytes\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"responseStatus\",\r\n\t\t\t\"responseBytes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPResponse.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSPResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.responseStatus = asn1.result.responseStatus;\r\n\t\tif(\"responseBytes\" in asn1.result)\r\n\t\t\tthis.responseBytes = new ResponseBytes({ schema: asn1.result.responseBytes });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.responseStatus);\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.responseBytes.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tresponseStatus: this.responseStatus.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t\t_object.responseBytes = this.responseBytes.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate\r\n\t * @param {Certificate} issuerCertificate\r\n\t * @returns {*}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet basicResponse;\r\n\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"ResponseBytes\" contain \"OCSP_BASIC_RESPONSE\"\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn result;\r\n\r\n\t\tif(this.responseBytes.responseType !== \"1.3.6.1.5.5.7.48.1.1\") // id-pkix-ocsp-basic\r\n\t\t\treturn result;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconst asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tbasicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn basicResponse.getCertificateStatus(certificate, issuerCertificate);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current OCSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that ResponseData has type BasicOCSPResponse and sign it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\treturn basicResponse.sign(privateKey, hashAlgorithm);\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current OCSP Response\r\n\t * @param {Certificate|null} issuerCertificate In order to decrease size of resp issuer cert could be ommited. In such case you need manually provide it.\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Check that ResponseBytes exists in the object\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Empty ResponseBytes field\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that ResponceData has type BasicOCSPResponse and verify it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\tif(issuerCertificate !== null)\r\n\t\t\t{\r\n\t\t\t\tif((\"certs\" in basicResponse) === false)\r\n\t\t\t\t\tbasicResponse.certs = [];\r\n\t\t\t\t\r\n\t\t\t\tbasicResponse.certs.push(issuerCertificate);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn basicResponse.verify();\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}