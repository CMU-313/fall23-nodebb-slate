{"version":3,"sources":["../src/CertificateSet.js"],"names":["asn1js","CertificateSet","constructor","parameters","certificates","defaultValues","fromSchema","schema","memberName","Error","names","Set","name","blockName","value","Repeated","Choice","Constructed","idBlock","tagClass","tagNumber","Any","valueBlock","asn1","compareSchema","verified","Array","from","result","element","initialTagNumber","elementSequence","Sequence","toSchema","toJSON"],"mappings":"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","file":"CertificateSet.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport AttributeCertificateV1 from \"./AttributeCertificateV1.js\";\r\nimport AttributeCertificateV2 from \"./AttributeCertificateV2.js\";\r\nimport OtherCertificateFormat from \"./OtherCertificateFormat.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class CertificateSet\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateSet class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @description certificates\r\n\t\t */\r\n\t\tthis.certificates = getParametersValue(parameters, \"certificates\", CertificateSet.defaultValues(\"certificates\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//CertificateSet ::= SET OF CertificateChoices\r\n\t\t//\r\n\t\t//CertificateChoices ::= CHOICE {\r\n\t\t//    certificate Certificate,\r\n\t\t//    extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\r\n\t\t//    v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete\r\n\t\t//    v2AttrCert [2] IMPLICIT AttributeCertificateV2,\r\n\t\t//    other [3] IMPLICIT OtherCertificateFormat }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (\r\n\t\t\tnew asn1js.Set({\r\n\t\t\t\tname: (names.blockName || \"\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.certificates || \"certificates\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tCertificate.schema(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}), // JUST A STUB\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV1.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: AttributeCertificateV2.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: OtherCertificateFormat.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certificates\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateSet.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateSet\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificates = Array.from(asn1.result.certificates, element =>\r\n\t\t{\r\n\t\t\tconst initialTagNumber = element.idBlock.tagNumber;\r\n\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\treturn new Certificate({ schema: element });\r\n\t\t\t\r\n\t\t\t//region Making \"Sequence\" from \"Constructed\" value\r\n\t\t\tconst elementSequence = new asn1js.Sequence({\r\n\t\t\t\tvalue: element.valueBlock.value\r\n\t\t\t});\r\n\t\t\t//endregion\r\n\r\n\t\t\tswitch(initialTagNumber)\r\n\t\t\t{\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn new AttributeCertificateV1({ schema: elementSequence });\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn new AttributeCertificateV2({ schema: elementSequence });\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\treturn new OtherCertificateFormat({ schema: elementSequence });\r\n\t\t\t\tcase 0:\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn element;\r\n\t\t});\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.certificates, element =>\r\n\t\t\t{\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (element instanceof Certificate):\r\n\t\t\t\t\t\treturn element.toSchema();\r\n\t\t\t\t\tcase (element instanceof AttributeCertificateV1):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tcase (element instanceof AttributeCertificateV2):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tcase (element instanceof OtherCertificateFormat):\r\n\t\t\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: element.toSchema().valueBlock.value\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn element;\r\n\t\t\t})\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificates: Array.from(this.certificates, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}