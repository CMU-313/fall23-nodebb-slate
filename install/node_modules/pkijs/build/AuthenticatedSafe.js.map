{"version":3,"sources":["../src/AuthenticatedSafe.js"],"names":["asn1js","AuthenticatedSafe","constructor","parameters","safeContents","defaultValues","parsedValue","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","Object","keys","names","Sequence","name","blockName","value","Repeated","contentInfos","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON","parseInternalValues","Promise","reject","sequence","resolve","entries","index","content","contentType","OctetString","authSafeContent","ArrayBuffer","valueBlock","isConstructed","contentValue","valueHex","fromBER","offset","push","privacyMode","cmsEnveloped","recipientCertificate","recipientKey","then","decrypt","recipientPrivateKey","cmsEncrypted","password","error","makeInternalValues","contentBuffer","toBER","currentParameters","contentToEncrypt","encrypt","encryptionAlgorithm","toLowerCase","addRecipientByCertificate","encryptingCertificate"],"mappings":"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","file":"AuthenticatedSafe.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport SafeContents from \"./SafeContents.js\";\r\nimport EnvelopedData from \"./EnvelopedData.js\";\r\nimport EncryptedData from \"./EncryptedData.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class AuthenticatedSafe\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AuthenticatedSafe class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<ContentInfo>}\r\n\t\t * @description safeContents\r\n\t\t */\r\n\t\tthis.safeContents = getParametersValue(parameters, \"safeContents\", AuthenticatedSafe.defaultValues(\"safeContents\"));\r\n\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @description parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", AuthenticatedSafe.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeContents\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthenticatedSafe class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"safeContents\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthenticatedSafe class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//AuthenticatedSafe ::= SEQUENCE OF ContentInfo\r\n\t\t//-- Data if unencrypted\r\n\t\t//-- EncryptedData if password-encrypted\r\n\t\t//-- EnvelopedData if public key-encrypted\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.contentInfos || \"\"),\r\n\t\t\t\t\tvalue: ContentInfo.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentInfos\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAuthenticatedSafe.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentInfos: \"contentInfos\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AuthenticatedSafe\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.safeContents = Array.from(asn1.result.contentInfos, element => new ContentInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.safeContents, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tsafeContents: Array.from(this.safeContents, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"safeContents\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\r\n\t\t\r\n\t\tif((parameters.safeContents instanceof Array) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t\r\n\t\tif(parameters.safeContents.length !== this.safeContents.length)\r\n\t\t\treturn Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.safeContents.length\\\"\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create value for \"this.parsedValue.authenticatedSafe\" \r\n\t\tthis.parsedValue = {\r\n\t\t\tsafeContents: []\r\n\t\t};\r\n\t\t\r\n\t\tfor(const [index, content] of this.safeContents.entries())\r\n\t\t{\r\n\t\t\tswitch(content.contentType)\r\n\t\t\t{\r\n\t\t\t\t//region data \r\n\t\t\t\tcase \"1.2.840.113549.1.7.1\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\t\tif((content.content instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"this.safeContents[j].content\\\"\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check we have \"constructive encoding\" for AuthSafe content\r\n\t\t\t\t\t\tlet authSafeContent = new ArrayBuffer(0);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(content.content.valueBlock.isConstructed)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const contentValue of content.content.valueBlock.value)\r\n\t\t\t\t\t\t\t\tauthSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tauthSafeContent = content.content.valueBlock.valueHex;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\t\tconst asn1 = asn1js.fromBER(authSafeContent);\r\n\t\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"content.content\\\"\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Finilly initialize initial values of \"SafeContents\" type\r\n\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\tprivacyMode: 0, // No privacy, clear data\r\n\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region envelopedData \r\n\t\t\t\tcase \"1.2.840.113549.1.7.3\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEnveloped = new EnvelopedData({ schema: content.content });\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"recipientCertificate\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"recipientCertificate\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst recipientCertificate = parameters.safeContents[index].recipientCertificate;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((\"recipientKey\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"recipientKey\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t\t\t\tconst recipientKey = parameters.safeContents[index].recipientKey;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Decrypt CMS EnvelopedData using first recipient information\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEnveloped.decrypt(0, {\r\n\t\t\t\t\t\t\t\trecipientCertificate,\r\n\t\t\t\t\t\t\t\trecipientPrivateKey: recipientKey\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of decrypted data\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\t\t\tprivacyMode: 2, // Public-key privacy mode\r\n\t\t\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion   \r\n\t\t\t\t//region encryptedData \r\n\t\t\t\tcase \"1.2.840.113549.1.7.6\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEncrypted = new EncryptedData({ schema: content.content });\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"password\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\" in \\\"parameters.safeContents[j]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst password = parameters.safeContents[index].password;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Decrypt CMS EncryptedData using password\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEncrypted.decrypt({\r\n\t\t\t\t\t\t\t\tpassword\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initialize internal data\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of decrypted data\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tthis.parsedValue.safeContents.push({\r\n\t\t\t\t\t\t\t\t\tprivacyMode: 1, // Password-based privacy mode\r\n\t\t\t\t\t\t\t\t\tvalue: new SafeContents({ schema: asn1.result })\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion   \r\n\t\t\t\t//region default \r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Unknown \"contentType\" for AuthenticatedSafe: \" ${content.contentType}`);\r\n\t\t\t\t//endregion \r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check data in \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please run \\\"parseValues\\\" first or add \\\"parsedValue\\\" manually\");\r\n\t\t\r\n\t\tif((this.parsedValue instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"this.parsedValue\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((this.parsedValue.safeContents instanceof Array) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"this.parsedValue.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"safeContents\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"safeContents\\\"\");\r\n\t\t\r\n\t\tif((parameters.safeContents instanceof Array) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters.safeContents\\\" must has \\\"Array\\\" type\");\r\n\t\t\r\n\t\tif(parameters.safeContents.length !== this.parsedValue.safeContents.length)\r\n\t\t\treturn Promise.reject(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.parsedValue.safeContents\\\"\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create internal values from already parsed values \r\n\t\tthis.safeContents = [];\r\n\t\t\r\n\t\tfor(const [index, content] of this.parsedValue.safeContents.entries())\r\n\t\t{\r\n\t\t\t//region Check current \"content\" value\r\n\t\t\tif((\"privacyMode\" in content) === false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"privacyMode\\\" is a mandatory parameter for \\\"content\\\"\");\r\n\t\t\t\r\n\t\t\tif((\"value\" in content) === false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"value\\\" is a mandatory parameter for \\\"content\\\"\");\r\n\t\t\t\r\n\t\t\tif((content.value instanceof SafeContents) === false)\r\n\t\t\t\treturn Promise.reject(\"The \\\"content.value\\\" must has \\\"SafeContents\\\" type\");\r\n\t\t\t//endregion \r\n\t\t\t\r\n\t\t\tswitch(content.privacyMode)\r\n\t\t\t{\r\n\t\t\t\t//region No privacy \r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst contentBuffer = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\",\r\n\t\t\t\t\t\t\t\t\tcontent: new asn1js.OctetString({ valueHex: contentBuffer })\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region Privacy with password\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEncrypted = new EncryptedData();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst currentParameters = parameters.safeContents[index];\r\n\t\t\t\t\t\tcurrentParameters.contentToEncrypt = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Encrypt CMS EncryptedData using password\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEncrypted.encrypt(currentParameters),\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Store result content in CMS_CONTENT_INFO type\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.6\",\r\n\t\t\t\t\t\t\t\t\tcontent: cmsEncrypted.toSchema()\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region Privacy with public key\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst cmsEnveloped = new EnvelopedData();\r\n\t\t\t\t\t\tconst contentToEncrypt = content.value.toSchema().toBER(false);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check mandatory parameters\r\n\t\t\t\t\t\tif((\"encryptingCertificate\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptingCertificate\\\" in \\\"parameters.safeContents[i]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((\"encryptionAlgorithm\" in parameters.safeContents[index]) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptionAlgorithm\\\" in \\\"parameters.safeContents[i]\\\"\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === \"aes-cbc\"):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.name.toLowerCase() === \"aes-gcm\"):\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect parameter \"encryptionAlgorithm\" in \"parameters.safeContents[i]\": ${parameters.safeContents[index].encryptionAlgorithm}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length === 128):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length === 192):\r\n\t\t\t\t\t\t\tcase (parameters.safeContents[index].encryptionAlgorithm.length === 256):\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect parameter \"encryptionAlgorithm.length\" in \"parameters.safeContents[i]\": ${parameters.safeContents[index].encryptionAlgorithm.length}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Making correct \"encryptionAlgorithm\" variable\r\n\t\t\t\t\t\tconst encryptionAlgorithm = parameters.safeContents[index].encryptionAlgorithm;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Append recipient for enveloped data\r\n\t\t\t\t\t\tcmsEnveloped.addRecipientByCertificate(parameters.safeContents[index].encryptingCertificate);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Making encryption\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() => cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.safeContents.push(new ContentInfo({\r\n\t\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.3\",\r\n\t\t\t\t\t\t\t\t\tcontent: cmsEnveloped.toSchema()\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion \r\n\t\t\t\t//region default \r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Incorrect value for \"content.privacyMode\": ${content.privacyMode}`);\r\n\t\t\t\t//endregion \r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Return result of the function \r\n\t\treturn sequence.then(\r\n\t\t\t() => this,\r\n\t\t\terror => Promise.reject(`Error during parsing: ${error}`)\r\n\t\t);\r\n\t\t//endregion   \r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}