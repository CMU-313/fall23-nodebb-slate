{"version":3,"sources":["../src/ContentInfo.js"],"names":["asn1js","ContentInfo","constructor","parameters","contentType","defaultValues","content","fromSchema","schema","memberName","Any","Error","compareWithDefault","memberValue","names","optional","Sequence","name","blockName","value","ObjectIdentifier","Constructed","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON","object"],"mappings":"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","file":"ContentInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class ContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", ContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @description content\r\n\t\t */\r\n\t\tthis.content = getParametersValue(parameters, \"content\", ContentInfo.defaultValues(\"content\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"content\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"content\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//ContentInfo ::= SEQUENCE {\r\n\t\t//    contentType ContentType,\r\n\t\t//    content [0] EXPLICIT ANY DEFINED BY contentType }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [content]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"ContentInfo\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"contentType\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.content || \"content\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentType\",\r\n\t\t\t\"content\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tContentInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.content = asn1.result.content;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.contentType }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.content] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tcontentType: this.contentType\r\n\t\t};\r\n\r\n\t\tif(!(this.content instanceof asn1js.Any))\r\n\t\t\tobject.content = this.content.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}