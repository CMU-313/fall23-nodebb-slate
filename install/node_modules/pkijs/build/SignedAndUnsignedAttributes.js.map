{"version":3,"sources":["../src/SignedAndUnsignedAttributes.js"],"names":["asn1js","SignedAndUnsignedAttributes","constructor","parameters","type","defaultValues","attributes","encodedValue","fromSchema","schema","memberName","ArrayBuffer","Error","compareWithDefault","memberValue","length","byteLength","names","Constructed","name","blockName","optional","idBlock","tagClass","tagNumber","value","Repeated","asn1","compareSchema","verified","result","valueBeforeDecode","encodedView","Uint8Array","Array","from","element","toSchema","toJSON"],"mappings":"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","file":"SignedAndUnsignedAttributes.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignedAndUnsignedAttributes\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedAndUnsignedAttributes class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", SignedAndUnsignedAttributes.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @description attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", SignedAndUnsignedAttributes.defaultValues(\"attributes\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description encodedValue Need to have it in order to successfully process with signature verification\r\n\t\t */\r\n\t\tthis.encodedValue = getParametersValue(parameters, \"encodedValue\", SignedAndUnsignedAttributes.defaultValues(\"encodedValue\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encodedValue\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedAndUnsignedAttributes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (memberValue === SignedAndUnsignedAttributes.defaultValues(\"type\"));\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encodedValue\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedAndUnsignedAttributes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\r\n\t\t//    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\r\n\r\n\t\t//SignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\r\n\t\t//UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {number} [tagNumber]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Constructed({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: true,\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: names.tagNumber // \"SignedAttributes\" = 0, \"UnsignedAttributes\" = 1\r\n\t\t\t},\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"attributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedAndUnsignedAttributes.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttagNumber: this.type,\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedAndUnsignedAttributes\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.idBlock.tagNumber;\r\n\t\tthis.encodedValue = asn1.result.valueBeforeDecode;\r\n\r\n\t\t//region Change type from \"[0]\" to \"SET\" accordingly to standard\r\n\t\tconst encodedView = new Uint8Array(this.encodedValue);\r\n\t\tencodedView[0] = 0x31;\r\n\t\t//endregion\r\n\r\n\t\tif((\"attributes\" in asn1.result) === false)\r\n\t\t{\r\n\t\t\tif(this.type === 0)\r\n\t\t\t\tthrow new Error(\"Wrong structure of SignedUnsignedAttributes\");\r\n\t\t\telse\r\n\t\t\t\treturn; // Not so important in case of \"UnsignedAttributes\"\r\n\t\t}\r\n\r\n\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(SignedAndUnsignedAttributes.compareWithDefault(\"type\", this.type) || SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", this.attributes))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Constructed({\r\n\t\t\toptional: true,\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: this.type // \"SignedAttributes\" = 0, \"UnsignedAttributes\" = 1\r\n\t\t\t},\r\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(SignedAndUnsignedAttributes.compareWithDefault(\"type\", this.type) || SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", this.attributes))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\r\n\t\t\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}