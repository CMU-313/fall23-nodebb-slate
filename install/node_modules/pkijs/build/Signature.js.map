{"version":3,"sources":["../src/Signature.js"],"names":["asn1js","Signature","constructor","parameters","signatureAlgorithm","defaultValues","signature","certs","fromSchema","schema","memberName","BitString","Error","compareWithDefault","memberValue","algorithmId","isEqual","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"Signature.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class Signature\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Signature class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Signature.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @description signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Signature.defaultValues(\"signature\"));\r\n\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @description certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", Signature.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Signature class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(Signature.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Signature class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//Signature       ::=     SEQUENCE {\r\n\t\t//    signatureAlgorithm      AlgorithmIdentifier,\r\n\t\t//    signature               BIT STRING,\r\n\t\t//    certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.certs || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signature\",\r\n\t\t\t\"certs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignature.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignature: \"signature\",\r\n\t\t\t\t\tcerts: \"certs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Signature\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signature = asn1.result.signature;\r\n\r\n\t\tif(\"certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result.certs, element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}