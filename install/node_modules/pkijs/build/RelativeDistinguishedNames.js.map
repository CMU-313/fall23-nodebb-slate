{"version":3,"sources":["../src/RelativeDistinguishedNames.js"],"names":["asn1js","RelativeDistinguishedNames","constructor","parameters","typesAndValues","defaultValues","valueBeforeDecode","fromSchema","schema","memberName","ArrayBuffer","Error","compareWithDefault","memberValue","length","byteLength","names","Sequence","name","blockName","value","Repeated","repeatedSequence","Set","repeatedSet","typeAndValue","asn1","compareSchema","verified","result","Array","from","element","RDN","toSchema","fromBER","toJSON","isEqual","compareTo","entries","index"],"mappings":"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","file":"RelativeDistinguishedNames.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport AttributeTypeAndValue from \"./AttributeTypeAndValue.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class RelativeDistinguishedNames\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RelativeDistinguishedNames class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t * @property {Array.<AttributeTypeAndValue>} [typesAndValues] Array of \"type and value\" objects\r\n\t * @property {ArrayBuffer} [valueBeforeDecode] Value of the RDN before decoding from schema\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<AttributeTypeAndValue>}\r\n\t\t * @description Array of \"type and value\" objects\r\n\t\t */\r\n\t\tthis.typesAndValues = getParametersValue(parameters, \"typesAndValues\", RelativeDistinguishedNames.defaultValues(\"typesAndValues\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @description Value of the RDN before decoding from schema\r\n\t\t */\r\n\t\tthis.valueBeforeDecode = getParametersValue(parameters, \"valueBeforeDecode\", RelativeDistinguishedNames.defaultValues(\"valueBeforeDecode\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//RDNSequence ::= Sequence OF RelativeDistinguishedName\r\n\t\t//\r\n\t\t//RelativeDistinguishedName ::=\r\n\t\t//SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [repeatedSequence] Name for \"repeatedSequence\" block\r\n\t\t * @property {string} [repeatedSet] Name for \"repeatedSet\" block\r\n\t\t * @property {string} [typeAndValue] Name for \"typeAndValue\" block\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.repeatedSequence || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Set({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.repeatedSet || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: AttributeTypeAndValue.schema(names.typeAndValue || {})\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"RDN\",\r\n\t\t\t\"typesAndValues\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRelativeDistinguishedNames.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"RDN\",\r\n\t\t\t\t\trepeatedSet: \"typesAndValues\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RelativeDistinguishedNames\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"typesAndValues\" in asn1.result) // Could be a case when there is no \"types and values\"\r\n\t\t\tthis.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\r\n\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.valueBeforeDecode = asn1.result.RDN.valueBeforeDecode;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tif(this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create \"from scratch\"\r\n\t\t{\r\n\t\t\treturn (new asn1js.Sequence({\r\n\t\t\t\tvalue: [new asn1js.Set({\r\n\t\t\t\t\tvalue: Array.from(this.typesAndValues, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tconst asn1 = asn1js.fromBER(this.valueBeforeDecode);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn asn1.result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttypesAndValues: Array.from(this.typesAndValues, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two RDN values, or RDN with ArrayBuffer value\r\n\t * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof RelativeDistinguishedNames)\r\n\t\t{\r\n\t\t\tif(this.typesAndValues.length !== compareTo.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tfor(const [index, typeAndValue] of this.typesAndValues.entries())\r\n\t\t\t{\r\n\t\t\t\tif(typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}