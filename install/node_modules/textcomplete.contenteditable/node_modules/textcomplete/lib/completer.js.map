{"version":3,"sources":["../src/completer.js"],"names":["CALLBACK_METHODS","Completer","strategies","forEach","method","bind","strategy","destroy","push","text","query","extractQuery","execute","handleQueryResult","i","length","buildQuery","searchResults","emit"],"mappings":";;;;;;;;AAEA;;;;AAEA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,mBAAmB,CAAC,mBAAD,CAAzB;;AAEA;;;;IAGqBC,S;;;AAGnB,uBAAc;AAAA;;AAAA;;AAEZ,UAAKC,UAAL,GAAkB,EAAlB;;AAEAF,qBAAiBG,OAAjB,CAAyB,kBAAU;AACjC,OAAC,MAAYC,MAAZ,IAAsB,MAAYA,MAAZ,EAAoBC,IAApB,OAAtB;AACF,KAFD;AAJY;AAOb;;AAED;;;;;;;8BAGU;AACR,WAAKH,UAAL,CAAgBC,OAAhB,CAAwB;AAAA,eAAYG,SAASC,OAAT,EAAZ;AAAA,OAAxB;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;;qCAKiBD,Q,EAAoB;AACnC,WAAKJ,UAAL,CAAgBM,IAAhB,CAAqBF,QAArB;AACA,aAAO,IAAP;AACD;;AAED;;;;;;wBAGIG,I,EAAoB;AACtB,UAAMC,QAAQ,KAAKC,YAAL,CAAkBF,IAAlB,CAAd;AACA,UAAIC,KAAJ,EAAW;AACTA,cAAME,OAAN,CAAc,KAAKC,iBAAnB;AACD,OAFD,MAEO;AACL,aAAKA,iBAAL,CAAuB,EAAvB;AACD;AACF;;AAED;;;;;;;;iCAKaJ,I,EAAc;AACzB,WAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAI,KAAKZ,UAAL,CAAgBa,MAApC,EAA4CD,GAA5C,EAAiD;AAC/C,YAAMJ,QAAQ,KAAKR,UAAL,CAAgBY,CAAhB,EAAmBE,UAAnB,CAA8BP,IAA9B,CAAd;AACA,YAAIC,KAAJ,EAAW;AACT,iBAAOA,KAAP;AACD;AACF;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;;sCAKkBO,a,EAA+B;AAC/C,WAAKC,IAAL,CAAU,KAAV,EAAiB,EAAED,4BAAF,EAAjB;AACD;;;;;;kBAhEkBhB,S","file":"completer.js","sourcesContent":["// @flow\n\nimport EventEmitter from \"eventemitter3\"\n\nimport Strategy from \"./strategy\"\nimport SearchResult from \"./search_result\"\n\nconst CALLBACK_METHODS = [\"handleQueryResult\"]\n\n/**\n * Complete engine.\n */\nexport default class Completer extends EventEmitter {\n  strategies: Strategy[]\n\n  constructor() {\n    super()\n    this.strategies = []\n\n    CALLBACK_METHODS.forEach(method => {\n      ;(this: any)[method] = (this: any)[method].bind(this)\n    })\n  }\n\n  /**\n   * @return {this}\n   */\n  destroy() {\n    this.strategies.forEach(strategy => strategy.destroy())\n    return this\n  }\n\n  /**\n   * Register a strategy to the completer.\n   *\n   * @return {this}\n   */\n  registerStrategy(strategy: Strategy) {\n    this.strategies.push(strategy)\n    return this\n  }\n\n  /**\n   * @param {string} text - Head to input cursor.\n   */\n  run(text: string): void {\n    const query = this.extractQuery(text)\n    if (query) {\n      query.execute(this.handleQueryResult)\n    } else {\n      this.handleQueryResult([])\n    }\n  }\n\n  /**\n   * Find a query, which matches to the given text.\n   *\n   * @private\n   */\n  extractQuery(text: string) {\n    for (let i = 0; i < this.strategies.length; i++) {\n      const query = this.strategies[i].buildQuery(text)\n      if (query) {\n        return query\n      }\n    }\n    return null\n  }\n\n  /**\n   * Callbacked by {@link Query#execute}.\n   *\n   * @private\n   */\n  handleQueryResult(searchResults: SearchResult[]) {\n    this.emit(\"hit\", { searchResults })\n  }\n}\n"]}