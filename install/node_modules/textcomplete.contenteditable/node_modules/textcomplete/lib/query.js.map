{"version":3,"sources":["../src/query.js"],"names":["Query","strategy","term","match","callback","search","results","map","result"],"mappings":";;;;;;;;AAEA;;;;AACA;;;;;;;;AAQA;;;IAGqBA,K;AAKnB,iBAAYC,QAAZ,EAAgCC,IAAhC,EAA8CC,KAA9C,EAAgE;AAAA;;AAC9D,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD;;AAED;;;;;;;4BAGQC,Q,EAAoC;AAAA;;AAC1C,WAAKH,QAAL,CAAcI,MAAd,CACE,KAAKH,IADP,EAEE,mBAAW;AACTE,iBACEE,QAAQC,GAAR,CAAY,kBAAU;AACpB,iBAAO,4BAAiBC,MAAjB,EAAyB,MAAKN,IAA9B,EAAoC,MAAKD,QAAzC,CAAP;AACD,SAFD,CADF;AAKD,OARH,EASE,KAAKE,KATP;AAWD;;;;;;kBA1BkBH,K","file":"query.js","sourcesContent":["// @flow\n\nimport SearchResult from \"./search_result\"\nimport Strategy from \"./strategy\"\n\ndeclare class MatchData extends Array<string> {\n  index: number,\n}\n\nexport type { MatchData }\n\n/**\n * Encapsulate matching condition between a Strategy and current editor's value.\n */\nexport default class Query {\n  strategy: Strategy\n  term: string\n  match: MatchData\n\n  constructor(strategy: Strategy, term: string, match: MatchData) {\n    this.strategy = strategy\n    this.term = term\n    this.match = match\n  }\n\n  /**\n   * Invoke search strategy and callback the given function.\n   */\n  execute(callback: (SearchResult[]) => void) {\n    this.strategy.search(\n      this.term,\n      results => {\n        callback(\n          results.map(result => {\n            return new SearchResult(result, this.term, this.strategy)\n          }),\n        )\n      },\n      this.match,\n    )\n  }\n}\n"]}