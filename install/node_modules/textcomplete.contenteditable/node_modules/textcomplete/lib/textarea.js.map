{"version":3,"sources":["../src/textarea.js"],"names":["getCaretCoordinates","require","CALLBACK_METHODS","Textarea","el","forEach","method","bind","startListening","stopListening","searchResult","before","getBeforeCursor","replace","getAfterCursor","focus","Array","isArray","dispatchEvent","Event","elOffset","elScroll","getElScroll","cursorPosition","getCursorPosition","lineHeight","top","left","dir","right","document","documentElement","clientWidth","selectionStart","selectionEnd","value","substring","scrollTop","scrollLeft","emitChangeEvent","e","code","getCode","event","emitMoveEvent","emitEnterEvent","emitEscEvent","defaultPrevented","preventDefault","addEventListener","onInput","onKeydown","removeEventListener"],"mappings":"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","file":"textarea.js","sourcesContent":["// @flow\n\nimport update from \"undate/lib/update\"\n\nimport Editor from \"./editor\"\nimport { calculateElementOffset, getLineHeightPx } from \"./utils\"\nimport SearchResult from \"./search_result\"\n\nconst getCaretCoordinates = require(\"textarea-caret\")\n\nconst CALLBACK_METHODS = [\"onInput\", \"onKeydown\"]\n\n/**\n * Encapsulate the target textarea element.\n */\nexport default class Textarea extends Editor {\n  el: HTMLTextAreaElement\n\n  /**\n   * @param {HTMLTextAreaElement} el - Where the textcomplete works on.\n   */\n  constructor(el: HTMLTextAreaElement) {\n    super()\n    this.el = el\n\n    CALLBACK_METHODS.forEach(method => {\n      ;(this: any)[method] = (this: any)[method].bind(this)\n    })\n\n    this.startListening()\n  }\n\n  /**\n   * @return {this}\n   */\n  destroy() {\n    super.destroy()\n    this.stopListening()\n    // Release the element reference early to help garbage collection.\n    ;(this: any).el = null\n    return this\n  }\n\n  /**\n   * Implementation for {@link Editor#applySearchResult}\n   */\n  applySearchResult(searchResult: SearchResult) {\n    const before = this.getBeforeCursor()\n    if (before != null) {\n      const replace = searchResult.replace(before, this.getAfterCursor())\n      this.el.focus() // Clicking a dropdown item removes focus from the element.\n      if (Array.isArray(replace)) {\n        update(this.el, replace[0], replace[1])\n        this.el.dispatchEvent(new Event(\"input\"))\n      }\n    }\n  }\n\n  /**\n   * Implementation for {@link Editor#getCursorOffset}\n   */\n  getCursorOffset() {\n    const elOffset = calculateElementOffset(this.el)\n    const elScroll = this.getElScroll()\n    const cursorPosition = this.getCursorPosition()\n    const lineHeight = getLineHeightPx(this.el)\n    const top = elOffset.top - elScroll.top + cursorPosition.top + lineHeight\n    const left = elOffset.left - elScroll.left + cursorPosition.left\n    if (this.el.dir !== \"rtl\") {\n      return { top, left, lineHeight }\n    } else {\n      const right = document.documentElement\n        ? document.documentElement.clientWidth - left\n        : 0\n      return { top, right, lineHeight }\n    }\n  }\n\n  /**\n   * Implementation for {@link Editor#getBeforeCursor}\n   */\n  getBeforeCursor() {\n    return this.el.selectionStart !== this.el.selectionEnd\n      ? null\n      : this.el.value.substring(0, this.el.selectionEnd)\n  }\n\n  /** @private */\n  getAfterCursor() {\n    return this.el.value.substring(this.el.selectionEnd)\n  }\n\n  /** @private */\n  getElScroll(): { top: number, left: number } {\n    return { top: this.el.scrollTop, left: this.el.scrollLeft }\n  }\n\n  /**\n   * The input cursor's relative coordinates from the textarea's left\n   * top corner.\n   *\n   * @private\n   */\n  getCursorPosition(): { top: number, left: number } {\n    return getCaretCoordinates(this.el, this.el.selectionEnd)\n  }\n\n  /** @private */\n  onInput() {\n    this.emitChangeEvent()\n  }\n\n  /** @private */\n  onKeydown(e: KeyboardEvent) {\n    const code = this.getCode(e)\n    let event\n    if (code === \"UP\" || code === \"DOWN\") {\n      event = this.emitMoveEvent(code)\n    } else if (code === \"ENTER\") {\n      event = this.emitEnterEvent()\n    } else if (code === \"ESC\") {\n      event = this.emitEscEvent()\n    }\n    if (event && event.defaultPrevented) {\n      e.preventDefault()\n    }\n  }\n\n  /** @private */\n  startListening() {\n    this.el.addEventListener(\"input\", this.onInput)\n    this.el.addEventListener(\"keydown\", this.onKeydown)\n  }\n\n  /** @private */\n  stopListening() {\n    this.el.removeEventListener(\"input\", this.onInput)\n    this.el.removeEventListener(\"keydown\", this.onKeydown)\n  }\n}\n"]}